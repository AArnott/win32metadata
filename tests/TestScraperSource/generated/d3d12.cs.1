// Copyright Â© Microsoft
using Microsoft.Windows.Sdk.Win32Metadata.Interop;
using System;
using System.Runtime.InteropServices;
using static Microsoft.Windows.Sdk.Win32Metadata.D3D12_COMMAND_LIST_TYPE;
using static Microsoft.Windows.Sdk.Win32Metadata.D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT;
using static Microsoft.Windows.Sdk.Win32Metadata.D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE;
using static Microsoft.Windows.Sdk.Win32Metadata.D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION;
using static Microsoft.Windows.Sdk.Win32Metadata.D3D12_VIDEO_PROCESS_FILTER;

namespace Microsoft.Windows.Sdk.Win32Metadata
{
    public enum D3D12_COMMAND_LIST_TYPE
    {
        D3D12_COMMAND_LIST_TYPE_DIRECT = 0,
        D3D12_COMMAND_LIST_TYPE_BUNDLE = 1,
        D3D12_COMMAND_LIST_TYPE_COMPUTE = 2,
        D3D12_COMMAND_LIST_TYPE_COPY = 3,
        D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE = 4,
        D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS = 5,
        D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE = 6,
    }

    public enum D3D12_COMMAND_QUEUE_FLAGS
    {
        D3D12_COMMAND_QUEUE_FLAG_NONE = 0,
        D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT = 0x1,
    }

    public enum D3D12_COMMAND_QUEUE_PRIORITY
    {
        D3D12_COMMAND_QUEUE_PRIORITY_NORMAL = 0,
        D3D12_COMMAND_QUEUE_PRIORITY_HIGH = 100,
        D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME = 10000,
    }

    public partial struct D3D12_COMMAND_QUEUE_DESC
    {
        public D3D12_COMMAND_LIST_TYPE Type;

        [NativeTypeName("INT")]
        public int Priority;

        public D3D12_COMMAND_QUEUE_FLAGS Flags;

        [NativeTypeName("UINT")]
        public uint NodeMask;
    }

    public enum D3D12_PRIMITIVE_TOPOLOGY_TYPE
    {
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED = 0,
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT = 1,
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE = 2,
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE = 3,
        D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH = 4,
    }

    public enum D3D12_INPUT_CLASSIFICATION
    {
        D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA = 0,
        D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA = 1,
    }

    public unsafe partial struct D3D12_INPUT_ELEMENT_DESC
    {
        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* SemanticName;

        [NativeTypeName("UINT")]
        public uint SemanticIndex;

        public DXGI_FORMAT Format;

        [NativeTypeName("UINT")]
        public uint InputSlot;

        [NativeTypeName("UINT")]
        public uint AlignedByteOffset;

        public D3D12_INPUT_CLASSIFICATION InputSlotClass;

        [NativeTypeName("UINT")]
        public uint InstanceDataStepRate;
    }

    public enum D3D12_FILL_MODE
    {
        D3D12_FILL_MODE_WIREFRAME = 2,
        D3D12_FILL_MODE_SOLID = 3,
    }

    public enum D3D12_CULL_MODE
    {
        D3D12_CULL_MODE_NONE = 1,
        D3D12_CULL_MODE_FRONT = 2,
        D3D12_CULL_MODE_BACK = 3,
    }

    public unsafe partial struct D3D12_SO_DECLARATION_ENTRY
    {
        [NativeTypeName("UINT")]
        public uint Stream;

        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* SemanticName;

        [NativeTypeName("UINT")]
        public uint SemanticIndex;

        [NativeTypeName("BYTE")]
        public byte StartComponent;

        [NativeTypeName("BYTE")]
        public byte ComponentCount;

        [NativeTypeName("BYTE")]
        public byte OutputSlot;
    }

    public partial struct D3D12_VIEWPORT
    {
        [NativeTypeName("FLOAT")]
        public float TopLeftX;

        [NativeTypeName("FLOAT")]
        public float TopLeftY;

        [NativeTypeName("FLOAT")]
        public float Width;

        [NativeTypeName("FLOAT")]
        public float Height;

        [NativeTypeName("FLOAT")]
        public float MinDepth;

        [NativeTypeName("FLOAT")]
        public float MaxDepth;
    }

    public partial struct D3D12_BOX
    {
        [NativeTypeName("UINT")]
        public uint left;

        [NativeTypeName("UINT")]
        public uint top;

        [NativeTypeName("UINT")]
        public uint front;

        [NativeTypeName("UINT")]
        public uint right;

        [NativeTypeName("UINT")]
        public uint bottom;

        [NativeTypeName("UINT")]
        public uint back;
    }

    public enum D3D12_COMPARISON_FUNC
    {
        D3D12_COMPARISON_FUNC_NEVER = 1,
        D3D12_COMPARISON_FUNC_LESS = 2,
        D3D12_COMPARISON_FUNC_EQUAL = 3,
        D3D12_COMPARISON_FUNC_LESS_EQUAL = 4,
        D3D12_COMPARISON_FUNC_GREATER = 5,
        D3D12_COMPARISON_FUNC_NOT_EQUAL = 6,
        D3D12_COMPARISON_FUNC_GREATER_EQUAL = 7,
        D3D12_COMPARISON_FUNC_ALWAYS = 8,
    }

    public enum D3D12_DEPTH_WRITE_MASK
    {
        D3D12_DEPTH_WRITE_MASK_ZERO = 0,
        D3D12_DEPTH_WRITE_MASK_ALL = 1,
    }

    public enum D3D12_STENCIL_OP
    {
        D3D12_STENCIL_OP_KEEP = 1,
        D3D12_STENCIL_OP_ZERO = 2,
        D3D12_STENCIL_OP_REPLACE = 3,
        D3D12_STENCIL_OP_INCR_SAT = 4,
        D3D12_STENCIL_OP_DECR_SAT = 5,
        D3D12_STENCIL_OP_INVERT = 6,
        D3D12_STENCIL_OP_INCR = 7,
        D3D12_STENCIL_OP_DECR = 8,
    }

    public partial struct D3D12_DEPTH_STENCILOP_DESC
    {
        public D3D12_STENCIL_OP StencilFailOp;

        public D3D12_STENCIL_OP StencilDepthFailOp;

        public D3D12_STENCIL_OP StencilPassOp;

        public D3D12_COMPARISON_FUNC StencilFunc;
    }

    public partial struct D3D12_DEPTH_STENCIL_DESC
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int DepthEnable;

        public D3D12_DEPTH_WRITE_MASK DepthWriteMask;

        public D3D12_COMPARISON_FUNC DepthFunc;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int StencilEnable;

        [NativeTypeName("UINT8")]
        public byte StencilReadMask;

        [NativeTypeName("UINT8")]
        public byte StencilWriteMask;

        public D3D12_DEPTH_STENCILOP_DESC FrontFace;

        public D3D12_DEPTH_STENCILOP_DESC BackFace;
    }

    public partial struct D3D12_DEPTH_STENCIL_DESC1
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int DepthEnable;

        public D3D12_DEPTH_WRITE_MASK DepthWriteMask;

        public D3D12_COMPARISON_FUNC DepthFunc;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int StencilEnable;

        [NativeTypeName("UINT8")]
        public byte StencilReadMask;

        [NativeTypeName("UINT8")]
        public byte StencilWriteMask;

        public D3D12_DEPTH_STENCILOP_DESC FrontFace;

        public D3D12_DEPTH_STENCILOP_DESC BackFace;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int DepthBoundsTestEnable;
    }

    public enum D3D12_BLEND
    {
        D3D12_BLEND_ZERO = 1,
        D3D12_BLEND_ONE = 2,
        D3D12_BLEND_SRC_COLOR = 3,
        D3D12_BLEND_INV_SRC_COLOR = 4,
        D3D12_BLEND_SRC_ALPHA = 5,
        D3D12_BLEND_INV_SRC_ALPHA = 6,
        D3D12_BLEND_DEST_ALPHA = 7,
        D3D12_BLEND_INV_DEST_ALPHA = 8,
        D3D12_BLEND_DEST_COLOR = 9,
        D3D12_BLEND_INV_DEST_COLOR = 10,
        D3D12_BLEND_SRC_ALPHA_SAT = 11,
        D3D12_BLEND_BLEND_FACTOR = 14,
        D3D12_BLEND_INV_BLEND_FACTOR = 15,
        D3D12_BLEND_SRC1_COLOR = 16,
        D3D12_BLEND_INV_SRC1_COLOR = 17,
        D3D12_BLEND_SRC1_ALPHA = 18,
        D3D12_BLEND_INV_SRC1_ALPHA = 19,
    }

    public enum D3D12_BLEND_OP
    {
        D3D12_BLEND_OP_ADD = 1,
        D3D12_BLEND_OP_SUBTRACT = 2,
        D3D12_BLEND_OP_REV_SUBTRACT = 3,
        D3D12_BLEND_OP_MIN = 4,
        D3D12_BLEND_OP_MAX = 5,
    }

    public enum D3D12_COLOR_WRITE_ENABLE
    {
        D3D12_COLOR_WRITE_ENABLE_RED = 1,
        D3D12_COLOR_WRITE_ENABLE_GREEN = 2,
        D3D12_COLOR_WRITE_ENABLE_BLUE = 4,
        D3D12_COLOR_WRITE_ENABLE_ALPHA = 8,
        D3D12_COLOR_WRITE_ENABLE_ALL = (((D3D12_COLOR_WRITE_ENABLE_RED | D3D12_COLOR_WRITE_ENABLE_GREEN) | D3D12_COLOR_WRITE_ENABLE_BLUE) | D3D12_COLOR_WRITE_ENABLE_ALPHA),
    }

    public enum D3D12_LOGIC_OP
    {
        D3D12_LOGIC_OP_CLEAR = 0,
        D3D12_LOGIC_OP_SET = (D3D12_LOGIC_OP_CLEAR + 1),
        D3D12_LOGIC_OP_COPY = (D3D12_LOGIC_OP_SET + 1),
        D3D12_LOGIC_OP_COPY_INVERTED = (D3D12_LOGIC_OP_COPY + 1),
        D3D12_LOGIC_OP_NOOP = (D3D12_LOGIC_OP_COPY_INVERTED + 1),
        D3D12_LOGIC_OP_INVERT = (D3D12_LOGIC_OP_NOOP + 1),
        D3D12_LOGIC_OP_AND = (D3D12_LOGIC_OP_INVERT + 1),
        D3D12_LOGIC_OP_NAND = (D3D12_LOGIC_OP_AND + 1),
        D3D12_LOGIC_OP_OR = (D3D12_LOGIC_OP_NAND + 1),
        D3D12_LOGIC_OP_NOR = (D3D12_LOGIC_OP_OR + 1),
        D3D12_LOGIC_OP_XOR = (D3D12_LOGIC_OP_NOR + 1),
        D3D12_LOGIC_OP_EQUIV = (D3D12_LOGIC_OP_XOR + 1),
        D3D12_LOGIC_OP_AND_REVERSE = (D3D12_LOGIC_OP_EQUIV + 1),
        D3D12_LOGIC_OP_AND_INVERTED = (D3D12_LOGIC_OP_AND_REVERSE + 1),
        D3D12_LOGIC_OP_OR_REVERSE = (D3D12_LOGIC_OP_AND_INVERTED + 1),
        D3D12_LOGIC_OP_OR_INVERTED = (D3D12_LOGIC_OP_OR_REVERSE + 1),
    }

    public partial struct D3D12_RENDER_TARGET_BLEND_DESC
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int BlendEnable;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int LogicOpEnable;

        public D3D12_BLEND SrcBlend;

        public D3D12_BLEND DestBlend;

        public D3D12_BLEND_OP BlendOp;

        public D3D12_BLEND SrcBlendAlpha;

        public D3D12_BLEND DestBlendAlpha;

        public D3D12_BLEND_OP BlendOpAlpha;

        public D3D12_LOGIC_OP LogicOp;

        [NativeTypeName("UINT8")]
        public byte RenderTargetWriteMask;
    }

    public partial struct D3D12_BLEND_DESC
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int AlphaToCoverageEnable;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int IndependentBlendEnable;

        [NativeTypeName("D3D12_RENDER_TARGET_BLEND_DESC [8]")]
        public _RenderTarget_e__FixedBuffer RenderTarget;

        public partial struct _RenderTarget_e__FixedBuffer
        {
            public D3D12_RENDER_TARGET_BLEND_DESC e0;
            public D3D12_RENDER_TARGET_BLEND_DESC e1;
            public D3D12_RENDER_TARGET_BLEND_DESC e2;
            public D3D12_RENDER_TARGET_BLEND_DESC e3;
            public D3D12_RENDER_TARGET_BLEND_DESC e4;
            public D3D12_RENDER_TARGET_BLEND_DESC e5;
            public D3D12_RENDER_TARGET_BLEND_DESC e6;
            public D3D12_RENDER_TARGET_BLEND_DESC e7;

            public unsafe ref D3D12_RENDER_TARGET_BLEND_DESC this[int index]
            {
                get
                {
                    fixed (D3D12_RENDER_TARGET_BLEND_DESC* pThis = &e0)
                    {
                        return ref pThis[index];
                    }
                }
            }
        }
    }

    public enum D3D12_CONSERVATIVE_RASTERIZATION_MODE
    {
        D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF = 0,
        D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON = 1,
    }

    public partial struct D3D12_RASTERIZER_DESC
    {
        public D3D12_FILL_MODE FillMode;

        public D3D12_CULL_MODE CullMode;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int FrontCounterClockwise;

        [NativeTypeName("INT")]
        public int DepthBias;

        [NativeTypeName("FLOAT")]
        public float DepthBiasClamp;

        [NativeTypeName("FLOAT")]
        public float SlopeScaledDepthBias;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int DepthClipEnable;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int MultisampleEnable;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int AntialiasedLineEnable;

        [NativeTypeName("UINT")]
        public uint ForcedSampleCount;

        public D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
    }

    [Guid("C4FEC28F-7966-4E95-9F94-F431CB56C3B8")]
    [NativeTypeName("struct ID3D12Object : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12Object
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Object* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Object* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Object* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Object* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Object* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Object* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Object* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Object* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Object* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Object* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Object* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Object* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Object* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Object* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }
    }

    [Guid("905DB94B-A00C-4140-9DF5-2B64CA9EA357")]
    [NativeTypeName("struct ID3D12DeviceChild : ID3D12Object")]
    [NativeInheritance("ID3D12Object")]
    public unsafe partial struct ID3D12DeviceChild
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DeviceChild* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DeviceChild* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DeviceChild* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12DeviceChild* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12DeviceChild* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12DeviceChild* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12DeviceChild* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12DeviceChild* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DeviceChild* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DeviceChild* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DeviceChild* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12DeviceChild* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12DeviceChild* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12DeviceChild* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12DeviceChild* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12DeviceChild* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }
    }

    [Guid("C54A6B66-72DF-4EE8-8BE5-A946A1429214")]
    [NativeTypeName("struct ID3D12RootSignature : ID3D12DeviceChild")]
    [NativeInheritance("ID3D12DeviceChild")]
    public unsafe partial struct ID3D12RootSignature
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12RootSignature* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12RootSignature* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12RootSignature* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12RootSignature* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12RootSignature* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12RootSignature* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12RootSignature* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12RootSignature* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12RootSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12RootSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12RootSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12RootSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12RootSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12RootSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12RootSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12RootSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }
    }

    public unsafe partial struct D3D12_SHADER_BYTECODE
    {
        [NativeTypeName("const void *")]
        [Const]
        public void* pShaderBytecode;

        [NativeTypeName("SIZE_T")]
        public UIntPtr BytecodeLength;
    }

    public unsafe partial struct D3D12_STREAM_OUTPUT_DESC
    {
        [NativeTypeName("const D3D12_SO_DECLARATION_ENTRY *")]
        [Const]
        public D3D12_SO_DECLARATION_ENTRY* pSODeclaration;

        [NativeTypeName("UINT")]
        public uint NumEntries;

        [NativeTypeName("const UINT *")]
        [Const]
        public uint* pBufferStrides;

        [NativeTypeName("UINT")]
        public uint NumStrides;

        [NativeTypeName("UINT")]
        public uint RasterizedStream;
    }

    public unsafe partial struct D3D12_INPUT_LAYOUT_DESC
    {
        [NativeTypeName("const D3D12_INPUT_ELEMENT_DESC *")]
        [Const]
        public D3D12_INPUT_ELEMENT_DESC* pInputElementDescs;

        [NativeTypeName("UINT")]
        public uint NumElements;
    }

    public enum D3D12_INDEX_BUFFER_STRIP_CUT_VALUE
    {
        D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED = 0,
        D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF = 1,
        D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF = 2,
    }

    public unsafe partial struct D3D12_CACHED_PIPELINE_STATE
    {
        [NativeTypeName("const void *")]
        [Const]
        public void* pCachedBlob;

        [NativeTypeName("SIZE_T")]
        public UIntPtr CachedBlobSizeInBytes;
    }

    public enum D3D12_PIPELINE_STATE_FLAGS
    {
        D3D12_PIPELINE_STATE_FLAG_NONE = 0,
        D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG = 0x1,
    }

    public unsafe partial struct D3D12_GRAPHICS_PIPELINE_STATE_DESC
    {
        [NativeTypeName("ID3D12RootSignature *")]
        public ID3D12RootSignature* pRootSignature;

        public D3D12_SHADER_BYTECODE VS;

        public D3D12_SHADER_BYTECODE PS;

        public D3D12_SHADER_BYTECODE DS;

        public D3D12_SHADER_BYTECODE HS;

        public D3D12_SHADER_BYTECODE GS;

        public D3D12_STREAM_OUTPUT_DESC StreamOutput;

        public D3D12_BLEND_DESC BlendState;

        [NativeTypeName("UINT")]
        public uint SampleMask;

        public D3D12_RASTERIZER_DESC RasterizerState;

        public D3D12_DEPTH_STENCIL_DESC DepthStencilState;

        public D3D12_INPUT_LAYOUT_DESC InputLayout;

        public D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;

        public D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;

        [NativeTypeName("UINT")]
        public uint NumRenderTargets;

        [NativeTypeName("DXGI_FORMAT [8]")]
        public _RTVFormats_e__FixedBuffer RTVFormats;

        public DXGI_FORMAT DSVFormat;

        public DXGI_SAMPLE_DESC SampleDesc;

        [NativeTypeName("UINT")]
        public uint NodeMask;

        public D3D12_CACHED_PIPELINE_STATE CachedPSO;

        public D3D12_PIPELINE_STATE_FLAGS Flags;

        public partial struct _RTVFormats_e__FixedBuffer
        {
            public DXGI_FORMAT e0;
            public DXGI_FORMAT e1;
            public DXGI_FORMAT e2;
            public DXGI_FORMAT e3;
            public DXGI_FORMAT e4;
            public DXGI_FORMAT e5;
            public DXGI_FORMAT e6;
            public DXGI_FORMAT e7;

            public unsafe ref DXGI_FORMAT this[int index]
            {
                get
                {
                    fixed (DXGI_FORMAT* pThis = &e0)
                    {
                        return ref pThis[index];
                    }
                }
            }
        }
    }

    public unsafe partial struct D3D12_COMPUTE_PIPELINE_STATE_DESC
    {
        [NativeTypeName("ID3D12RootSignature *")]
        public ID3D12RootSignature* pRootSignature;

        public D3D12_SHADER_BYTECODE CS;

        [NativeTypeName("UINT")]
        public uint NodeMask;

        public D3D12_CACHED_PIPELINE_STATE CachedPSO;

        public D3D12_PIPELINE_STATE_FLAGS Flags;
    }

    public partial struct D3D12_RT_FORMAT_ARRAY
    {
        [NativeTypeName("DXGI_FORMAT [8]")]
        public _RTFormats_e__FixedBuffer RTFormats;

        [NativeTypeName("UINT")]
        public uint NumRenderTargets;

        public partial struct _RTFormats_e__FixedBuffer
        {
            public DXGI_FORMAT e0;
            public DXGI_FORMAT e1;
            public DXGI_FORMAT e2;
            public DXGI_FORMAT e3;
            public DXGI_FORMAT e4;
            public DXGI_FORMAT e5;
            public DXGI_FORMAT e6;
            public DXGI_FORMAT e7;

            public unsafe ref DXGI_FORMAT this[int index]
            {
                get
                {
                    fixed (DXGI_FORMAT* pThis = &e0)
                    {
                        return ref pThis[index];
                    }
                }
            }
        }
    }

    public unsafe partial struct D3D12_PIPELINE_STATE_STREAM_DESC
    {
        [NativeTypeName("SIZE_T")]
        public UIntPtr SizeInBytes;

        [NativeTypeName("void *")]
        public void* pPipelineStateSubobjectStream;
    }

    public enum D3D12_PIPELINE_STATE_SUBOBJECT_TYPE
    {
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE = 0,
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1 + 1),
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS = 24,
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS = 25,
        D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID = (D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS + 1),
    }

    public enum D3D12_FEATURE
    {
        D3D12_FEATURE_D3D12_OPTIONS = 0,
        D3D12_FEATURE_ARCHITECTURE = 1,
        D3D12_FEATURE_FEATURE_LEVELS = 2,
        D3D12_FEATURE_FORMAT_SUPPORT = 3,
        D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS = 4,
        D3D12_FEATURE_FORMAT_INFO = 5,
        D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 6,
        D3D12_FEATURE_SHADER_MODEL = 7,
        D3D12_FEATURE_D3D12_OPTIONS1 = 8,
        D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT = 10,
        D3D12_FEATURE_ROOT_SIGNATURE = 12,
        D3D12_FEATURE_ARCHITECTURE1 = 16,
        D3D12_FEATURE_D3D12_OPTIONS2 = 18,
        D3D12_FEATURE_SHADER_CACHE = 19,
        D3D12_FEATURE_COMMAND_QUEUE_PRIORITY = 20,
        D3D12_FEATURE_D3D12_OPTIONS3 = 21,
        D3D12_FEATURE_EXISTING_HEAPS = 22,
        D3D12_FEATURE_D3D12_OPTIONS4 = 23,
        D3D12_FEATURE_SERIALIZATION = 24,
        D3D12_FEATURE_CROSS_NODE = 25,
        D3D12_FEATURE_D3D12_OPTIONS5 = 27,
        D3D12_FEATURE_D3D12_OPTIONS6 = 30,
        D3D12_FEATURE_QUERY_META_COMMAND = 31,
        D3D12_FEATURE_D3D12_OPTIONS7 = 32,
        D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPE_COUNT = 33,
        D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_TYPES = 34,
    }

    public enum D3D12_SHADER_MIN_PRECISION_SUPPORT
    {
        D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE = 0,
        D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT = 0x1,
        D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT = 0x2,
    }

    public enum D3D12_TILED_RESOURCES_TIER
    {
        D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED = 0,
        D3D12_TILED_RESOURCES_TIER_1 = 1,
        D3D12_TILED_RESOURCES_TIER_2 = 2,
        D3D12_TILED_RESOURCES_TIER_3 = 3,
        D3D12_TILED_RESOURCES_TIER_4 = 4,
    }

    public enum D3D12_RESOURCE_BINDING_TIER
    {
        D3D12_RESOURCE_BINDING_TIER_1 = 1,
        D3D12_RESOURCE_BINDING_TIER_2 = 2,
        D3D12_RESOURCE_BINDING_TIER_3 = 3,
    }

    public enum D3D12_CONSERVATIVE_RASTERIZATION_TIER
    {
        D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED = 0,
        D3D12_CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
        D3D12_CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
        D3D12_CONSERVATIVE_RASTERIZATION_TIER_3 = 3,
    }

    public enum D3D12_FORMAT_SUPPORT1
    {
        D3D12_FORMAT_SUPPORT1_NONE = 0,
        D3D12_FORMAT_SUPPORT1_BUFFER = 0x1,
        D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER = 0x2,
        D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER = 0x4,
        D3D12_FORMAT_SUPPORT1_SO_BUFFER = 0x8,
        D3D12_FORMAT_SUPPORT1_TEXTURE1D = 0x10,
        D3D12_FORMAT_SUPPORT1_TEXTURE2D = 0x20,
        D3D12_FORMAT_SUPPORT1_TEXTURE3D = 0x40,
        D3D12_FORMAT_SUPPORT1_TEXTURECUBE = 0x80,
        D3D12_FORMAT_SUPPORT1_SHADER_LOAD = 0x100,
        D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE = 0x200,
        D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON = 0x400,
        D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT = 0x800,
        D3D12_FORMAT_SUPPORT1_MIP = 0x1000,
        D3D12_FORMAT_SUPPORT1_RENDER_TARGET = 0x4000,
        D3D12_FORMAT_SUPPORT1_BLENDABLE = 0x8000,
        D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL = 0x10000,
        D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE = 0x40000,
        D3D12_FORMAT_SUPPORT1_DISPLAY = 0x80000,
        D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT = 0x100000,
        D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET = 0x200000,
        D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD = 0x400000,
        D3D12_FORMAT_SUPPORT1_SHADER_GATHER = 0x800000,
        D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST = 0x1000000,
        D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
        D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON = 0x4000000,
        D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT = 0x8000000,
        D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT = 0x10000000,
        D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT = 0x20000000,
        D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER = 0x40000000,
    }

    public enum D3D12_FORMAT_SUPPORT2
    {
        D3D12_FORMAT_SUPPORT2_NONE = 0,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 0x1,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 0x2,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 0x8,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
        D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
        D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 0x40,
        D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE = 0x80,
        D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 0x100,
        D3D12_FORMAT_SUPPORT2_TILED = 0x200,
        D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 0x4000,
        D3D12_FORMAT_SUPPORT2_SAMPLER_FEEDBACK = 0x8000,
    }

    public enum D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS
    {
        D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE = 0,
        D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE = 0x1,
    }

    public enum D3D12_CROSS_NODE_SHARING_TIER
    {
        D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED = 0,
        D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED = 1,
        D3D12_CROSS_NODE_SHARING_TIER_1 = 2,
        D3D12_CROSS_NODE_SHARING_TIER_2 = 3,
        D3D12_CROSS_NODE_SHARING_TIER_3 = 4,
    }

    public enum D3D12_RESOURCE_HEAP_TIER
    {
        D3D12_RESOURCE_HEAP_TIER_1 = 1,
        D3D12_RESOURCE_HEAP_TIER_2 = 2,
    }

    public enum D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER
    {
        D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED = 0,
        D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1 = 1,
        D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2 = 2,
    }

    public enum D3D12_VIEW_INSTANCING_TIER
    {
        D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED = 0,
        D3D12_VIEW_INSTANCING_TIER_1 = 1,
        D3D12_VIEW_INSTANCING_TIER_2 = 2,
        D3D12_VIEW_INSTANCING_TIER_3 = 3,
    }

    public partial struct D3D12_FEATURE_DATA_D3D12_OPTIONS
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int DoublePrecisionFloatShaderOps;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int OutputMergerLogicOp;

        public D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;

        public D3D12_TILED_RESOURCES_TIER TiledResourcesTier;

        public D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int PSSpecifiedStencilRefSupported;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int TypedUAVLoadAdditionalFormats;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int ROVsSupported;

        public D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;

        [NativeTypeName("UINT")]
        public uint MaxGPUVirtualAddressBitsPerResource;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int StandardSwizzle64KBSupported;

        public D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int CrossAdapterRowMajorTextureSupported;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;

        public D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
    }

    public partial struct D3D12_FEATURE_DATA_D3D12_OPTIONS1
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int WaveOps;

        [NativeTypeName("UINT")]
        public uint WaveLaneCountMin;

        [NativeTypeName("UINT")]
        public uint WaveLaneCountMax;

        [NativeTypeName("UINT")]
        public uint TotalLaneCount;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int ExpandedComputeResourceStates;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Int64ShaderOps;
    }

    public partial struct D3D12_FEATURE_DATA_D3D12_OPTIONS2
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int DepthBoundsTestSupported;

        public D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER ProgrammableSamplePositionsTier;
    }

    public enum D3D_ROOT_SIGNATURE_VERSION
    {
        D3D_ROOT_SIGNATURE_VERSION_1 = 0x1,
        D3D_ROOT_SIGNATURE_VERSION_1_0 = 0x1,
        D3D_ROOT_SIGNATURE_VERSION_1_1 = 0x2,
    }

    public partial struct D3D12_FEATURE_DATA_ROOT_SIGNATURE
    {
        public D3D_ROOT_SIGNATURE_VERSION HighestVersion;
    }

    public partial struct D3D12_FEATURE_DATA_ARCHITECTURE
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int TileBasedRenderer;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int UMA;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int CacheCoherentUMA;
    }

    public partial struct D3D12_FEATURE_DATA_ARCHITECTURE1
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int TileBasedRenderer;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int UMA;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int CacheCoherentUMA;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int IsolatedMMU;
    }

    public unsafe partial struct D3D12_FEATURE_DATA_FEATURE_LEVELS
    {
        [NativeTypeName("UINT")]
        public uint NumFeatureLevels;

        [NativeTypeName("const D3D_FEATURE_LEVEL *")]
        [Const]
        public D3D_FEATURE_LEVEL* pFeatureLevelsRequested;

        public D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
    }

    public enum D3D_SHADER_MODEL
    {
        D3D_SHADER_MODEL_5_1 = 0x51,
        D3D_SHADER_MODEL_6_0 = 0x60,
        D3D_SHADER_MODEL_6_1 = 0x61,
        D3D_SHADER_MODEL_6_2 = 0x62,
        D3D_SHADER_MODEL_6_3 = 0x63,
        D3D_SHADER_MODEL_6_4 = 0x64,
        D3D_SHADER_MODEL_6_5 = 0x65,
        D3D_SHADER_MODEL_6_6 = 0x66,
    }

    public partial struct D3D12_FEATURE_DATA_SHADER_MODEL
    {
        public D3D_SHADER_MODEL HighestShaderModel;
    }

    public partial struct D3D12_FEATURE_DATA_FORMAT_SUPPORT
    {
        public DXGI_FORMAT Format;

        public D3D12_FORMAT_SUPPORT1 Support1;

        public D3D12_FORMAT_SUPPORT2 Support2;
    }

    public partial struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS
    {
        public DXGI_FORMAT Format;

        [NativeTypeName("UINT")]
        public uint SampleCount;

        public D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;

        [NativeTypeName("UINT")]
        public uint NumQualityLevels;
    }

    public partial struct D3D12_FEATURE_DATA_FORMAT_INFO
    {
        public DXGI_FORMAT Format;

        [NativeTypeName("UINT8")]
        public byte PlaneCount;
    }

    public partial struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
    {
        [NativeTypeName("UINT")]
        public uint MaxGPUVirtualAddressBitsPerResource;

        [NativeTypeName("UINT")]
        public uint MaxGPUVirtualAddressBitsPerProcess;
    }

    public enum D3D12_SHADER_CACHE_SUPPORT_FLAGS
    {
        D3D12_SHADER_CACHE_SUPPORT_NONE = 0,
        D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO = 0x1,
        D3D12_SHADER_CACHE_SUPPORT_LIBRARY = 0x2,
        D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 0x4,
        D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 0x8,
    }

    public partial struct D3D12_FEATURE_DATA_SHADER_CACHE
    {
        public D3D12_SHADER_CACHE_SUPPORT_FLAGS SupportFlags;
    }

    public partial struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY
    {
        public D3D12_COMMAND_LIST_TYPE CommandListType;

        [NativeTypeName("UINT")]
        public uint Priority;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int PriorityForTypeIsSupported;
    }

    public enum D3D12_COMMAND_LIST_SUPPORT_FLAGS
    {
        D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE = 0,
        D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT = (1 << D3D12_COMMAND_LIST_TYPE_DIRECT),
        D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE = (1 << D3D12_COMMAND_LIST_TYPE_BUNDLE),
        D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE = (1 << D3D12_COMMAND_LIST_TYPE_COMPUTE),
        D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY = (1 << D3D12_COMMAND_LIST_TYPE_COPY),
        D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE = (1 << D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE),
        D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS = (1 << D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS),
        D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE = (1 << D3D12_COMMAND_LIST_TYPE_VIDEO_ENCODE),
    }

    public partial struct D3D12_FEATURE_DATA_D3D12_OPTIONS3
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int CopyQueueTimestampQueriesSupported;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int CastingFullyTypedFormatSupported;

        public D3D12_COMMAND_LIST_SUPPORT_FLAGS WriteBufferImmediateSupportFlags;

        public D3D12_VIEW_INSTANCING_TIER ViewInstancingTier;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int BarycentricsSupported;
    }

    public partial struct D3D12_FEATURE_DATA_EXISTING_HEAPS
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Supported;
    }

    public enum D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER
    {
        D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 = 0,
        D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 = (D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0 + 1),
        D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2 = (D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1 + 1),
    }

    public partial struct D3D12_FEATURE_DATA_D3D12_OPTIONS4
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int MSAA64KBAlignedTextureSupported;

        public D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER SharedResourceCompatibilityTier;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Native16BitShaderOpsSupported;
    }

    public enum D3D12_HEAP_SERIALIZATION_TIER
    {
        D3D12_HEAP_SERIALIZATION_TIER_0 = 0,
        D3D12_HEAP_SERIALIZATION_TIER_10 = 10,
    }

    public partial struct D3D12_FEATURE_DATA_SERIALIZATION
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public D3D12_HEAP_SERIALIZATION_TIER HeapSerializationTier;
    }

    public partial struct D3D12_FEATURE_DATA_CROSS_NODE
    {
        public D3D12_CROSS_NODE_SHARING_TIER SharingTier;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int AtomicShaderInstructions;
    }

    public enum D3D12_RENDER_PASS_TIER
    {
        D3D12_RENDER_PASS_TIER_0 = 0,
        D3D12_RENDER_PASS_TIER_1 = 1,
        D3D12_RENDER_PASS_TIER_2 = 2,
    }

    public enum D3D12_RAYTRACING_TIER
    {
        D3D12_RAYTRACING_TIER_NOT_SUPPORTED = 0,
        D3D12_RAYTRACING_TIER_1_0 = 10,
        D3D12_RAYTRACING_TIER_1_1 = 11,
    }

    public partial struct D3D12_FEATURE_DATA_D3D12_OPTIONS5
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int SRVOnlyTiledResourceTier3;

        public D3D12_RENDER_PASS_TIER RenderPassesTier;

        public D3D12_RAYTRACING_TIER RaytracingTier;
    }

    public enum D3D12_VARIABLE_SHADING_RATE_TIER
    {
        D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED = 0,
        D3D12_VARIABLE_SHADING_RATE_TIER_1 = 1,
        D3D12_VARIABLE_SHADING_RATE_TIER_2 = 2,
    }

    public partial struct D3D12_FEATURE_DATA_D3D12_OPTIONS6
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int AdditionalShadingRatesSupported;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int PerPrimitiveShadingRateSupportedWithViewportIndexing;

        public D3D12_VARIABLE_SHADING_RATE_TIER VariableShadingRateTier;

        [NativeTypeName("UINT")]
        public uint ShadingRateImageTileSize;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int BackgroundProcessingSupported;
    }

    public enum D3D12_MESH_SHADER_TIER
    {
        D3D12_MESH_SHADER_TIER_NOT_SUPPORTED = 0,
        D3D12_MESH_SHADER_TIER_1 = 10,
    }

    public enum D3D12_SAMPLER_FEEDBACK_TIER
    {
        D3D12_SAMPLER_FEEDBACK_TIER_NOT_SUPPORTED = 0,
        D3D12_SAMPLER_FEEDBACK_TIER_0_9 = 90,
        D3D12_SAMPLER_FEEDBACK_TIER_1_0 = 100,
    }

    public partial struct D3D12_FEATURE_DATA_D3D12_OPTIONS7
    {
        public D3D12_MESH_SHADER_TIER MeshShaderTier;

        public D3D12_SAMPLER_FEEDBACK_TIER SamplerFeedbackTier;
    }

    public unsafe partial struct D3D12_FEATURE_DATA_QUERY_META_COMMAND
    {
        [NativeTypeName("GUID")]
        public Guid CommandId;

        [NativeTypeName("UINT")]
        public uint NodeMask;

        [NativeTypeName("const void *")]
        [Const]
        public void* pQueryInputData;

        [NativeTypeName("SIZE_T")]
        public UIntPtr QueryInputDataSizeInBytes;

        [NativeTypeName("void *")]
        public void* pQueryOutputData;

        [NativeTypeName("SIZE_T")]
        public UIntPtr QueryOutputDataSizeInBytes;
    }

    public partial struct D3D12_RESOURCE_ALLOCATION_INFO
    {
        [NativeTypeName("UINT64")]
        public ulong SizeInBytes;

        [NativeTypeName("UINT64")]
        public ulong Alignment;
    }

    public partial struct D3D12_RESOURCE_ALLOCATION_INFO1
    {
        [NativeTypeName("UINT64")]
        public ulong Offset;

        [NativeTypeName("UINT64")]
        public ulong Alignment;

        [NativeTypeName("UINT64")]
        public ulong SizeInBytes;
    }

    public enum D3D12_HEAP_TYPE
    {
        D3D12_HEAP_TYPE_DEFAULT = 1,
        D3D12_HEAP_TYPE_UPLOAD = 2,
        D3D12_HEAP_TYPE_READBACK = 3,
        D3D12_HEAP_TYPE_CUSTOM = 4,
    }

    public enum D3D12_CPU_PAGE_PROPERTY
    {
        D3D12_CPU_PAGE_PROPERTY_UNKNOWN = 0,
        D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE = 1,
        D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE = 2,
        D3D12_CPU_PAGE_PROPERTY_WRITE_BACK = 3,
    }

    public enum D3D12_MEMORY_POOL
    {
        D3D12_MEMORY_POOL_UNKNOWN = 0,
        D3D12_MEMORY_POOL_L0 = 1,
        D3D12_MEMORY_POOL_L1 = 2,
    }

    public partial struct D3D12_HEAP_PROPERTIES
    {
        public D3D12_HEAP_TYPE Type;

        public D3D12_CPU_PAGE_PROPERTY CPUPageProperty;

        public D3D12_MEMORY_POOL MemoryPoolPreference;

        [NativeTypeName("UINT")]
        public uint CreationNodeMask;

        [NativeTypeName("UINT")]
        public uint VisibleNodeMask;
    }

    public enum D3D12_HEAP_FLAGS
    {
        D3D12_HEAP_FLAG_NONE = 0,
        D3D12_HEAP_FLAG_SHARED = 0x1,
        D3D12_HEAP_FLAG_DENY_BUFFERS = 0x4,
        D3D12_HEAP_FLAG_ALLOW_DISPLAY = 0x8,
        D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER = 0x20,
        D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES = 0x40,
        D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES = 0x80,
        D3D12_HEAP_FLAG_HARDWARE_PROTECTED = 0x100,
        D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH = 0x200,
        D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS = 0x400,
        D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT = 0x800,
        D3D12_HEAP_FLAG_CREATE_NOT_ZEROED = 0x1000,
        D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES = 0,
        D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS = 0xc0,
        D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES = 0x44,
        D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES = 0x84,
    }

    public partial struct D3D12_HEAP_DESC
    {
        [NativeTypeName("UINT64")]
        public ulong SizeInBytes;

        public D3D12_HEAP_PROPERTIES Properties;

        [NativeTypeName("UINT64")]
        public ulong Alignment;

        public D3D12_HEAP_FLAGS Flags;
    }

    public enum D3D12_RESOURCE_DIMENSION
    {
        D3D12_RESOURCE_DIMENSION_UNKNOWN = 0,
        D3D12_RESOURCE_DIMENSION_BUFFER = 1,
        D3D12_RESOURCE_DIMENSION_TEXTURE1D = 2,
        D3D12_RESOURCE_DIMENSION_TEXTURE2D = 3,
        D3D12_RESOURCE_DIMENSION_TEXTURE3D = 4,
    }

    public enum D3D12_TEXTURE_LAYOUT
    {
        D3D12_TEXTURE_LAYOUT_UNKNOWN = 0,
        D3D12_TEXTURE_LAYOUT_ROW_MAJOR = 1,
        D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE = 2,
        D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE = 3,
    }

    public enum D3D12_RESOURCE_FLAGS
    {
        D3D12_RESOURCE_FLAG_NONE = 0,
        D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET = 0x1,
        D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL = 0x2,
        D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS = 0x4,
        D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE = 0x8,
        D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER = 0x10,
        D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS = 0x20,
        D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY = 0x40,
    }

    public partial struct D3D12_MIP_REGION
    {
        [NativeTypeName("UINT")]
        public uint Width;

        [NativeTypeName("UINT")]
        public uint Height;

        [NativeTypeName("UINT")]
        public uint Depth;
    }

    public partial struct D3D12_RESOURCE_DESC
    {
        public D3D12_RESOURCE_DIMENSION Dimension;

        [NativeTypeName("UINT64")]
        public ulong Alignment;

        [NativeTypeName("UINT64")]
        public ulong Width;

        [NativeTypeName("UINT")]
        public uint Height;

        [NativeTypeName("UINT16")]
        public ushort DepthOrArraySize;

        [NativeTypeName("UINT16")]
        public ushort MipLevels;

        public DXGI_FORMAT Format;

        public DXGI_SAMPLE_DESC SampleDesc;

        public D3D12_TEXTURE_LAYOUT Layout;

        public D3D12_RESOURCE_FLAGS Flags;
    }

    public partial struct D3D12_RESOURCE_DESC1
    {
        public D3D12_RESOURCE_DIMENSION Dimension;

        [NativeTypeName("UINT64")]
        public ulong Alignment;

        [NativeTypeName("UINT64")]
        public ulong Width;

        [NativeTypeName("UINT")]
        public uint Height;

        [NativeTypeName("UINT16")]
        public ushort DepthOrArraySize;

        [NativeTypeName("UINT16")]
        public ushort MipLevels;

        public DXGI_FORMAT Format;

        public DXGI_SAMPLE_DESC SampleDesc;

        public D3D12_TEXTURE_LAYOUT Layout;

        public D3D12_RESOURCE_FLAGS Flags;

        public D3D12_MIP_REGION SamplerFeedbackMipRegion;
    }

    public partial struct D3D12_DEPTH_STENCIL_VALUE
    {
        [NativeTypeName("FLOAT")]
        public float Depth;

        [NativeTypeName("UINT8")]
        public byte Stencil;
    }

    public unsafe partial struct D3D12_CLEAR_VALUE
    {
        public DXGI_FORMAT Format;

        [NativeTypeName("D3D12_CLEAR_VALUE::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:2582:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public unsafe partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            [NativeTypeName("FLOAT [4]")]
            public fixed float Color[4];

            [FieldOffset(0)]
            public D3D12_DEPTH_STENCIL_VALUE DepthStencil;
        }
    }

    public partial struct D3D12_RANGE
    {
        [NativeTypeName("SIZE_T")]
        public UIntPtr Begin;

        [NativeTypeName("SIZE_T")]
        public UIntPtr End;
    }

    public partial struct D3D12_RANGE_UINT64
    {
        [NativeTypeName("UINT64")]
        public ulong Begin;

        [NativeTypeName("UINT64")]
        public ulong End;
    }

    public partial struct D3D12_SUBRESOURCE_RANGE_UINT64
    {
        [NativeTypeName("UINT")]
        public uint Subresource;

        public D3D12_RANGE_UINT64 Range;
    }

    public partial struct D3D12_SUBRESOURCE_INFO
    {
        [NativeTypeName("UINT64")]
        public ulong Offset;

        [NativeTypeName("UINT")]
        public uint RowPitch;

        [NativeTypeName("UINT")]
        public uint DepthPitch;
    }

    public partial struct D3D12_TILED_RESOURCE_COORDINATE
    {
        [NativeTypeName("UINT")]
        public uint X;

        [NativeTypeName("UINT")]
        public uint Y;

        [NativeTypeName("UINT")]
        public uint Z;

        [NativeTypeName("UINT")]
        public uint Subresource;
    }

    public partial struct D3D12_TILE_REGION_SIZE
    {
        [NativeTypeName("UINT")]
        public uint NumTiles;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int UseBox;

        [NativeTypeName("UINT")]
        public uint Width;

        [NativeTypeName("UINT16")]
        public ushort Height;

        [NativeTypeName("UINT16")]
        public ushort Depth;
    }

    public enum D3D12_TILE_RANGE_FLAGS
    {
        D3D12_TILE_RANGE_FLAG_NONE = 0,
        D3D12_TILE_RANGE_FLAG_NULL = 1,
        D3D12_TILE_RANGE_FLAG_SKIP = 2,
        D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE = 4,
    }

    public partial struct D3D12_SUBRESOURCE_TILING
    {
        [NativeTypeName("UINT")]
        public uint WidthInTiles;

        [NativeTypeName("UINT16")]
        public ushort HeightInTiles;

        [NativeTypeName("UINT16")]
        public ushort DepthInTiles;

        [NativeTypeName("UINT")]
        public uint StartTileIndexInOverallResource;
    }

    public partial struct D3D12_TILE_SHAPE
    {
        [NativeTypeName("UINT")]
        public uint WidthInTexels;

        [NativeTypeName("UINT")]
        public uint HeightInTexels;

        [NativeTypeName("UINT")]
        public uint DepthInTexels;
    }

    public partial struct D3D12_PACKED_MIP_INFO
    {
        [NativeTypeName("UINT8")]
        public byte NumStandardMips;

        [NativeTypeName("UINT8")]
        public byte NumPackedMips;

        [NativeTypeName("UINT")]
        public uint NumTilesForPackedMips;

        [NativeTypeName("UINT")]
        public uint StartTileIndexInOverallResource;
    }

    public enum D3D12_TILE_MAPPING_FLAGS
    {
        D3D12_TILE_MAPPING_FLAG_NONE = 0,
        D3D12_TILE_MAPPING_FLAG_NO_HAZARD = 0x1,
    }

    public enum D3D12_TILE_COPY_FLAGS
    {
        D3D12_TILE_COPY_FLAG_NONE = 0,
        D3D12_TILE_COPY_FLAG_NO_HAZARD = 0x1,
        D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 0x2,
        D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 0x4,
    }

    public enum D3D12_RESOURCE_STATES
    {
        D3D12_RESOURCE_STATE_COMMON = 0,
        D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER = 0x1,
        D3D12_RESOURCE_STATE_INDEX_BUFFER = 0x2,
        D3D12_RESOURCE_STATE_RENDER_TARGET = 0x4,
        D3D12_RESOURCE_STATE_UNORDERED_ACCESS = 0x8,
        D3D12_RESOURCE_STATE_DEPTH_WRITE = 0x10,
        D3D12_RESOURCE_STATE_DEPTH_READ = 0x20,
        D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE = 0x40,
        D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE = 0x80,
        D3D12_RESOURCE_STATE_STREAM_OUT = 0x100,
        D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT = 0x200,
        D3D12_RESOURCE_STATE_COPY_DEST = 0x400,
        D3D12_RESOURCE_STATE_COPY_SOURCE = 0x800,
        D3D12_RESOURCE_STATE_RESOLVE_DEST = 0x1000,
        D3D12_RESOURCE_STATE_RESOLVE_SOURCE = 0x2000,
        D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE = 0x400000,
        D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE = 0x1000000,
        D3D12_RESOURCE_STATE_GENERIC_READ = (((((0x1 | 0x2) | 0x40) | 0x80) | 0x200) | 0x800),
        D3D12_RESOURCE_STATE_PRESENT = 0,
        D3D12_RESOURCE_STATE_PREDICATION = 0x200,
        D3D12_RESOURCE_STATE_VIDEO_DECODE_READ = 0x10000,
        D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE = 0x20000,
        D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ = 0x40000,
        D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE = 0x80000,
        D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ = 0x200000,
        D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE = 0x800000,
    }

    public enum D3D12_RESOURCE_BARRIER_TYPE
    {
        D3D12_RESOURCE_BARRIER_TYPE_TRANSITION = 0,
        D3D12_RESOURCE_BARRIER_TYPE_ALIASING = (D3D12_RESOURCE_BARRIER_TYPE_TRANSITION + 1),
        D3D12_RESOURCE_BARRIER_TYPE_UAV = (D3D12_RESOURCE_BARRIER_TYPE_ALIASING + 1),
    }

    public unsafe partial struct D3D12_RESOURCE_TRANSITION_BARRIER
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pResource;

        [NativeTypeName("UINT")]
        public uint Subresource;

        public D3D12_RESOURCE_STATES StateBefore;

        public D3D12_RESOURCE_STATES StateAfter;
    }

    public unsafe partial struct D3D12_RESOURCE_ALIASING_BARRIER
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pResourceBefore;

        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pResourceAfter;
    }

    public unsafe partial struct D3D12_RESOURCE_UAV_BARRIER
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pResource;
    }

    public enum D3D12_RESOURCE_BARRIER_FLAGS
    {
        D3D12_RESOURCE_BARRIER_FLAG_NONE = 0,
        D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY = 0x1,
        D3D12_RESOURCE_BARRIER_FLAG_END_ONLY = 0x2,
    }

    public partial struct D3D12_RESOURCE_BARRIER
    {
        public D3D12_RESOURCE_BARRIER_TYPE Type;

        public D3D12_RESOURCE_BARRIER_FLAGS Flags;

        [NativeTypeName("D3D12_RESOURCE_BARRIER::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:2754:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_RESOURCE_TRANSITION_BARRIER Transition;

            [FieldOffset(0)]
            public D3D12_RESOURCE_ALIASING_BARRIER Aliasing;

            [FieldOffset(0)]
            public D3D12_RESOURCE_UAV_BARRIER UAV;
        }
    }

    public partial struct D3D12_SUBRESOURCE_FOOTPRINT
    {
        public DXGI_FORMAT Format;

        [NativeTypeName("UINT")]
        public uint Width;

        [NativeTypeName("UINT")]
        public uint Height;

        [NativeTypeName("UINT")]
        public uint Depth;

        [NativeTypeName("UINT")]
        public uint RowPitch;
    }

    public partial struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT
    {
        [NativeTypeName("UINT64")]
        public ulong Offset;

        public D3D12_SUBRESOURCE_FOOTPRINT Footprint;
    }

    public enum D3D12_TEXTURE_COPY_TYPE
    {
        D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX = 0,
        D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT = 1,
    }

    public unsafe partial struct D3D12_TEXTURE_COPY_LOCATION
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pResource;

        public D3D12_TEXTURE_COPY_TYPE Type;

        [NativeTypeName("D3D12_TEXTURE_COPY_LOCATION::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:2788:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;

            [FieldOffset(0)]
            [NativeTypeName("UINT")]
            public uint SubresourceIndex;
        }
    }

    public enum D3D12_RESOLVE_MODE
    {
        D3D12_RESOLVE_MODE_DECOMPRESS = 0,
        D3D12_RESOLVE_MODE_MIN = 1,
        D3D12_RESOLVE_MODE_MAX = 2,
        D3D12_RESOLVE_MODE_AVERAGE = 3,
        D3D12_RESOLVE_MODE_ENCODE_SAMPLER_FEEDBACK = 4,
        D3D12_RESOLVE_MODE_DECODE_SAMPLER_FEEDBACK = 5,
    }

    public partial struct D3D12_SAMPLE_POSITION
    {
        [NativeTypeName("INT8")]
        public sbyte X;

        [NativeTypeName("INT8")]
        public sbyte Y;
    }

    public partial struct D3D12_VIEW_INSTANCE_LOCATION
    {
        [NativeTypeName("UINT")]
        public uint ViewportArrayIndex;

        [NativeTypeName("UINT")]
        public uint RenderTargetArrayIndex;
    }

    public enum D3D12_VIEW_INSTANCING_FLAGS
    {
        D3D12_VIEW_INSTANCING_FLAG_NONE = 0,
        D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING = 0x1,
    }

    public unsafe partial struct D3D12_VIEW_INSTANCING_DESC
    {
        [NativeTypeName("UINT")]
        public uint ViewInstanceCount;

        [NativeTypeName("const D3D12_VIEW_INSTANCE_LOCATION *")]
        [Const]
        public D3D12_VIEW_INSTANCE_LOCATION* pViewInstanceLocations;

        public D3D12_VIEW_INSTANCING_FLAGS Flags;
    }

    public enum D3D12_SHADER_COMPONENT_MAPPING
    {
        D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0 = 0,
        D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1 = 1,
        D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2 = 2,
        D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3 = 3,
        D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0 = 4,
        D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1 = 5,
    }

    public enum D3D12_BUFFER_SRV_FLAGS
    {
        D3D12_BUFFER_SRV_FLAG_NONE = 0,
        D3D12_BUFFER_SRV_FLAG_RAW = 0x1,
    }

    public partial struct D3D12_BUFFER_SRV
    {
        [NativeTypeName("UINT64")]
        public ulong FirstElement;

        [NativeTypeName("UINT")]
        public uint NumElements;

        [NativeTypeName("UINT")]
        public uint StructureByteStride;

        public D3D12_BUFFER_SRV_FLAGS Flags;
    }

    public partial struct D3D12_TEX1D_SRV
    {
        [NativeTypeName("UINT")]
        public uint MostDetailedMip;

        [NativeTypeName("UINT")]
        public uint MipLevels;

        [NativeTypeName("FLOAT")]
        public float ResourceMinLODClamp;
    }

    public partial struct D3D12_TEX1D_ARRAY_SRV
    {
        [NativeTypeName("UINT")]
        public uint MostDetailedMip;

        [NativeTypeName("UINT")]
        public uint MipLevels;

        [NativeTypeName("UINT")]
        public uint FirstArraySlice;

        [NativeTypeName("UINT")]
        public uint ArraySize;

        [NativeTypeName("FLOAT")]
        public float ResourceMinLODClamp;
    }

    public partial struct D3D12_TEX2D_SRV
    {
        [NativeTypeName("UINT")]
        public uint MostDetailedMip;

        [NativeTypeName("UINT")]
        public uint MipLevels;

        [NativeTypeName("UINT")]
        public uint PlaneSlice;

        [NativeTypeName("FLOAT")]
        public float ResourceMinLODClamp;
    }

    public partial struct D3D12_TEX2D_ARRAY_SRV
    {
        [NativeTypeName("UINT")]
        public uint MostDetailedMip;

        [NativeTypeName("UINT")]
        public uint MipLevels;

        [NativeTypeName("UINT")]
        public uint FirstArraySlice;

        [NativeTypeName("UINT")]
        public uint ArraySize;

        [NativeTypeName("UINT")]
        public uint PlaneSlice;

        [NativeTypeName("FLOAT")]
        public float ResourceMinLODClamp;
    }

    public partial struct D3D12_TEX3D_SRV
    {
        [NativeTypeName("UINT")]
        public uint MostDetailedMip;

        [NativeTypeName("UINT")]
        public uint MipLevels;

        [NativeTypeName("FLOAT")]
        public float ResourceMinLODClamp;
    }

    public partial struct D3D12_TEXCUBE_SRV
    {
        [NativeTypeName("UINT")]
        public uint MostDetailedMip;

        [NativeTypeName("UINT")]
        public uint MipLevels;

        [NativeTypeName("FLOAT")]
        public float ResourceMinLODClamp;
    }

    public partial struct D3D12_TEXCUBE_ARRAY_SRV
    {
        [NativeTypeName("UINT")]
        public uint MostDetailedMip;

        [NativeTypeName("UINT")]
        public uint MipLevels;

        [NativeTypeName("UINT")]
        public uint First2DArrayFace;

        [NativeTypeName("UINT")]
        public uint NumCubes;

        [NativeTypeName("FLOAT")]
        public float ResourceMinLODClamp;
    }

    public partial struct D3D12_TEX2DMS_SRV
    {
        [NativeTypeName("UINT")]
        public uint UnusedField_NothingToDefine;
    }

    public partial struct D3D12_TEX2DMS_ARRAY_SRV
    {
        [NativeTypeName("UINT")]
        public uint FirstArraySlice;

        [NativeTypeName("UINT")]
        public uint ArraySize;
    }

    public partial struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong Location;
    }

    public enum D3D12_SRV_DIMENSION
    {
        D3D12_SRV_DIMENSION_UNKNOWN = 0,
        D3D12_SRV_DIMENSION_BUFFER = 1,
        D3D12_SRV_DIMENSION_TEXTURE1D = 2,
        D3D12_SRV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D12_SRV_DIMENSION_TEXTURE2D = 4,
        D3D12_SRV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D12_SRV_DIMENSION_TEXTURE2DMS = 6,
        D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D12_SRV_DIMENSION_TEXTURE3D = 8,
        D3D12_SRV_DIMENSION_TEXTURECUBE = 9,
        D3D12_SRV_DIMENSION_TEXTURECUBEARRAY = 10,
        D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE = 11,
    }

    public partial struct D3D12_SHADER_RESOURCE_VIEW_DESC
    {
        public DXGI_FORMAT Format;

        public D3D12_SRV_DIMENSION ViewDimension;

        [NativeTypeName("UINT")]
        public uint Shader4ComponentMapping;

        [NativeTypeName("D3D12_SHADER_RESOURCE_VIEW_DESC::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:2965:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_BUFFER_SRV Buffer;

            [FieldOffset(0)]
            public D3D12_TEX1D_SRV Texture1D;

            [FieldOffset(0)]
            public D3D12_TEX1D_ARRAY_SRV Texture1DArray;

            [FieldOffset(0)]
            public D3D12_TEX2D_SRV Texture2D;

            [FieldOffset(0)]
            public D3D12_TEX2D_ARRAY_SRV Texture2DArray;

            [FieldOffset(0)]
            public D3D12_TEX2DMS_SRV Texture2DMS;

            [FieldOffset(0)]
            public D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;

            [FieldOffset(0)]
            public D3D12_TEX3D_SRV Texture3D;

            [FieldOffset(0)]
            public D3D12_TEXCUBE_SRV TextureCube;

            [FieldOffset(0)]
            public D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;

            [FieldOffset(0)]
            public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV RaytracingAccelerationStructure;
        }
    }

    public partial struct D3D12_CONSTANT_BUFFER_VIEW_DESC
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong BufferLocation;

        [NativeTypeName("UINT")]
        public uint SizeInBytes;
    }

    public enum D3D12_FILTER
    {
        D3D12_FILTER_MIN_MAG_MIP_POINT = 0,
        D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
        D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
        D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
        D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
        D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
        D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
        D3D12_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
        D3D12_FILTER_ANISOTROPIC = 0x55,
        D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
        D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
        D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
        D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
        D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
        D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
        D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
        D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
        D3D12_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
        D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
        D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
        D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
        D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
        D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
        D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
        D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
        D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
        D3D12_FILTER_MINIMUM_ANISOTROPIC = 0x155,
        D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
        D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
        D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
        D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
        D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
        D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
        D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
        D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
        D3D12_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5,
    }

    public enum D3D12_FILTER_TYPE
    {
        D3D12_FILTER_TYPE_POINT = 0,
        D3D12_FILTER_TYPE_LINEAR = 1,
    }

    public enum D3D12_FILTER_REDUCTION_TYPE
    {
        D3D12_FILTER_REDUCTION_TYPE_STANDARD = 0,
        D3D12_FILTER_REDUCTION_TYPE_COMPARISON = 1,
        D3D12_FILTER_REDUCTION_TYPE_MINIMUM = 2,
        D3D12_FILTER_REDUCTION_TYPE_MAXIMUM = 3,
    }

    public enum D3D12_TEXTURE_ADDRESS_MODE
    {
        D3D12_TEXTURE_ADDRESS_MODE_WRAP = 1,
        D3D12_TEXTURE_ADDRESS_MODE_MIRROR = 2,
        D3D12_TEXTURE_ADDRESS_MODE_CLAMP = 3,
        D3D12_TEXTURE_ADDRESS_MODE_BORDER = 4,
        D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE = 5,
    }

    public unsafe partial struct D3D12_SAMPLER_DESC
    {
        public D3D12_FILTER Filter;

        public D3D12_TEXTURE_ADDRESS_MODE AddressU;

        public D3D12_TEXTURE_ADDRESS_MODE AddressV;

        public D3D12_TEXTURE_ADDRESS_MODE AddressW;

        [NativeTypeName("FLOAT")]
        public float MipLODBias;

        [NativeTypeName("UINT")]
        public uint MaxAnisotropy;

        public D3D12_COMPARISON_FUNC ComparisonFunc;

        [NativeTypeName("FLOAT [4]")]
        public fixed float BorderColor[4];

        [NativeTypeName("FLOAT")]
        public float MinLOD;

        [NativeTypeName("FLOAT")]
        public float MaxLOD;
    }

    public enum D3D12_BUFFER_UAV_FLAGS
    {
        D3D12_BUFFER_UAV_FLAG_NONE = 0,
        D3D12_BUFFER_UAV_FLAG_RAW = 0x1,
    }

    public partial struct D3D12_BUFFER_UAV
    {
        [NativeTypeName("UINT64")]
        public ulong FirstElement;

        [NativeTypeName("UINT")]
        public uint NumElements;

        [NativeTypeName("UINT")]
        public uint StructureByteStride;

        [NativeTypeName("UINT64")]
        public ulong CounterOffsetInBytes;

        public D3D12_BUFFER_UAV_FLAGS Flags;
    }

    public partial struct D3D12_TEX1D_UAV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;
    }

    public partial struct D3D12_TEX1D_ARRAY_UAV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;

        [NativeTypeName("UINT")]
        public uint FirstArraySlice;

        [NativeTypeName("UINT")]
        public uint ArraySize;
    }

    public partial struct D3D12_TEX2D_UAV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;

        [NativeTypeName("UINT")]
        public uint PlaneSlice;
    }

    public partial struct D3D12_TEX2D_ARRAY_UAV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;

        [NativeTypeName("UINT")]
        public uint FirstArraySlice;

        [NativeTypeName("UINT")]
        public uint ArraySize;

        [NativeTypeName("UINT")]
        public uint PlaneSlice;
    }

    public partial struct D3D12_TEX3D_UAV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;

        [NativeTypeName("UINT")]
        public uint FirstWSlice;

        [NativeTypeName("UINT")]
        public uint WSize;
    }

    public enum D3D12_UAV_DIMENSION
    {
        D3D12_UAV_DIMENSION_UNKNOWN = 0,
        D3D12_UAV_DIMENSION_BUFFER = 1,
        D3D12_UAV_DIMENSION_TEXTURE1D = 2,
        D3D12_UAV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D12_UAV_DIMENSION_TEXTURE2D = 4,
        D3D12_UAV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D12_UAV_DIMENSION_TEXTURE3D = 8,
    }

    public partial struct D3D12_UNORDERED_ACCESS_VIEW_DESC
    {
        public DXGI_FORMAT Format;

        public D3D12_UAV_DIMENSION ViewDimension;

        [NativeTypeName("D3D12_UNORDERED_ACCESS_VIEW_DESC::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3180:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_BUFFER_UAV Buffer;

            [FieldOffset(0)]
            public D3D12_TEX1D_UAV Texture1D;

            [FieldOffset(0)]
            public D3D12_TEX1D_ARRAY_UAV Texture1DArray;

            [FieldOffset(0)]
            public D3D12_TEX2D_UAV Texture2D;

            [FieldOffset(0)]
            public D3D12_TEX2D_ARRAY_UAV Texture2DArray;

            [FieldOffset(0)]
            public D3D12_TEX3D_UAV Texture3D;
        }
    }

    public partial struct D3D12_BUFFER_RTV
    {
        [NativeTypeName("UINT64")]
        public ulong FirstElement;

        [NativeTypeName("UINT")]
        public uint NumElements;
    }

    public partial struct D3D12_TEX1D_RTV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;
    }

    public partial struct D3D12_TEX1D_ARRAY_RTV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;

        [NativeTypeName("UINT")]
        public uint FirstArraySlice;

        [NativeTypeName("UINT")]
        public uint ArraySize;
    }

    public partial struct D3D12_TEX2D_RTV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;

        [NativeTypeName("UINT")]
        public uint PlaneSlice;
    }

    public partial struct D3D12_TEX2DMS_RTV
    {
        [NativeTypeName("UINT")]
        public uint UnusedField_NothingToDefine;
    }

    public partial struct D3D12_TEX2D_ARRAY_RTV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;

        [NativeTypeName("UINT")]
        public uint FirstArraySlice;

        [NativeTypeName("UINT")]
        public uint ArraySize;

        [NativeTypeName("UINT")]
        public uint PlaneSlice;
    }

    public partial struct D3D12_TEX2DMS_ARRAY_RTV
    {
        [NativeTypeName("UINT")]
        public uint FirstArraySlice;

        [NativeTypeName("UINT")]
        public uint ArraySize;
    }

    public partial struct D3D12_TEX3D_RTV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;

        [NativeTypeName("UINT")]
        public uint FirstWSlice;

        [NativeTypeName("UINT")]
        public uint WSize;
    }

    public enum D3D12_RTV_DIMENSION
    {
        D3D12_RTV_DIMENSION_UNKNOWN = 0,
        D3D12_RTV_DIMENSION_BUFFER = 1,
        D3D12_RTV_DIMENSION_TEXTURE1D = 2,
        D3D12_RTV_DIMENSION_TEXTURE1DARRAY = 3,
        D3D12_RTV_DIMENSION_TEXTURE2D = 4,
        D3D12_RTV_DIMENSION_TEXTURE2DARRAY = 5,
        D3D12_RTV_DIMENSION_TEXTURE2DMS = 6,
        D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
        D3D12_RTV_DIMENSION_TEXTURE3D = 8,
    }

    public partial struct D3D12_RENDER_TARGET_VIEW_DESC
    {
        public DXGI_FORMAT Format;

        public D3D12_RTV_DIMENSION ViewDimension;

        [NativeTypeName("D3D12_RENDER_TARGET_VIEW_DESC::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3259:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_BUFFER_RTV Buffer;

            [FieldOffset(0)]
            public D3D12_TEX1D_RTV Texture1D;

            [FieldOffset(0)]
            public D3D12_TEX1D_ARRAY_RTV Texture1DArray;

            [FieldOffset(0)]
            public D3D12_TEX2D_RTV Texture2D;

            [FieldOffset(0)]
            public D3D12_TEX2D_ARRAY_RTV Texture2DArray;

            [FieldOffset(0)]
            public D3D12_TEX2DMS_RTV Texture2DMS;

            [FieldOffset(0)]
            public D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;

            [FieldOffset(0)]
            public D3D12_TEX3D_RTV Texture3D;
        }
    }

    public partial struct D3D12_TEX1D_DSV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;
    }

    public partial struct D3D12_TEX1D_ARRAY_DSV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;

        [NativeTypeName("UINT")]
        public uint FirstArraySlice;

        [NativeTypeName("UINT")]
        public uint ArraySize;
    }

    public partial struct D3D12_TEX2D_DSV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;
    }

    public partial struct D3D12_TEX2D_ARRAY_DSV
    {
        [NativeTypeName("UINT")]
        public uint MipSlice;

        [NativeTypeName("UINT")]
        public uint FirstArraySlice;

        [NativeTypeName("UINT")]
        public uint ArraySize;
    }

    public partial struct D3D12_TEX2DMS_DSV
    {
        [NativeTypeName("UINT")]
        public uint UnusedField_NothingToDefine;
    }

    public partial struct D3D12_TEX2DMS_ARRAY_DSV
    {
        [NativeTypeName("UINT")]
        public uint FirstArraySlice;

        [NativeTypeName("UINT")]
        public uint ArraySize;
    }

    public enum D3D12_DSV_FLAGS
    {
        D3D12_DSV_FLAG_NONE = 0,
        D3D12_DSV_FLAG_READ_ONLY_DEPTH = 0x1,
        D3D12_DSV_FLAG_READ_ONLY_STENCIL = 0x2,
    }

    public enum D3D12_DSV_DIMENSION
    {
        D3D12_DSV_DIMENSION_UNKNOWN = 0,
        D3D12_DSV_DIMENSION_TEXTURE1D = 1,
        D3D12_DSV_DIMENSION_TEXTURE1DARRAY = 2,
        D3D12_DSV_DIMENSION_TEXTURE2D = 3,
        D3D12_DSV_DIMENSION_TEXTURE2DARRAY = 4,
        D3D12_DSV_DIMENSION_TEXTURE2DMS = 5,
        D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY = 6,
    }

    public partial struct D3D12_DEPTH_STENCIL_VIEW_DESC
    {
        public DXGI_FORMAT Format;

        public D3D12_DSV_DIMENSION ViewDimension;

        public D3D12_DSV_FLAGS Flags;

        [NativeTypeName("D3D12_DEPTH_STENCIL_VIEW_DESC::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3333:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_TEX1D_DSV Texture1D;

            [FieldOffset(0)]
            public D3D12_TEX1D_ARRAY_DSV Texture1DArray;

            [FieldOffset(0)]
            public D3D12_TEX2D_DSV Texture2D;

            [FieldOffset(0)]
            public D3D12_TEX2D_ARRAY_DSV Texture2DArray;

            [FieldOffset(0)]
            public D3D12_TEX2DMS_DSV Texture2DMS;

            [FieldOffset(0)]
            public D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
        }
    }

    public enum D3D12_CLEAR_FLAGS
    {
        D3D12_CLEAR_FLAG_DEPTH = 0x1,
        D3D12_CLEAR_FLAG_STENCIL = 0x2,
    }

    public enum D3D12_FENCE_FLAGS
    {
        D3D12_FENCE_FLAG_NONE = 0,
        D3D12_FENCE_FLAG_SHARED = 0x1,
        D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER = 0x2,
        D3D12_FENCE_FLAG_NON_MONITORED = 0x4,
    }

    public enum D3D12_DESCRIPTOR_HEAP_TYPE
    {
        D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV = 0,
        D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER = (D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV + 1),
        D3D12_DESCRIPTOR_HEAP_TYPE_RTV = (D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER + 1),
        D3D12_DESCRIPTOR_HEAP_TYPE_DSV = (D3D12_DESCRIPTOR_HEAP_TYPE_RTV + 1),
        D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES = (D3D12_DESCRIPTOR_HEAP_TYPE_DSV + 1),
    }

    public enum D3D12_DESCRIPTOR_HEAP_FLAGS
    {
        D3D12_DESCRIPTOR_HEAP_FLAG_NONE = 0,
        D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE = 0x1,
    }

    public partial struct D3D12_DESCRIPTOR_HEAP_DESC
    {
        public D3D12_DESCRIPTOR_HEAP_TYPE Type;

        [NativeTypeName("UINT")]
        public uint NumDescriptors;

        public D3D12_DESCRIPTOR_HEAP_FLAGS Flags;

        [NativeTypeName("UINT")]
        public uint NodeMask;
    }

    public enum D3D12_DESCRIPTOR_RANGE_TYPE
    {
        D3D12_DESCRIPTOR_RANGE_TYPE_SRV = 0,
        D3D12_DESCRIPTOR_RANGE_TYPE_UAV = (D3D12_DESCRIPTOR_RANGE_TYPE_SRV + 1),
        D3D12_DESCRIPTOR_RANGE_TYPE_CBV = (D3D12_DESCRIPTOR_RANGE_TYPE_UAV + 1),
        D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER = (D3D12_DESCRIPTOR_RANGE_TYPE_CBV + 1),
    }

    public partial struct D3D12_DESCRIPTOR_RANGE
    {
        public D3D12_DESCRIPTOR_RANGE_TYPE RangeType;

        [NativeTypeName("UINT")]
        public uint NumDescriptors;

        [NativeTypeName("UINT")]
        public uint BaseShaderRegister;

        [NativeTypeName("UINT")]
        public uint RegisterSpace;

        [NativeTypeName("UINT")]
        public uint OffsetInDescriptorsFromTableStart;
    }

    public unsafe partial struct D3D12_ROOT_DESCRIPTOR_TABLE
    {
        [NativeTypeName("UINT")]
        public uint NumDescriptorRanges;

        [NativeTypeName("const D3D12_DESCRIPTOR_RANGE *")]
        [Const]
        public D3D12_DESCRIPTOR_RANGE* pDescriptorRanges;
    }

    public partial struct D3D12_ROOT_CONSTANTS
    {
        [NativeTypeName("UINT")]
        public uint ShaderRegister;

        [NativeTypeName("UINT")]
        public uint RegisterSpace;

        [NativeTypeName("UINT")]
        public uint Num32BitValues;
    }

    public partial struct D3D12_ROOT_DESCRIPTOR
    {
        [NativeTypeName("UINT")]
        public uint ShaderRegister;

        [NativeTypeName("UINT")]
        public uint RegisterSpace;
    }

    public enum D3D12_SHADER_VISIBILITY
    {
        D3D12_SHADER_VISIBILITY_ALL = 0,
        D3D12_SHADER_VISIBILITY_VERTEX = 1,
        D3D12_SHADER_VISIBILITY_HULL = 2,
        D3D12_SHADER_VISIBILITY_DOMAIN = 3,
        D3D12_SHADER_VISIBILITY_GEOMETRY = 4,
        D3D12_SHADER_VISIBILITY_PIXEL = 5,
        D3D12_SHADER_VISIBILITY_AMPLIFICATION = 6,
        D3D12_SHADER_VISIBILITY_MESH = 7,
    }

    public enum D3D12_ROOT_PARAMETER_TYPE
    {
        D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE = 0,
        D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS = (D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE + 1),
        D3D12_ROOT_PARAMETER_TYPE_CBV = (D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS + 1),
        D3D12_ROOT_PARAMETER_TYPE_SRV = (D3D12_ROOT_PARAMETER_TYPE_CBV + 1),
        D3D12_ROOT_PARAMETER_TYPE_UAV = (D3D12_ROOT_PARAMETER_TYPE_SRV + 1),
    }

    public partial struct D3D12_ROOT_PARAMETER
    {
        public D3D12_ROOT_PARAMETER_TYPE ParameterType;

        [NativeTypeName("D3D12_ROOT_PARAMETER::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3451:5)")]
        public _Anonymous_e__Union Anonymous;

        public D3D12_SHADER_VISIBILITY ShaderVisibility;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_ROOT_DESCRIPTOR_TABLE DescriptorTable;

            [FieldOffset(0)]
            public D3D12_ROOT_CONSTANTS Constants;

            [FieldOffset(0)]
            public D3D12_ROOT_DESCRIPTOR Descriptor;
        }
    }

    public enum D3D12_ROOT_SIGNATURE_FLAGS
    {
        D3D12_ROOT_SIGNATURE_FLAG_NONE = 0,
        D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT = 0x1,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS = 0x2,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS = 0x4,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS = 0x8,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS = 0x10,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS = 0x20,
        D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT = 0x40,
        D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE = 0x80,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_AMPLIFICATION_SHADER_ROOT_ACCESS = 0x100,
        D3D12_ROOT_SIGNATURE_FLAG_DENY_MESH_SHADER_ROOT_ACCESS = 0x200,
    }

    public enum D3D12_STATIC_BORDER_COLOR
    {
        D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK = 0,
        D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK = (D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK + 1),
        D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE = (D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK + 1),
    }

    public partial struct D3D12_STATIC_SAMPLER_DESC
    {
        public D3D12_FILTER Filter;

        public D3D12_TEXTURE_ADDRESS_MODE AddressU;

        public D3D12_TEXTURE_ADDRESS_MODE AddressV;

        public D3D12_TEXTURE_ADDRESS_MODE AddressW;

        [NativeTypeName("FLOAT")]
        public float MipLODBias;

        [NativeTypeName("UINT")]
        public uint MaxAnisotropy;

        public D3D12_COMPARISON_FUNC ComparisonFunc;

        public D3D12_STATIC_BORDER_COLOR BorderColor;

        [NativeTypeName("FLOAT")]
        public float MinLOD;

        [NativeTypeName("FLOAT")]
        public float MaxLOD;

        [NativeTypeName("UINT")]
        public uint ShaderRegister;

        [NativeTypeName("UINT")]
        public uint RegisterSpace;

        public D3D12_SHADER_VISIBILITY ShaderVisibility;
    }

    public unsafe partial struct D3D12_ROOT_SIGNATURE_DESC
    {
        [NativeTypeName("UINT")]
        public uint NumParameters;

        [NativeTypeName("const D3D12_ROOT_PARAMETER *")]
        [Const]
        public D3D12_ROOT_PARAMETER* pParameters;

        [NativeTypeName("UINT")]
        public uint NumStaticSamplers;

        [NativeTypeName("const D3D12_STATIC_SAMPLER_DESC *")]
        [Const]
        public D3D12_STATIC_SAMPLER_DESC* pStaticSamplers;

        public D3D12_ROOT_SIGNATURE_FLAGS Flags;
    }

    public enum D3D12_DESCRIPTOR_RANGE_FLAGS
    {
        D3D12_DESCRIPTOR_RANGE_FLAG_NONE = 0,
        D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE = 0x1,
        D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE = 0x2,
        D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 0x4,
        D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC = 0x8,
        D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS = 0x10000,
    }

    public partial struct D3D12_DESCRIPTOR_RANGE1
    {
        public D3D12_DESCRIPTOR_RANGE_TYPE RangeType;

        [NativeTypeName("UINT")]
        public uint NumDescriptors;

        [NativeTypeName("UINT")]
        public uint BaseShaderRegister;

        [NativeTypeName("UINT")]
        public uint RegisterSpace;

        public D3D12_DESCRIPTOR_RANGE_FLAGS Flags;

        [NativeTypeName("UINT")]
        public uint OffsetInDescriptorsFromTableStart;
    }

    public unsafe partial struct D3D12_ROOT_DESCRIPTOR_TABLE1
    {
        [NativeTypeName("UINT")]
        public uint NumDescriptorRanges;

        [NativeTypeName("const D3D12_DESCRIPTOR_RANGE1 *")]
        [Const]
        public D3D12_DESCRIPTOR_RANGE1* pDescriptorRanges;
    }

    public enum D3D12_ROOT_DESCRIPTOR_FLAGS
    {
        D3D12_ROOT_DESCRIPTOR_FLAG_NONE = 0,
        D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE = 0x2,
        D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE = 0x4,
        D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC = 0x8,
    }

    public partial struct D3D12_ROOT_DESCRIPTOR1
    {
        [NativeTypeName("UINT")]
        public uint ShaderRegister;

        [NativeTypeName("UINT")]
        public uint RegisterSpace;

        public D3D12_ROOT_DESCRIPTOR_FLAGS Flags;
    }

    public partial struct D3D12_ROOT_PARAMETER1
    {
        public D3D12_ROOT_PARAMETER_TYPE ParameterType;

        [NativeTypeName("D3D12_ROOT_PARAMETER1::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3559:5)")]
        public _Anonymous_e__Union Anonymous;

        public D3D12_SHADER_VISIBILITY ShaderVisibility;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_ROOT_DESCRIPTOR_TABLE1 DescriptorTable;

            [FieldOffset(0)]
            public D3D12_ROOT_CONSTANTS Constants;

            [FieldOffset(0)]
            public D3D12_ROOT_DESCRIPTOR1 Descriptor;
        }
    }

    public unsafe partial struct D3D12_ROOT_SIGNATURE_DESC1
    {
        [NativeTypeName("UINT")]
        public uint NumParameters;

        [NativeTypeName("const D3D12_ROOT_PARAMETER1 *")]
        [Const]
        public D3D12_ROOT_PARAMETER1* pParameters;

        [NativeTypeName("UINT")]
        public uint NumStaticSamplers;

        [NativeTypeName("const D3D12_STATIC_SAMPLER_DESC *")]
        [Const]
        public D3D12_STATIC_SAMPLER_DESC* pStaticSamplers;

        public D3D12_ROOT_SIGNATURE_FLAGS Flags;
    }

    public partial struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC
    {
        public D3D_ROOT_SIGNATURE_VERSION Version;

        [NativeTypeName("D3D12_VERSIONED_ROOT_SIGNATURE_DESC::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3580:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_ROOT_SIGNATURE_DESC Desc_1_0;

            [FieldOffset(0)]
            public D3D12_ROOT_SIGNATURE_DESC1 Desc_1_1;
        }
    }

    [Guid("34AB647B-3CC8-46AC-841B-C0965645C046")]
    [NativeTypeName("struct ID3D12RootSignatureDeserializer : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12RootSignatureDeserializer
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12RootSignatureDeserializer* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12RootSignatureDeserializer* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12RootSignatureDeserializer* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("const D3D12_ROOT_SIGNATURE_DESC *")]
        [return: Const]
        public delegate D3D12_ROOT_SIGNATURE_DESC* _GetRootSignatureDesc(ID3D12RootSignatureDeserializer* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12RootSignatureDeserializer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12RootSignatureDeserializer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12RootSignatureDeserializer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("const D3D12_ROOT_SIGNATURE_DESC *")]
        [return: Const]
        public D3D12_ROOT_SIGNATURE_DESC* GetRootSignatureDesc()
        {
            fixed (ID3D12RootSignatureDeserializer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetRootSignatureDesc>((IntPtr)(lpVtbl[3]))(pThis);
            }
        }
    }

    [Guid("7F91CE67-090C-4BB7-B78E-ED8FF2E31DA0")]
    [NativeTypeName("struct ID3D12VersionedRootSignatureDeserializer : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12VersionedRootSignatureDeserializer
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VersionedRootSignatureDeserializer* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VersionedRootSignatureDeserializer* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VersionedRootSignatureDeserializer* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetRootSignatureDescAtVersion(ID3D12VersionedRootSignatureDeserializer* pThis, D3D_ROOT_SIGNATURE_VERSION convertToVersion, [NativeTypeName("const D3D12_VERSIONED_ROOT_SIGNATURE_DESC **")] [Const] [Out] D3D12_VERSIONED_ROOT_SIGNATURE_DESC** ppDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("const D3D12_VERSIONED_ROOT_SIGNATURE_DESC *")]
        [return: Const]
        public delegate D3D12_VERSIONED_ROOT_SIGNATURE_DESC* _GetUnconvertedRootSignatureDesc(ID3D12VersionedRootSignatureDeserializer* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VersionedRootSignatureDeserializer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VersionedRootSignatureDeserializer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VersionedRootSignatureDeserializer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetRootSignatureDescAtVersion(D3D_ROOT_SIGNATURE_VERSION convertToVersion, [NativeTypeName("const D3D12_VERSIONED_ROOT_SIGNATURE_DESC **")] [Const] [Out] D3D12_VERSIONED_ROOT_SIGNATURE_DESC** ppDesc)
        {
            fixed (ID3D12VersionedRootSignatureDeserializer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetRootSignatureDescAtVersion>((IntPtr)(lpVtbl[3]))(pThis, convertToVersion, ppDesc);
            }
        }

        [return: NativeTypeName("const D3D12_VERSIONED_ROOT_SIGNATURE_DESC *")]
        [return: Const]
        public D3D12_VERSIONED_ROOT_SIGNATURE_DESC* GetUnconvertedRootSignatureDesc()
        {
            fixed (ID3D12VersionedRootSignatureDeserializer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetUnconvertedRootSignatureDesc>((IntPtr)(lpVtbl[4]))(pThis);
            }
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Winapi)]
    [return: NativeTypeName("HRESULT")]
    public unsafe delegate int PFN_D3D12_SERIALIZE_ROOT_SIGNATURE([NativeTypeName("const D3D12_ROOT_SIGNATURE_DESC *")] [Const] [In] D3D12_ROOT_SIGNATURE_DESC* pRootSignature, [In] D3D_ROOT_SIGNATURE_VERSION Version, [NativeTypeName("ID3DBlob **")] [Out] ID3DBlob** ppBlob, [NativeTypeName("ID3DBlob **")] [Out][Optional] ID3DBlob** ppErrorBlob);

    [UnmanagedFunctionPointer(CallingConvention.Winapi)]
    [return: NativeTypeName("HRESULT")]
    public unsafe delegate int PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER([NativeTypeName("LPCVOID")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pSrcData, [NativeTypeName("SIZE_T")] [In] UIntPtr SrcDataSizeInBytes, [NativeTypeName("const IID &")] [Const] [In] Guid* pRootSignatureDeserializerInterface, [NativeTypeName("void **")] [Out] void** ppRootSignatureDeserializer);

    [UnmanagedFunctionPointer(CallingConvention.Winapi)]
    [return: NativeTypeName("HRESULT")]
    public unsafe delegate int PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE([NativeTypeName("const D3D12_VERSIONED_ROOT_SIGNATURE_DESC *")] [Const] [In] D3D12_VERSIONED_ROOT_SIGNATURE_DESC* pRootSignature, [NativeTypeName("ID3DBlob **")] [Out] ID3DBlob** ppBlob, [NativeTypeName("ID3DBlob **")] [Out][Optional] ID3DBlob** ppErrorBlob);

    [UnmanagedFunctionPointer(CallingConvention.Winapi)]
    [return: NativeTypeName("HRESULT")]
    public unsafe delegate int PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER([NativeTypeName("LPCVOID")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pSrcData, [NativeTypeName("SIZE_T")] [In] UIntPtr SrcDataSizeInBytes, [NativeTypeName("const IID &")] [Const] [In] Guid* pRootSignatureDeserializerInterface, [NativeTypeName("void **")] [Out] void** ppRootSignatureDeserializer);

    public partial struct D3D12_CPU_DESCRIPTOR_HANDLE
    {
        [NativeTypeName("SIZE_T")]
        public UIntPtr ptr;
    }

    public partial struct D3D12_GPU_DESCRIPTOR_HANDLE
    {
        [NativeTypeName("UINT64")]
        public ulong ptr;
    }

    public unsafe partial struct D3D12_DISCARD_REGION
    {
        [NativeTypeName("UINT")]
        public uint NumRects;

        [NativeTypeName("const D3D12_RECT *")]
        [Const]
        public RECT* pRects;

        [NativeTypeName("UINT")]
        public uint FirstSubresource;

        [NativeTypeName("UINT")]
        public uint NumSubresources;
    }

    public enum D3D12_QUERY_HEAP_TYPE
    {
        D3D12_QUERY_HEAP_TYPE_OCCLUSION = 0,
        D3D12_QUERY_HEAP_TYPE_TIMESTAMP = 1,
        D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS = 2,
        D3D12_QUERY_HEAP_TYPE_SO_STATISTICS = 3,
        D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS = 4,
        D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP = 5,
    }

    public partial struct D3D12_QUERY_HEAP_DESC
    {
        public D3D12_QUERY_HEAP_TYPE Type;

        [NativeTypeName("UINT")]
        public uint Count;

        [NativeTypeName("UINT")]
        public uint NodeMask;
    }

    public enum D3D12_QUERY_TYPE
    {
        D3D12_QUERY_TYPE_OCCLUSION = 0,
        D3D12_QUERY_TYPE_BINARY_OCCLUSION = 1,
        D3D12_QUERY_TYPE_TIMESTAMP = 2,
        D3D12_QUERY_TYPE_PIPELINE_STATISTICS = 3,
        D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0 = 4,
        D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1 = 5,
        D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2 = 6,
        D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3 = 7,
        D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS = 8,
    }

    public enum D3D12_PREDICATION_OP
    {
        D3D12_PREDICATION_OP_EQUAL_ZERO = 0,
        D3D12_PREDICATION_OP_NOT_EQUAL_ZERO = 1,
    }

    public partial struct D3D12_QUERY_DATA_PIPELINE_STATISTICS
    {
        [NativeTypeName("UINT64")]
        public ulong IAVertices;

        [NativeTypeName("UINT64")]
        public ulong IAPrimitives;

        [NativeTypeName("UINT64")]
        public ulong VSInvocations;

        [NativeTypeName("UINT64")]
        public ulong GSInvocations;

        [NativeTypeName("UINT64")]
        public ulong GSPrimitives;

        [NativeTypeName("UINT64")]
        public ulong CInvocations;

        [NativeTypeName("UINT64")]
        public ulong CPrimitives;

        [NativeTypeName("UINT64")]
        public ulong PSInvocations;

        [NativeTypeName("UINT64")]
        public ulong HSInvocations;

        [NativeTypeName("UINT64")]
        public ulong DSInvocations;

        [NativeTypeName("UINT64")]
        public ulong CSInvocations;
    }

    public partial struct D3D12_QUERY_DATA_SO_STATISTICS
    {
        [NativeTypeName("UINT64")]
        public ulong NumPrimitivesWritten;

        [NativeTypeName("UINT64")]
        public ulong PrimitivesStorageNeeded;
    }

    public partial struct D3D12_STREAM_OUTPUT_BUFFER_VIEW
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong BufferLocation;

        [NativeTypeName("UINT64")]
        public ulong SizeInBytes;

        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong BufferFilledSizeLocation;
    }

    public partial struct D3D12_DRAW_ARGUMENTS
    {
        [NativeTypeName("UINT")]
        public uint VertexCountPerInstance;

        [NativeTypeName("UINT")]
        public uint InstanceCount;

        [NativeTypeName("UINT")]
        public uint StartVertexLocation;

        [NativeTypeName("UINT")]
        public uint StartInstanceLocation;
    }

    public partial struct D3D12_DRAW_INDEXED_ARGUMENTS
    {
        [NativeTypeName("UINT")]
        public uint IndexCountPerInstance;

        [NativeTypeName("UINT")]
        public uint InstanceCount;

        [NativeTypeName("UINT")]
        public uint StartIndexLocation;

        [NativeTypeName("INT")]
        public int BaseVertexLocation;

        [NativeTypeName("UINT")]
        public uint StartInstanceLocation;
    }

    public partial struct D3D12_DISPATCH_ARGUMENTS
    {
        [NativeTypeName("UINT")]
        public uint ThreadGroupCountX;

        [NativeTypeName("UINT")]
        public uint ThreadGroupCountY;

        [NativeTypeName("UINT")]
        public uint ThreadGroupCountZ;
    }

    public partial struct D3D12_VERTEX_BUFFER_VIEW
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong BufferLocation;

        [NativeTypeName("UINT")]
        public uint SizeInBytes;

        [NativeTypeName("UINT")]
        public uint StrideInBytes;
    }

    public partial struct D3D12_INDEX_BUFFER_VIEW
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong BufferLocation;

        [NativeTypeName("UINT")]
        public uint SizeInBytes;

        public DXGI_FORMAT Format;
    }

    public enum D3D12_INDIRECT_ARGUMENT_TYPE
    {
        D3D12_INDIRECT_ARGUMENT_TYPE_DRAW = 0,
        D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH = (D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT = (D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW = (D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS = (D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW + 1),
        D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_MESH = (D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH_RAYS + 1),
    }

    public partial struct D3D12_INDIRECT_ARGUMENT_DESC
    {
        public D3D12_INDIRECT_ARGUMENT_TYPE Type;

        [NativeTypeName("D3D12_INDIRECT_ARGUMENT_DESC::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3951:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            [NativeTypeName("struct (anonymous struct at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3953:9)")]
            public _VertexBuffer_e__Struct VertexBuffer;

            [FieldOffset(0)]
            [NativeTypeName("struct (anonymous struct at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3957:9)")]
            public _Constant_e__Struct Constant;

            [FieldOffset(0)]
            [NativeTypeName("struct (anonymous struct at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3963:9)")]
            public _ConstantBufferView_e__Struct ConstantBufferView;

            [FieldOffset(0)]
            [NativeTypeName("struct (anonymous struct at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3967:9)")]
            public _ShaderResourceView_e__Struct ShaderResourceView;

            [FieldOffset(0)]
            [NativeTypeName("struct (anonymous struct at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:3971:9)")]
            public _UnorderedAccessView_e__Struct UnorderedAccessView;

            public partial struct _VertexBuffer_e__Struct
            {
                [NativeTypeName("UINT")]
                public uint Slot;
            }

            public partial struct _Constant_e__Struct
            {
                [NativeTypeName("UINT")]
                public uint RootParameterIndex;

                [NativeTypeName("UINT")]
                public uint DestOffsetIn32BitValues;

                [NativeTypeName("UINT")]
                public uint Num32BitValuesToSet;
            }

            public partial struct _ConstantBufferView_e__Struct
            {
                [NativeTypeName("UINT")]
                public uint RootParameterIndex;
            }

            public partial struct _ShaderResourceView_e__Struct
            {
                [NativeTypeName("UINT")]
                public uint RootParameterIndex;
            }

            public partial struct _UnorderedAccessView_e__Struct
            {
                [NativeTypeName("UINT")]
                public uint RootParameterIndex;
            }
        }
    }

    public unsafe partial struct D3D12_COMMAND_SIGNATURE_DESC
    {
        [NativeTypeName("UINT")]
        public uint ByteStride;

        [NativeTypeName("UINT")]
        public uint NumArgumentDescs;

        [NativeTypeName("const D3D12_INDIRECT_ARGUMENT_DESC *")]
        [Const]
        public D3D12_INDIRECT_ARGUMENT_DESC* pArgumentDescs;

        [NativeTypeName("UINT")]
        public uint NodeMask;
    }

    [Guid("63EE58FB-1268-4835-86DA-F008CE62F0D6")]
    [NativeTypeName("struct ID3D12Pageable : ID3D12DeviceChild")]
    [NativeInheritance("ID3D12DeviceChild")]
    public unsafe partial struct ID3D12Pageable
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Pageable* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Pageable* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Pageable* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Pageable* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Pageable* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Pageable* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Pageable* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12Pageable* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Pageable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Pageable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Pageable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Pageable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Pageable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Pageable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Pageable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12Pageable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }
    }

    [Guid("6B3B2502-6E51-45B3-90EE-9884265E8DF3")]
    [NativeTypeName("struct ID3D12Heap : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12Heap
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Heap* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Heap* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Heap* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Heap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Heap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Heap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Heap* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12Heap* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_HEAP_DESC* _GetDesc(ID3D12Heap* pThis, D3D12_HEAP_DESC* _result);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Heap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Heap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Heap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Heap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Heap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Heap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Heap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12Heap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public D3D12_HEAP_DESC GetDesc()
        {
            fixed (ID3D12Heap* pThis = &this)
            {
                D3D12_HEAP_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[8]))(pThis, &result);
            }
        }
    }

    [Guid("696442BE-A72E-4059-BC79-5B5C98040FAD")]
    [NativeTypeName("struct ID3D12Resource : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12Resource
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Resource* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Resource* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Resource* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Resource* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Resource* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Resource* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Resource* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12Resource* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Map(ID3D12Resource* pThis, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pReadRange, [NativeTypeName("void **")] [Out][Optional] void** ppData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _Unmap(ID3D12Resource* pThis, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pWrittenRange);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_DESC* _GetDesc(ID3D12Resource* pThis, D3D12_RESOURCE_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public delegate ulong _GetGPUVirtualAddress(ID3D12Resource* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _WriteToSubresource(ID3D12Resource* pThis, [NativeTypeName("UINT")] uint DstSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pDstBox, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] uint SrcRowPitch, [NativeTypeName("UINT")] uint SrcDepthPitch);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _ReadFromSubresource(ID3D12Resource* pThis, [NativeTypeName("void *")] [Out] void* pDstData, [NativeTypeName("UINT")] uint DstRowPitch, [NativeTypeName("UINT")] uint DstDepthPitch, [NativeTypeName("UINT")] uint SrcSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetHeapProperties(ID3D12Resource* pThis, [NativeTypeName("D3D12_HEAP_PROPERTIES *")] [Out][Optional] D3D12_HEAP_PROPERTIES* pHeapProperties, [NativeTypeName("D3D12_HEAP_FLAGS *")] [Out][Optional] D3D12_HEAP_FLAGS* pHeapFlags);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Map([NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pReadRange, [NativeTypeName("void **")] [Out][Optional] void** ppData)
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Map>((IntPtr)(lpVtbl[8]))(pThis, Subresource, pReadRange, ppData);
            }
        }

        public void Unmap([NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pWrittenRange)
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_Unmap>((IntPtr)(lpVtbl[9]))(pThis, Subresource, pWrittenRange);
            }
        }

        public D3D12_RESOURCE_DESC GetDesc()
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                D3D12_RESOURCE_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[10]))(pThis, &result);
            }
        }

        [return: NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong GetGPUVirtualAddress()
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetGPUVirtualAddress>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int WriteToSubresource([NativeTypeName("UINT")] uint DstSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pDstBox, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] uint SrcRowPitch, [NativeTypeName("UINT")] uint SrcDepthPitch)
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_WriteToSubresource>((IntPtr)(lpVtbl[12]))(pThis, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int ReadFromSubresource([NativeTypeName("void *")] [Out] void* pDstData, [NativeTypeName("UINT")] uint DstRowPitch, [NativeTypeName("UINT")] uint DstDepthPitch, [NativeTypeName("UINT")] uint SrcSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox)
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_ReadFromSubresource>((IntPtr)(lpVtbl[13]))(pThis, pDstData, DstRowPitch, DstDepthPitch, SrcSubresource, pSrcBox);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetHeapProperties([NativeTypeName("D3D12_HEAP_PROPERTIES *")] [Out][Optional] D3D12_HEAP_PROPERTIES* pHeapProperties, [NativeTypeName("D3D12_HEAP_FLAGS *")] [Out][Optional] D3D12_HEAP_FLAGS* pHeapFlags)
        {
            fixed (ID3D12Resource* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetHeapProperties>((IntPtr)(lpVtbl[14]))(pThis, pHeapProperties, pHeapFlags);
            }
        }
    }

    [Guid("6102DEE4-AF59-4B09-B999-B44D73F09B24")]
    [NativeTypeName("struct ID3D12CommandAllocator : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12CommandAllocator
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12CommandAllocator* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12CommandAllocator* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12CommandAllocator* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12CommandAllocator* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12CommandAllocator* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12CommandAllocator* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12CommandAllocator* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12CommandAllocator* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12CommandAllocator* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12CommandAllocator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12CommandAllocator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12CommandAllocator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12CommandAllocator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12CommandAllocator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12CommandAllocator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12CommandAllocator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12CommandAllocator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset()
        {
            fixed (ID3D12CommandAllocator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }
    }

    [Guid("0A753DCF-C4D8-4B91-ADF6-BE5A60D95A76")]
    [NativeTypeName("struct ID3D12Fence : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12Fence
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Fence* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Fence* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Fence* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Fence* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Fence* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Fence* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Fence* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12Fence* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetCompletedValue(ID3D12Fence* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetEventOnCompletion(ID3D12Fence* pThis, [NativeTypeName("UINT64")] ulong Value, [NativeTypeName("HANDLE")] IntPtr hEvent);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Signal(ID3D12Fence* pThis, [NativeTypeName("UINT64")] ulong Value);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Fence* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Fence* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Fence* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Fence* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Fence* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Fence* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Fence* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12Fence* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetCompletedValue()
        {
            fixed (ID3D12Fence* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetCompletedValue>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetEventOnCompletion([NativeTypeName("UINT64")] ulong Value, [NativeTypeName("HANDLE")] IntPtr hEvent)
        {
            fixed (ID3D12Fence* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetEventOnCompletion>((IntPtr)(lpVtbl[9]))(pThis, Value, hEvent);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Signal([NativeTypeName("UINT64")] ulong Value)
        {
            fixed (ID3D12Fence* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Signal>((IntPtr)(lpVtbl[10]))(pThis, Value);
            }
        }
    }

    [Guid("433685FE-E22B-4CA0-A8DB-B5B4F4DD0E4A")]
    [NativeTypeName("struct ID3D12Fence1 : ID3D12Fence")]
    [NativeInheritance("ID3D12Fence")]
    public unsafe partial struct ID3D12Fence1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Fence1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Fence1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Fence1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Fence1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Fence1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Fence1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Fence1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12Fence1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetCompletedValue(ID3D12Fence1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetEventOnCompletion(ID3D12Fence1* pThis, [NativeTypeName("UINT64")] ulong Value, [NativeTypeName("HANDLE")] IntPtr hEvent);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Signal(ID3D12Fence1* pThis, [NativeTypeName("UINT64")] ulong Value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_FENCE_FLAGS _GetCreationFlags(ID3D12Fence1* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetCompletedValue()
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetCompletedValue>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetEventOnCompletion([NativeTypeName("UINT64")] ulong Value, [NativeTypeName("HANDLE")] IntPtr hEvent)
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetEventOnCompletion>((IntPtr)(lpVtbl[9]))(pThis, Value, hEvent);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Signal([NativeTypeName("UINT64")] ulong Value)
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Signal>((IntPtr)(lpVtbl[10]))(pThis, Value);
            }
        }

        public D3D12_FENCE_FLAGS GetCreationFlags()
        {
            fixed (ID3D12Fence1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetCreationFlags>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }
    }

    [Guid("765A30F3-F624-4C6F-A828-ACE948622445")]
    [NativeTypeName("struct ID3D12PipelineState : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12PipelineState
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12PipelineState* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12PipelineState* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12PipelineState* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12PipelineState* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12PipelineState* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12PipelineState* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12PipelineState* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12PipelineState* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetCachedBlob(ID3D12PipelineState* pThis, [NativeTypeName("ID3DBlob **")] [ComOutPtr] ID3DBlob** ppBlob);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12PipelineState* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12PipelineState* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12PipelineState* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12PipelineState* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12PipelineState* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12PipelineState* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12PipelineState* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12PipelineState* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetCachedBlob([NativeTypeName("ID3DBlob **")] [ComOutPtr] ID3DBlob** ppBlob)
        {
            fixed (ID3D12PipelineState* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetCachedBlob>((IntPtr)(lpVtbl[8]))(pThis, ppBlob);
            }
        }
    }

    [Guid("8EFB471D-616C-4F49-90F7-127BB763FA51")]
    [NativeTypeName("struct ID3D12DescriptorHeap : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12DescriptorHeap
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DescriptorHeap* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DescriptorHeap* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DescriptorHeap* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12DescriptorHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12DescriptorHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12DescriptorHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12DescriptorHeap* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12DescriptorHeap* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_DESCRIPTOR_HEAP_DESC* _GetDesc(ID3D12DescriptorHeap* pThis, D3D12_DESCRIPTOR_HEAP_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_CPU_DESCRIPTOR_HANDLE* _GetCPUDescriptorHandleForHeapStart(ID3D12DescriptorHeap* pThis, D3D12_CPU_DESCRIPTOR_HANDLE* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_GPU_DESCRIPTOR_HANDLE* _GetGPUDescriptorHandleForHeapStart(ID3D12DescriptorHeap* pThis, D3D12_GPU_DESCRIPTOR_HANDLE* _result);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DescriptorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DescriptorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DescriptorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12DescriptorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12DescriptorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12DescriptorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12DescriptorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12DescriptorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public D3D12_DESCRIPTOR_HEAP_DESC GetDesc()
        {
            fixed (ID3D12DescriptorHeap* pThis = &this)
            {
                D3D12_DESCRIPTOR_HEAP_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[8]))(pThis, &result);
            }
        }

        public D3D12_CPU_DESCRIPTOR_HANDLE GetCPUDescriptorHandleForHeapStart()
        {
            fixed (ID3D12DescriptorHeap* pThis = &this)
            {
                D3D12_CPU_DESCRIPTOR_HANDLE result;
                return *Marshal.GetDelegateForFunctionPointer<_GetCPUDescriptorHandleForHeapStart>((IntPtr)(lpVtbl[9]))(pThis, &result);
            }
        }

        public D3D12_GPU_DESCRIPTOR_HANDLE GetGPUDescriptorHandleForHeapStart()
        {
            fixed (ID3D12DescriptorHeap* pThis = &this)
            {
                D3D12_GPU_DESCRIPTOR_HANDLE result;
                return *Marshal.GetDelegateForFunctionPointer<_GetGPUDescriptorHandleForHeapStart>((IntPtr)(lpVtbl[10]))(pThis, &result);
            }
        }
    }

    [Guid("0D9658AE-ED45-469E-A61D-970EC583CAB4")]
    [NativeTypeName("struct ID3D12QueryHeap : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12QueryHeap
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12QueryHeap* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12QueryHeap* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12QueryHeap* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12QueryHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12QueryHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12QueryHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12QueryHeap* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12QueryHeap* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12QueryHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12QueryHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12QueryHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12QueryHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12QueryHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12QueryHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12QueryHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12QueryHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }
    }

    [Guid("C36A797C-EC80-4F0A-8985-A7B2475082D1")]
    [NativeTypeName("struct ID3D12CommandSignature : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12CommandSignature
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12CommandSignature* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12CommandSignature* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12CommandSignature* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12CommandSignature* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12CommandSignature* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12CommandSignature* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12CommandSignature* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12CommandSignature* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12CommandSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12CommandSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12CommandSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12CommandSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12CommandSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12CommandSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12CommandSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12CommandSignature* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }
    }

    [Guid("7116D91C-E7E4-47CE-B8C6-EC8168F437E5")]
    [NativeTypeName("struct ID3D12CommandList : ID3D12DeviceChild")]
    [NativeInheritance("ID3D12DeviceChild")]
    public unsafe partial struct ID3D12CommandList
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12CommandList* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12CommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12CommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12CommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12CommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12CommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12CommandList* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12CommandList* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12CommandList* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12CommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12CommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12CommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12CommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12CommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12CommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12CommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12CommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12CommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }
    }

    [Guid("5B160D0F-AC1B-4185-8BA8-B3AE42A5A455")]
    [NativeTypeName("struct ID3D12GraphicsCommandList : ID3D12CommandList")]
    [NativeInheritance("ID3D12CommandList")]
    public unsafe partial struct ID3D12GraphicsCommandList
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12GraphicsCommandList* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12GraphicsCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12GraphicsCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12GraphicsCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12GraphicsCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12GraphicsCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12GraphicsCommandList* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12GraphicsCommandList* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12GraphicsCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12GraphicsCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawInstanced(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawIndexedInstanced(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _Dispatch(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyBufferRegion(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTextureRegion(ID3D12GraphicsCommandList* pThis, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyResource(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTiles(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresource(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetPrimitiveTopology(ID3D12GraphicsCommandList* pThis, [NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetViewports(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetScissorRects(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetBlendFactor(ID3D12GraphicsCommandList* pThis, [NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetStencilRef(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint StencilRef);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPipelineState(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteBundle(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetDescriptorHeaps(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootSignature(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootSignature(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootDescriptorTable(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootDescriptorTable(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstant(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstant(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstants(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstants(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootConstantBufferView(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootConstantBufferView(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootShaderResourceView(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootShaderResourceView(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootUnorderedAccessView(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootUnorderedAccessView(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetIndexBuffer(ID3D12GraphicsCommandList* pThis, [NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetVertexBuffers(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SOSetTargets(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetRenderTargets(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearDepthStencilView(ID3D12GraphicsCommandList* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearRenderTargetView(ID3D12GraphicsCommandList* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewUint(ID3D12GraphicsCommandList* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewFloat(ID3D12GraphicsCommandList* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12GraphicsCommandList* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12GraphicsCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteIndirect(ID3D12GraphicsCommandList* pThis, [NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator, pInitialState);
            }
        }

        public void ClearState([NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis, pPipelineState);
            }
        }

        public void DrawInstanced([NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawInstanced>((IntPtr)(lpVtbl[12]))(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }
        }

        public void DrawIndexedInstanced([NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawIndexedInstanced>((IntPtr)(lpVtbl[13]))(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }
        }

        public void Dispatch([NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_Dispatch>((IntPtr)(lpVtbl[14]))(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }
        }

        public void CopyBufferRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyBufferRegion>((IntPtr)(lpVtbl[15]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
            }
        }

        public void CopyTextureRegion([NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTextureRegion>((IntPtr)(lpVtbl[16]))(pThis, pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
            }
        }

        public void CopyResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyResource>((IntPtr)(lpVtbl[17]))(pThis, pDstResource, pSrcResource);
            }
        }

        public void CopyTiles([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTiles>((IntPtr)(lpVtbl[18]))(pThis, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
            }
        }

        public void ResolveSubresource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresource>((IntPtr)(lpVtbl[19]))(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }
        }

        public void IASetPrimitiveTopology([NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetPrimitiveTopology>((IntPtr)(lpVtbl[20]))(pThis, PrimitiveTopology);
            }
        }

        public void RSSetViewports([NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetViewports>((IntPtr)(lpVtbl[21]))(pThis, NumViewports, pViewports);
            }
        }

        public void RSSetScissorRects([NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetScissorRects>((IntPtr)(lpVtbl[22]))(pThis, NumRects, pRects);
            }
        }

        public void OMSetBlendFactor([NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetBlendFactor>((IntPtr)(lpVtbl[23]))(pThis, BlendFactor);
            }
        }

        public void OMSetStencilRef([NativeTypeName("UINT")] [In] uint StencilRef)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetStencilRef>((IntPtr)(lpVtbl[24]))(pThis, StencilRef);
            }
        }

        public void SetPipelineState([NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPipelineState>((IntPtr)(lpVtbl[25]))(pThis, pPipelineState);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[26]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void ExecuteBundle([NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteBundle>((IntPtr)(lpVtbl[27]))(pThis, pCommandList);
            }
        }

        public void SetDescriptorHeaps([NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetDescriptorHeaps>((IntPtr)(lpVtbl[28]))(pThis, NumDescriptorHeaps, ppDescriptorHeaps);
            }
        }

        public void SetComputeRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootSignature>((IntPtr)(lpVtbl[29]))(pThis, pRootSignature);
            }
        }

        public void SetGraphicsRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootSignature>((IntPtr)(lpVtbl[30]))(pThis, pRootSignature);
            }
        }

        public void SetComputeRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootDescriptorTable>((IntPtr)(lpVtbl[31]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetGraphicsRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootDescriptorTable>((IntPtr)(lpVtbl[32]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetComputeRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstant>((IntPtr)(lpVtbl[33]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstant>((IntPtr)(lpVtbl[34]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstants>((IntPtr)(lpVtbl[35]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstants>((IntPtr)(lpVtbl[36]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootConstantBufferView>((IntPtr)(lpVtbl[37]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootConstantBufferView>((IntPtr)(lpVtbl[38]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootShaderResourceView>((IntPtr)(lpVtbl[39]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootShaderResourceView>((IntPtr)(lpVtbl[40]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootUnorderedAccessView>((IntPtr)(lpVtbl[41]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootUnorderedAccessView>((IntPtr)(lpVtbl[42]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void IASetIndexBuffer([NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetIndexBuffer>((IntPtr)(lpVtbl[43]))(pThis, pView);
            }
        }

        public void IASetVertexBuffers([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetVertexBuffers>((IntPtr)(lpVtbl[44]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void SOSetTargets([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SOSetTargets>((IntPtr)(lpVtbl[45]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void OMSetRenderTargets([NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetRenderTargets>((IntPtr)(lpVtbl[46]))(pThis, NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
            }
        }

        public void ClearDepthStencilView([In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearDepthStencilView>((IntPtr)(lpVtbl[47]))(pThis, DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
            }
        }

        public void ClearRenderTargetView([In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearRenderTargetView>((IntPtr)(lpVtbl[48]))(pThis, RenderTargetView, ColorRGBA, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewUint([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewUint>((IntPtr)(lpVtbl[49]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewFloat([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewFloat>((IntPtr)(lpVtbl[50]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[51]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[52]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[53]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[54]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[55]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[56]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[57]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[58]))(pThis);
            }
        }

        public void ExecuteIndirect([NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteIndirect>((IntPtr)(lpVtbl[59]))(pThis, pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
            }
        }
    }

    [Guid("553103FB-1FE7-4557-BB38-946D7D0E7CA7")]
    [NativeTypeName("struct ID3D12GraphicsCommandList1 : ID3D12GraphicsCommandList")]
    [NativeInheritance("ID3D12GraphicsCommandList")]
    public unsafe partial struct ID3D12GraphicsCommandList1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12GraphicsCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12GraphicsCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12GraphicsCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12GraphicsCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawInstanced(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawIndexedInstanced(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _Dispatch(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyBufferRegion(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTextureRegion(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyResource(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTiles(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresource(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetPrimitiveTopology(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetViewports(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetScissorRects(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetBlendFactor(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetStencilRef(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint StencilRef);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPipelineState(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteBundle(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetDescriptorHeaps(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootSignature(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootSignature(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootDescriptorTable(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootDescriptorTable(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstant(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstant(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstants(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstants(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootConstantBufferView(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootConstantBufferView(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootShaderResourceView(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootShaderResourceView(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootUnorderedAccessView(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootUnorderedAccessView(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetIndexBuffer(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetVertexBuffers(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SOSetTargets(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetRenderTargets(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearDepthStencilView(ID3D12GraphicsCommandList1* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearRenderTargetView(ID3D12GraphicsCommandList1* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewUint(ID3D12GraphicsCommandList1* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewFloat(ID3D12GraphicsCommandList1* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12GraphicsCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteIndirect(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT64(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetDepthBounds(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetSamplePositions(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresourceRegion(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetViewInstanceMask(ID3D12GraphicsCommandList1* pThis, [NativeTypeName("UINT")] [In] uint Mask);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator, pInitialState);
            }
        }

        public void ClearState([NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis, pPipelineState);
            }
        }

        public void DrawInstanced([NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawInstanced>((IntPtr)(lpVtbl[12]))(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }
        }

        public void DrawIndexedInstanced([NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawIndexedInstanced>((IntPtr)(lpVtbl[13]))(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }
        }

        public void Dispatch([NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_Dispatch>((IntPtr)(lpVtbl[14]))(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }
        }

        public void CopyBufferRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyBufferRegion>((IntPtr)(lpVtbl[15]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
            }
        }

        public void CopyTextureRegion([NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTextureRegion>((IntPtr)(lpVtbl[16]))(pThis, pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
            }
        }

        public void CopyResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyResource>((IntPtr)(lpVtbl[17]))(pThis, pDstResource, pSrcResource);
            }
        }

        public void CopyTiles([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTiles>((IntPtr)(lpVtbl[18]))(pThis, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
            }
        }

        public void ResolveSubresource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresource>((IntPtr)(lpVtbl[19]))(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }
        }

        public void IASetPrimitiveTopology([NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetPrimitiveTopology>((IntPtr)(lpVtbl[20]))(pThis, PrimitiveTopology);
            }
        }

        public void RSSetViewports([NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetViewports>((IntPtr)(lpVtbl[21]))(pThis, NumViewports, pViewports);
            }
        }

        public void RSSetScissorRects([NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetScissorRects>((IntPtr)(lpVtbl[22]))(pThis, NumRects, pRects);
            }
        }

        public void OMSetBlendFactor([NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetBlendFactor>((IntPtr)(lpVtbl[23]))(pThis, BlendFactor);
            }
        }

        public void OMSetStencilRef([NativeTypeName("UINT")] [In] uint StencilRef)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetStencilRef>((IntPtr)(lpVtbl[24]))(pThis, StencilRef);
            }
        }

        public void SetPipelineState([NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPipelineState>((IntPtr)(lpVtbl[25]))(pThis, pPipelineState);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[26]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void ExecuteBundle([NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteBundle>((IntPtr)(lpVtbl[27]))(pThis, pCommandList);
            }
        }

        public void SetDescriptorHeaps([NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetDescriptorHeaps>((IntPtr)(lpVtbl[28]))(pThis, NumDescriptorHeaps, ppDescriptorHeaps);
            }
        }

        public void SetComputeRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootSignature>((IntPtr)(lpVtbl[29]))(pThis, pRootSignature);
            }
        }

        public void SetGraphicsRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootSignature>((IntPtr)(lpVtbl[30]))(pThis, pRootSignature);
            }
        }

        public void SetComputeRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootDescriptorTable>((IntPtr)(lpVtbl[31]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetGraphicsRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootDescriptorTable>((IntPtr)(lpVtbl[32]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetComputeRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstant>((IntPtr)(lpVtbl[33]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstant>((IntPtr)(lpVtbl[34]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstants>((IntPtr)(lpVtbl[35]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstants>((IntPtr)(lpVtbl[36]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootConstantBufferView>((IntPtr)(lpVtbl[37]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootConstantBufferView>((IntPtr)(lpVtbl[38]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootShaderResourceView>((IntPtr)(lpVtbl[39]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootShaderResourceView>((IntPtr)(lpVtbl[40]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootUnorderedAccessView>((IntPtr)(lpVtbl[41]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootUnorderedAccessView>((IntPtr)(lpVtbl[42]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void IASetIndexBuffer([NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetIndexBuffer>((IntPtr)(lpVtbl[43]))(pThis, pView);
            }
        }

        public void IASetVertexBuffers([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetVertexBuffers>((IntPtr)(lpVtbl[44]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void SOSetTargets([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SOSetTargets>((IntPtr)(lpVtbl[45]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void OMSetRenderTargets([NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetRenderTargets>((IntPtr)(lpVtbl[46]))(pThis, NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
            }
        }

        public void ClearDepthStencilView([In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearDepthStencilView>((IntPtr)(lpVtbl[47]))(pThis, DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
            }
        }

        public void ClearRenderTargetView([In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearRenderTargetView>((IntPtr)(lpVtbl[48]))(pThis, RenderTargetView, ColorRGBA, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewUint([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewUint>((IntPtr)(lpVtbl[49]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewFloat([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewFloat>((IntPtr)(lpVtbl[50]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[51]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[52]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[53]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[54]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[55]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[56]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[57]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[58]))(pThis);
            }
        }

        public void ExecuteIndirect([NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteIndirect>((IntPtr)(lpVtbl[59]))(pThis, pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
            }
        }

        public void AtomicCopyBufferUINT([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT>((IntPtr)(lpVtbl[60]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void AtomicCopyBufferUINT64([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT64>((IntPtr)(lpVtbl[61]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void OMSetDepthBounds([NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetDepthBounds>((IntPtr)(lpVtbl[62]))(pThis, Min, Max);
            }
        }

        public void SetSamplePositions([NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetSamplePositions>((IntPtr)(lpVtbl[63]))(pThis, NumSamplesPerPixel, NumPixels, pSamplePositions);
            }
        }

        public void ResolveSubresourceRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresourceRegion>((IntPtr)(lpVtbl[64]))(pThis, pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
            }
        }

        public void SetViewInstanceMask([NativeTypeName("UINT")] [In] uint Mask)
        {
            fixed (ID3D12GraphicsCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetViewInstanceMask>((IntPtr)(lpVtbl[65]))(pThis, Mask);
            }
        }
    }

    public partial struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong Dest;

        [NativeTypeName("UINT32")]
        public uint Value;
    }

    public enum D3D12_WRITEBUFFERIMMEDIATE_MODE
    {
        D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT = 0,
        D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN = 0x1,
        D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT = 0x2,
    }

    [Guid("38C3E585-FF17-412C-9150-4FC6F9D72A28")]
    [NativeTypeName("struct ID3D12GraphicsCommandList2 : ID3D12GraphicsCommandList1")]
    [NativeInheritance("ID3D12GraphicsCommandList1")]
    public unsafe partial struct ID3D12GraphicsCommandList2
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12GraphicsCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12GraphicsCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12GraphicsCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12GraphicsCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawInstanced(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawIndexedInstanced(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _Dispatch(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyBufferRegion(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTextureRegion(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyResource(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTiles(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresource(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetPrimitiveTopology(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetViewports(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetScissorRects(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetBlendFactor(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetStencilRef(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint StencilRef);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPipelineState(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteBundle(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetDescriptorHeaps(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootSignature(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootSignature(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootDescriptorTable(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootDescriptorTable(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstant(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstant(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstants(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstants(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootConstantBufferView(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootConstantBufferView(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootShaderResourceView(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootShaderResourceView(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootUnorderedAccessView(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootUnorderedAccessView(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetIndexBuffer(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetVertexBuffers(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SOSetTargets(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetRenderTargets(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearDepthStencilView(ID3D12GraphicsCommandList2* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearRenderTargetView(ID3D12GraphicsCommandList2* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewUint(ID3D12GraphicsCommandList2* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewFloat(ID3D12GraphicsCommandList2* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12GraphicsCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteIndirect(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT64(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetDepthBounds(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetSamplePositions(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresourceRegion(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetViewInstanceMask(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] [In] uint Mask);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12GraphicsCommandList2* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator, pInitialState);
            }
        }

        public void ClearState([NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis, pPipelineState);
            }
        }

        public void DrawInstanced([NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawInstanced>((IntPtr)(lpVtbl[12]))(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }
        }

        public void DrawIndexedInstanced([NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawIndexedInstanced>((IntPtr)(lpVtbl[13]))(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }
        }

        public void Dispatch([NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_Dispatch>((IntPtr)(lpVtbl[14]))(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }
        }

        public void CopyBufferRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyBufferRegion>((IntPtr)(lpVtbl[15]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
            }
        }

        public void CopyTextureRegion([NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTextureRegion>((IntPtr)(lpVtbl[16]))(pThis, pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
            }
        }

        public void CopyResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyResource>((IntPtr)(lpVtbl[17]))(pThis, pDstResource, pSrcResource);
            }
        }

        public void CopyTiles([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTiles>((IntPtr)(lpVtbl[18]))(pThis, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
            }
        }

        public void ResolveSubresource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresource>((IntPtr)(lpVtbl[19]))(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }
        }

        public void IASetPrimitiveTopology([NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetPrimitiveTopology>((IntPtr)(lpVtbl[20]))(pThis, PrimitiveTopology);
            }
        }

        public void RSSetViewports([NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetViewports>((IntPtr)(lpVtbl[21]))(pThis, NumViewports, pViewports);
            }
        }

        public void RSSetScissorRects([NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetScissorRects>((IntPtr)(lpVtbl[22]))(pThis, NumRects, pRects);
            }
        }

        public void OMSetBlendFactor([NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetBlendFactor>((IntPtr)(lpVtbl[23]))(pThis, BlendFactor);
            }
        }

        public void OMSetStencilRef([NativeTypeName("UINT")] [In] uint StencilRef)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetStencilRef>((IntPtr)(lpVtbl[24]))(pThis, StencilRef);
            }
        }

        public void SetPipelineState([NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPipelineState>((IntPtr)(lpVtbl[25]))(pThis, pPipelineState);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[26]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void ExecuteBundle([NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteBundle>((IntPtr)(lpVtbl[27]))(pThis, pCommandList);
            }
        }

        public void SetDescriptorHeaps([NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetDescriptorHeaps>((IntPtr)(lpVtbl[28]))(pThis, NumDescriptorHeaps, ppDescriptorHeaps);
            }
        }

        public void SetComputeRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootSignature>((IntPtr)(lpVtbl[29]))(pThis, pRootSignature);
            }
        }

        public void SetGraphicsRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootSignature>((IntPtr)(lpVtbl[30]))(pThis, pRootSignature);
            }
        }

        public void SetComputeRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootDescriptorTable>((IntPtr)(lpVtbl[31]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetGraphicsRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootDescriptorTable>((IntPtr)(lpVtbl[32]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetComputeRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstant>((IntPtr)(lpVtbl[33]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstant>((IntPtr)(lpVtbl[34]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstants>((IntPtr)(lpVtbl[35]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstants>((IntPtr)(lpVtbl[36]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootConstantBufferView>((IntPtr)(lpVtbl[37]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootConstantBufferView>((IntPtr)(lpVtbl[38]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootShaderResourceView>((IntPtr)(lpVtbl[39]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootShaderResourceView>((IntPtr)(lpVtbl[40]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootUnorderedAccessView>((IntPtr)(lpVtbl[41]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootUnorderedAccessView>((IntPtr)(lpVtbl[42]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void IASetIndexBuffer([NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetIndexBuffer>((IntPtr)(lpVtbl[43]))(pThis, pView);
            }
        }

        public void IASetVertexBuffers([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetVertexBuffers>((IntPtr)(lpVtbl[44]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void SOSetTargets([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SOSetTargets>((IntPtr)(lpVtbl[45]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void OMSetRenderTargets([NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetRenderTargets>((IntPtr)(lpVtbl[46]))(pThis, NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
            }
        }

        public void ClearDepthStencilView([In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearDepthStencilView>((IntPtr)(lpVtbl[47]))(pThis, DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
            }
        }

        public void ClearRenderTargetView([In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearRenderTargetView>((IntPtr)(lpVtbl[48]))(pThis, RenderTargetView, ColorRGBA, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewUint([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewUint>((IntPtr)(lpVtbl[49]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewFloat([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewFloat>((IntPtr)(lpVtbl[50]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[51]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[52]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[53]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[54]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[55]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[56]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[57]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[58]))(pThis);
            }
        }

        public void ExecuteIndirect([NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteIndirect>((IntPtr)(lpVtbl[59]))(pThis, pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
            }
        }

        public void AtomicCopyBufferUINT([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT>((IntPtr)(lpVtbl[60]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void AtomicCopyBufferUINT64([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT64>((IntPtr)(lpVtbl[61]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void OMSetDepthBounds([NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetDepthBounds>((IntPtr)(lpVtbl[62]))(pThis, Min, Max);
            }
        }

        public void SetSamplePositions([NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetSamplePositions>((IntPtr)(lpVtbl[63]))(pThis, NumSamplesPerPixel, NumPixels, pSamplePositions);
            }
        }

        public void ResolveSubresourceRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresourceRegion>((IntPtr)(lpVtbl[64]))(pThis, pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
            }
        }

        public void SetViewInstanceMask([NativeTypeName("UINT")] [In] uint Mask)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetViewInstanceMask>((IntPtr)(lpVtbl[65]))(pThis, Mask);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12GraphicsCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[66]))(pThis, Count, pParams, pModes);
            }
        }
    }

    [Guid("0EC870A6-5D7E-4C22-8CFC-5BAAE07616ED")]
    [NativeTypeName("struct ID3D12CommandQueue : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12CommandQueue
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12CommandQueue* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12CommandQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12CommandQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12CommandQueue* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12CommandQueue* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12CommandQueue* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12CommandQueue* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12CommandQueue* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _UpdateTileMappings(ID3D12CommandQueue* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint NumResourceRegions, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_TILED_RESOURCE_COORDINATE* pResourceRegionStartCoordinates, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_TILE_REGION_SIZE* pResourceRegionSizes, [NativeTypeName("ID3D12Heap *")] [In][Optional] ID3D12Heap* pHeap, [NativeTypeName("UINT")] uint NumRanges, [NativeTypeName("const D3D12_TILE_RANGE_FLAGS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 5)][In][Optional] D3D12_TILE_RANGE_FLAGS* pRangeFlags, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 5)][In][Optional] uint* pHeapRangeStartOffsets, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 5)][In][Optional] uint* pRangeTileCounts, D3D12_TILE_MAPPING_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTileMappings(ID3D12CommandQueue* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pDstRegionStartCoordinate, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pSrcRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pRegionSize, D3D12_TILE_MAPPING_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteCommandLists(ID3D12CommandQueue* pThis, [NativeTypeName("UINT")] [In] uint NumCommandLists, [NativeTypeName("ID3D12CommandList *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12CommandList** ppCommandLists);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12CommandQueue* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12CommandQueue* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12CommandQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Signal(ID3D12CommandQueue* pThis, [NativeTypeName("ID3D12Fence *")] ID3D12Fence* pFence, [NativeTypeName("UINT64")] ulong Value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Wait(ID3D12CommandQueue* pThis, [NativeTypeName("ID3D12Fence *")] ID3D12Fence* pFence, [NativeTypeName("UINT64")] ulong Value);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetTimestampFrequency(ID3D12CommandQueue* pThis, [NativeTypeName("UINT64 *")] [Out] ulong* pFrequency);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetClockCalibration(ID3D12CommandQueue* pThis, [NativeTypeName("UINT64 *")] [Out] ulong* pGpuTimestamp, [NativeTypeName("UINT64 *")] [Out] ulong* pCpuTimestamp);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_QUEUE_DESC* _GetDesc(ID3D12CommandQueue* pThis, D3D12_COMMAND_QUEUE_DESC* _result);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public void UpdateTileMappings([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint NumResourceRegions, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_TILED_RESOURCE_COORDINATE* pResourceRegionStartCoordinates, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_TILE_REGION_SIZE* pResourceRegionSizes, [NativeTypeName("ID3D12Heap *")] [In][Optional] ID3D12Heap* pHeap, [NativeTypeName("UINT")] uint NumRanges, [NativeTypeName("const D3D12_TILE_RANGE_FLAGS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 5)][In][Optional] D3D12_TILE_RANGE_FLAGS* pRangeFlags, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 5)][In][Optional] uint* pHeapRangeStartOffsets, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 5)][In][Optional] uint* pRangeTileCounts, D3D12_TILE_MAPPING_FLAGS Flags)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_UpdateTileMappings>((IntPtr)(lpVtbl[8]))(pThis, pResource, NumResourceRegions, pResourceRegionStartCoordinates, pResourceRegionSizes, pHeap, NumRanges, pRangeFlags, pHeapRangeStartOffsets, pRangeTileCounts, Flags);
            }
        }

        public void CopyTileMappings([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pDstRegionStartCoordinate, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pSrcRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pRegionSize, D3D12_TILE_MAPPING_FLAGS Flags)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTileMappings>((IntPtr)(lpVtbl[9]))(pThis, pDstResource, pDstRegionStartCoordinate, pSrcResource, pSrcRegionStartCoordinate, pRegionSize, Flags);
            }
        }

        public void ExecuteCommandLists([NativeTypeName("UINT")] [In] uint NumCommandLists, [NativeTypeName("ID3D12CommandList *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12CommandList** ppCommandLists)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteCommandLists>((IntPtr)(lpVtbl[10]))(pThis, NumCommandLists, ppCommandLists);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[11]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[12]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[13]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Signal([NativeTypeName("ID3D12Fence *")] ID3D12Fence* pFence, [NativeTypeName("UINT64")] ulong Value)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Signal>((IntPtr)(lpVtbl[14]))(pThis, pFence, Value);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Wait([NativeTypeName("ID3D12Fence *")] ID3D12Fence* pFence, [NativeTypeName("UINT64")] ulong Value)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Wait>((IntPtr)(lpVtbl[15]))(pThis, pFence, Value);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetTimestampFrequency([NativeTypeName("UINT64 *")] [Out] ulong* pFrequency)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetTimestampFrequency>((IntPtr)(lpVtbl[16]))(pThis, pFrequency);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetClockCalibration([NativeTypeName("UINT64 *")] [Out] ulong* pGpuTimestamp, [NativeTypeName("UINT64 *")] [Out] ulong* pCpuTimestamp)
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetClockCalibration>((IntPtr)(lpVtbl[17]))(pThis, pGpuTimestamp, pCpuTimestamp);
            }
        }

        public D3D12_COMMAND_QUEUE_DESC GetDesc()
        {
            fixed (ID3D12CommandQueue* pThis = &this)
            {
                D3D12_COMMAND_QUEUE_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[18]))(pThis, &result);
            }
        }
    }

    [Guid("189819F1-1DB6-4B57-BE54-1821339B85F7")]
    [NativeTypeName("struct ID3D12Device : ID3D12Object")]
    [NativeInheritance("ID3D12Object")]
    public unsafe partial struct ID3D12Device
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Device* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Device* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Device* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Device* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Device* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Device* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Device* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNodeCount(ID3D12Device* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandQueue(ID3D12Device* pThis, [NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandAllocator(ID3D12Device* pThis, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateGraphicsPipelineState(ID3D12Device* pThis, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateComputePipelineState(ID3D12Device* pThis, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList(ID3D12Device* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12Device* pThis, D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateDescriptorHeap(ID3D12Device* pThis, [NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetDescriptorHandleIncrementSize(ID3D12Device* pThis, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateRootSignature(ID3D12Device* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateConstantBufferView(ID3D12Device* pThis, [NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateShaderResourceView(ID3D12Device* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateUnorderedAccessView(ID3D12Device* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateRenderTargetView(ID3D12Device* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateDepthStencilView(ID3D12Device* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateSampler(ID3D12Device* pThis, [NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptors(ID3D12Device* pThis, [NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptorsSimple(ID3D12Device* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo(ID3D12Device* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_HEAP_PROPERTIES* _GetCustomHeapProperties(ID3D12Device* pThis, D3D12_HEAP_PROPERTIES* _result, [NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource(ID3D12Device* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap(ID3D12Device* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePlacedResource(ID3D12Device* pThis, [NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource(ID3D12Device* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateSharedHandle(ID3D12Device* pThis, [NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandle(ID3D12Device* pThis, [NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandleByName(ID3D12Device* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _MakeResident(ID3D12Device* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Evict(ID3D12Device* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateFence(ID3D12Device* pThis, [NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDeviceRemovedReason(ID3D12Device* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetCopyableFootprints(ID3D12Device* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateQueryHeap(ID3D12Device* pThis, [NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetStablePowerState(ID3D12Device* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandSignature(ID3D12Device* pThis, [NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetResourceTiling(ID3D12Device* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate LUID* _GetAdapterLuid(ID3D12Device* pThis, LUID* _result);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNodeCount()
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNodeCount>((IntPtr)(lpVtbl[7]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandQueue([NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandQueue>((IntPtr)(lpVtbl[8]))(pThis, pDesc, riid, ppCommandQueue);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandAllocator([In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandAllocator>((IntPtr)(lpVtbl[9]))(pThis, type, riid, ppCommandAllocator);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateGraphicsPipelineState([NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateGraphicsPipelineState>((IntPtr)(lpVtbl[10]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateComputePipelineState([NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateComputePipelineState>((IntPtr)(lpVtbl[11]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList>((IntPtr)(lpVtbl[12]))(pThis, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[13]))(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateDescriptorHeap([NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateDescriptorHeap>((IntPtr)(lpVtbl[14]))(pThis, pDescriptorHeapDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetDescriptorHandleIncrementSize([In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDescriptorHandleIncrementSize>((IntPtr)(lpVtbl[15]))(pThis, DescriptorHeapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateRootSignature([NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateRootSignature>((IntPtr)(lpVtbl[16]))(pThis, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
            }
        }

        public void CreateConstantBufferView([NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateConstantBufferView>((IntPtr)(lpVtbl[17]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CreateShaderResourceView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateShaderResourceView>((IntPtr)(lpVtbl[18]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateUnorderedAccessView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateUnorderedAccessView>((IntPtr)(lpVtbl[19]))(pThis, pResource, pCounterResource, pDesc, DestDescriptor);
            }
        }

        public void CreateRenderTargetView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateRenderTargetView>((IntPtr)(lpVtbl[20]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateDepthStencilView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateDepthStencilView>((IntPtr)(lpVtbl[21]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateSampler([NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateSampler>((IntPtr)(lpVtbl[22]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CopyDescriptors([NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptors>((IntPtr)(lpVtbl[23]))(pThis, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
            }
        }

        public void CopyDescriptorsSimple([NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptorsSimple>((IntPtr)(lpVtbl[24]))(pThis, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo([NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo>((IntPtr)(lpVtbl[25]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs);
            }
        }

        public D3D12_HEAP_PROPERTIES GetCustomHeapProperties([NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                D3D12_HEAP_PROPERTIES result;
                return *Marshal.GetDelegateForFunctionPointer<_GetCustomHeapProperties>((IntPtr)(lpVtbl[26]))(pThis, &result, nodeMask, heapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource>((IntPtr)(lpVtbl[27]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap>((IntPtr)(lpVtbl[28]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePlacedResource([NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePlacedResource>((IntPtr)(lpVtbl[29]))(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource>((IntPtr)(lpVtbl[30]))(pThis, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateSharedHandle([NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateSharedHandle>((IntPtr)(lpVtbl[31]))(pThis, pObject, pAttributes, Access, Name, pHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandle([NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandle>((IntPtr)(lpVtbl[32]))(pThis, NTHandle, riid, ppvObj);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandleByName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandleByName>((IntPtr)(lpVtbl[33]))(pThis, Name, Access, pNTHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int MakeResident([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_MakeResident>((IntPtr)(lpVtbl[34]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Evict([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Evict>((IntPtr)(lpVtbl[35]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateFence([NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateFence>((IntPtr)(lpVtbl[36]))(pThis, InitialValue, Flags, riid, ppFence);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDeviceRemovedReason()
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDeviceRemovedReason>((IntPtr)(lpVtbl[37]))(pThis);
            }
        }

        public void GetCopyableFootprints([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetCopyableFootprints>((IntPtr)(lpVtbl[38]))(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateQueryHeap([NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateQueryHeap>((IntPtr)(lpVtbl[39]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetStablePowerState([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetStablePowerState>((IntPtr)(lpVtbl[40]))(pThis, Enable);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandSignature([NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandSignature>((IntPtr)(lpVtbl[41]))(pThis, pDesc, pRootSignature, riid, ppvCommandSignature);
            }
        }

        public void GetResourceTiling([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips)
        {
            fixed (ID3D12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetResourceTiling>((IntPtr)(lpVtbl[42]))(pThis, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        public LUID GetAdapterLuid()
        {
            fixed (ID3D12Device* pThis = &this)
            {
                LUID result;
                return *Marshal.GetDelegateForFunctionPointer<_GetAdapterLuid>((IntPtr)(lpVtbl[43]))(pThis, &result);
            }
        }
    }

    [Guid("C64226A8-9201-46AF-B4CC-53FB9FF7414F")]
    [NativeTypeName("struct ID3D12PipelineLibrary : ID3D12DeviceChild")]
    [NativeInheritance("ID3D12DeviceChild")]
    public unsafe partial struct ID3D12PipelineLibrary
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12PipelineLibrary* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12PipelineLibrary* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12PipelineLibrary* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12PipelineLibrary* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12PipelineLibrary* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12PipelineLibrary* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12PipelineLibrary* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12PipelineLibrary* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _StorePipeline(ID3D12PipelineLibrary* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* pName, [NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipeline);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _LoadGraphicsPipeline(ID3D12PipelineLibrary* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pName, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _LoadComputePipeline(ID3D12PipelineLibrary* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pName, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("SIZE_T")]
        public delegate UIntPtr _GetSerializedSize(ID3D12PipelineLibrary* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Serialize(ID3D12PipelineLibrary* pThis, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out] void* pData, [NativeTypeName("SIZE_T")] UIntPtr DataSizeInBytes);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int StorePipeline([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* pName, [NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipeline)
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_StorePipeline>((IntPtr)(lpVtbl[8]))(pThis, pName, pPipeline);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int LoadGraphicsPipeline([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pName, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_LoadGraphicsPipeline>((IntPtr)(lpVtbl[9]))(pThis, pName, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int LoadComputePipeline([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pName, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_LoadComputePipeline>((IntPtr)(lpVtbl[10]))(pThis, pName, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("SIZE_T")]
        public UIntPtr GetSerializedSize()
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetSerializedSize>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Serialize([NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out] void* pData, [NativeTypeName("SIZE_T")] UIntPtr DataSizeInBytes)
        {
            fixed (ID3D12PipelineLibrary* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Serialize>((IntPtr)(lpVtbl[12]))(pThis, pData, DataSizeInBytes);
            }
        }
    }

    [Guid("80EABF42-2568-4E5E-BD82-C37F86961DC3")]
    [NativeTypeName("struct ID3D12PipelineLibrary1 : ID3D12PipelineLibrary")]
    [NativeInheritance("ID3D12PipelineLibrary")]
    public unsafe partial struct ID3D12PipelineLibrary1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12PipelineLibrary1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12PipelineLibrary1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12PipelineLibrary1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12PipelineLibrary1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12PipelineLibrary1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12PipelineLibrary1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12PipelineLibrary1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12PipelineLibrary1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _StorePipeline(ID3D12PipelineLibrary1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* pName, [NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipeline);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _LoadGraphicsPipeline(ID3D12PipelineLibrary1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pName, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _LoadComputePipeline(ID3D12PipelineLibrary1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pName, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("SIZE_T")]
        public delegate UIntPtr _GetSerializedSize(ID3D12PipelineLibrary1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Serialize(ID3D12PipelineLibrary1* pThis, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out] void* pData, [NativeTypeName("SIZE_T")] UIntPtr DataSizeInBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _LoadPipeline(ID3D12PipelineLibrary1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pName, [NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] [In] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int StorePipeline([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* pName, [NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipeline)
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_StorePipeline>((IntPtr)(lpVtbl[8]))(pThis, pName, pPipeline);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int LoadGraphicsPipeline([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pName, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_LoadGraphicsPipeline>((IntPtr)(lpVtbl[9]))(pThis, pName, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int LoadComputePipeline([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pName, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_LoadComputePipeline>((IntPtr)(lpVtbl[10]))(pThis, pName, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("SIZE_T")]
        public UIntPtr GetSerializedSize()
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetSerializedSize>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Serialize([NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out] void* pData, [NativeTypeName("SIZE_T")] UIntPtr DataSizeInBytes)
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Serialize>((IntPtr)(lpVtbl[12]))(pThis, pData, DataSizeInBytes);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int LoadPipeline([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pName, [NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] [In] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12PipelineLibrary1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_LoadPipeline>((IntPtr)(lpVtbl[13]))(pThis, pName, pDesc, riid, ppPipelineState);
            }
        }
    }

    public enum D3D12_MULTIPLE_FENCE_WAIT_FLAGS
    {
        D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE = 0,
        D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY = 0x1,
        D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL = 0,
    }

    public enum D3D12_RESIDENCY_PRIORITY
    {
        D3D12_RESIDENCY_PRIORITY_MINIMUM = 0x28000000,
        D3D12_RESIDENCY_PRIORITY_LOW = 0x50000000,
        D3D12_RESIDENCY_PRIORITY_NORMAL = 0x78000000,
        D3D12_RESIDENCY_PRIORITY_HIGH = unchecked((int)(0xa0010000)),
        D3D12_RESIDENCY_PRIORITY_MAXIMUM = unchecked((int)(0xc8000000)),
    }

    [Guid("77ACCE80-638E-4E65-8895-C1F23386863E")]
    [NativeTypeName("struct ID3D12Device1 : ID3D12Device")]
    [NativeInheritance("ID3D12Device")]
    public unsafe partial struct ID3D12Device1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Device1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Device1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Device1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Device1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Device1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Device1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Device1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNodeCount(ID3D12Device1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandQueue(ID3D12Device1* pThis, [NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandAllocator(ID3D12Device1* pThis, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateGraphicsPipelineState(ID3D12Device1* pThis, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateComputePipelineState(ID3D12Device1* pThis, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList(ID3D12Device1* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12Device1* pThis, D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateDescriptorHeap(ID3D12Device1* pThis, [NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetDescriptorHandleIncrementSize(ID3D12Device1* pThis, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateRootSignature(ID3D12Device1* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateConstantBufferView(ID3D12Device1* pThis, [NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateShaderResourceView(ID3D12Device1* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateUnorderedAccessView(ID3D12Device1* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateRenderTargetView(ID3D12Device1* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateDepthStencilView(ID3D12Device1* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateSampler(ID3D12Device1* pThis, [NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptors(ID3D12Device1* pThis, [NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptorsSimple(ID3D12Device1* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo(ID3D12Device1* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_HEAP_PROPERTIES* _GetCustomHeapProperties(ID3D12Device1* pThis, D3D12_HEAP_PROPERTIES* _result, [NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource(ID3D12Device1* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap(ID3D12Device1* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePlacedResource(ID3D12Device1* pThis, [NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource(ID3D12Device1* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateSharedHandle(ID3D12Device1* pThis, [NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandle(ID3D12Device1* pThis, [NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandleByName(ID3D12Device1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _MakeResident(ID3D12Device1* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Evict(ID3D12Device1* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateFence(ID3D12Device1* pThis, [NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDeviceRemovedReason(ID3D12Device1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetCopyableFootprints(ID3D12Device1* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateQueryHeap(ID3D12Device1* pThis, [NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetStablePowerState(ID3D12Device1* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandSignature(ID3D12Device1* pThis, [NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetResourceTiling(ID3D12Device1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate LUID* _GetAdapterLuid(ID3D12Device1* pThis, LUID* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineLibrary(ID3D12Device1* pThis, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetEventOnMultipleFenceCompletion(ID3D12Device1* pThis, [NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetResidencyPriority(ID3D12Device1* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNodeCount()
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNodeCount>((IntPtr)(lpVtbl[7]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandQueue([NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandQueue>((IntPtr)(lpVtbl[8]))(pThis, pDesc, riid, ppCommandQueue);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandAllocator([In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandAllocator>((IntPtr)(lpVtbl[9]))(pThis, type, riid, ppCommandAllocator);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateGraphicsPipelineState([NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateGraphicsPipelineState>((IntPtr)(lpVtbl[10]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateComputePipelineState([NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateComputePipelineState>((IntPtr)(lpVtbl[11]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList>((IntPtr)(lpVtbl[12]))(pThis, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[13]))(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateDescriptorHeap([NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateDescriptorHeap>((IntPtr)(lpVtbl[14]))(pThis, pDescriptorHeapDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetDescriptorHandleIncrementSize([In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDescriptorHandleIncrementSize>((IntPtr)(lpVtbl[15]))(pThis, DescriptorHeapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateRootSignature([NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateRootSignature>((IntPtr)(lpVtbl[16]))(pThis, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
            }
        }

        public void CreateConstantBufferView([NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateConstantBufferView>((IntPtr)(lpVtbl[17]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CreateShaderResourceView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateShaderResourceView>((IntPtr)(lpVtbl[18]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateUnorderedAccessView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateUnorderedAccessView>((IntPtr)(lpVtbl[19]))(pThis, pResource, pCounterResource, pDesc, DestDescriptor);
            }
        }

        public void CreateRenderTargetView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateRenderTargetView>((IntPtr)(lpVtbl[20]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateDepthStencilView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateDepthStencilView>((IntPtr)(lpVtbl[21]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateSampler([NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateSampler>((IntPtr)(lpVtbl[22]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CopyDescriptors([NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptors>((IntPtr)(lpVtbl[23]))(pThis, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
            }
        }

        public void CopyDescriptorsSimple([NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptorsSimple>((IntPtr)(lpVtbl[24]))(pThis, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo([NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo>((IntPtr)(lpVtbl[25]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs);
            }
        }

        public D3D12_HEAP_PROPERTIES GetCustomHeapProperties([NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                D3D12_HEAP_PROPERTIES result;
                return *Marshal.GetDelegateForFunctionPointer<_GetCustomHeapProperties>((IntPtr)(lpVtbl[26]))(pThis, &result, nodeMask, heapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource>((IntPtr)(lpVtbl[27]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap>((IntPtr)(lpVtbl[28]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePlacedResource([NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePlacedResource>((IntPtr)(lpVtbl[29]))(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource>((IntPtr)(lpVtbl[30]))(pThis, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateSharedHandle([NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateSharedHandle>((IntPtr)(lpVtbl[31]))(pThis, pObject, pAttributes, Access, Name, pHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandle([NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandle>((IntPtr)(lpVtbl[32]))(pThis, NTHandle, riid, ppvObj);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandleByName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandleByName>((IntPtr)(lpVtbl[33]))(pThis, Name, Access, pNTHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int MakeResident([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_MakeResident>((IntPtr)(lpVtbl[34]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Evict([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Evict>((IntPtr)(lpVtbl[35]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateFence([NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateFence>((IntPtr)(lpVtbl[36]))(pThis, InitialValue, Flags, riid, ppFence);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDeviceRemovedReason()
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDeviceRemovedReason>((IntPtr)(lpVtbl[37]))(pThis);
            }
        }

        public void GetCopyableFootprints([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetCopyableFootprints>((IntPtr)(lpVtbl[38]))(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateQueryHeap([NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateQueryHeap>((IntPtr)(lpVtbl[39]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetStablePowerState([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetStablePowerState>((IntPtr)(lpVtbl[40]))(pThis, Enable);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandSignature([NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandSignature>((IntPtr)(lpVtbl[41]))(pThis, pDesc, pRootSignature, riid, ppvCommandSignature);
            }
        }

        public void GetResourceTiling([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetResourceTiling>((IntPtr)(lpVtbl[42]))(pThis, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        public LUID GetAdapterLuid()
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                LUID result;
                return *Marshal.GetDelegateForFunctionPointer<_GetAdapterLuid>((IntPtr)(lpVtbl[43]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineLibrary([NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineLibrary>((IntPtr)(lpVtbl[44]))(pThis, pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetEventOnMultipleFenceCompletion([NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetEventOnMultipleFenceCompletion>((IntPtr)(lpVtbl[45]))(pThis, ppFences, pFenceValues, NumFences, Flags, hEvent);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetResidencyPriority([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities)
        {
            fixed (ID3D12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetResidencyPriority>((IntPtr)(lpVtbl[46]))(pThis, NumObjects, ppObjects, pPriorities);
            }
        }
    }

    [Guid("30BAA41E-B15B-475C-A0BB-1AF5C5B64328")]
    [NativeTypeName("struct ID3D12Device2 : ID3D12Device1")]
    [NativeInheritance("ID3D12Device1")]
    public unsafe partial struct ID3D12Device2
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Device2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Device2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Device2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Device2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Device2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Device2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Device2* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNodeCount(ID3D12Device2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandQueue(ID3D12Device2* pThis, [NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandAllocator(ID3D12Device2* pThis, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateGraphicsPipelineState(ID3D12Device2* pThis, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateComputePipelineState(ID3D12Device2* pThis, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList(ID3D12Device2* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12Device2* pThis, D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateDescriptorHeap(ID3D12Device2* pThis, [NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetDescriptorHandleIncrementSize(ID3D12Device2* pThis, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateRootSignature(ID3D12Device2* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateConstantBufferView(ID3D12Device2* pThis, [NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateShaderResourceView(ID3D12Device2* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateUnorderedAccessView(ID3D12Device2* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateRenderTargetView(ID3D12Device2* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateDepthStencilView(ID3D12Device2* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateSampler(ID3D12Device2* pThis, [NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptors(ID3D12Device2* pThis, [NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptorsSimple(ID3D12Device2* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo(ID3D12Device2* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_HEAP_PROPERTIES* _GetCustomHeapProperties(ID3D12Device2* pThis, D3D12_HEAP_PROPERTIES* _result, [NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource(ID3D12Device2* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap(ID3D12Device2* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePlacedResource(ID3D12Device2* pThis, [NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource(ID3D12Device2* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateSharedHandle(ID3D12Device2* pThis, [NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandle(ID3D12Device2* pThis, [NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandleByName(ID3D12Device2* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _MakeResident(ID3D12Device2* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Evict(ID3D12Device2* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateFence(ID3D12Device2* pThis, [NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDeviceRemovedReason(ID3D12Device2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetCopyableFootprints(ID3D12Device2* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateQueryHeap(ID3D12Device2* pThis, [NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetStablePowerState(ID3D12Device2* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandSignature(ID3D12Device2* pThis, [NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetResourceTiling(ID3D12Device2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate LUID* _GetAdapterLuid(ID3D12Device2* pThis, LUID* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineLibrary(ID3D12Device2* pThis, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetEventOnMultipleFenceCompletion(ID3D12Device2* pThis, [NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetResidencyPriority(ID3D12Device2* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineState(ID3D12Device2* pThis, [NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNodeCount()
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNodeCount>((IntPtr)(lpVtbl[7]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandQueue([NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandQueue>((IntPtr)(lpVtbl[8]))(pThis, pDesc, riid, ppCommandQueue);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandAllocator([In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandAllocator>((IntPtr)(lpVtbl[9]))(pThis, type, riid, ppCommandAllocator);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateGraphicsPipelineState([NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateGraphicsPipelineState>((IntPtr)(lpVtbl[10]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateComputePipelineState([NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateComputePipelineState>((IntPtr)(lpVtbl[11]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList>((IntPtr)(lpVtbl[12]))(pThis, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[13]))(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateDescriptorHeap([NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateDescriptorHeap>((IntPtr)(lpVtbl[14]))(pThis, pDescriptorHeapDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetDescriptorHandleIncrementSize([In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDescriptorHandleIncrementSize>((IntPtr)(lpVtbl[15]))(pThis, DescriptorHeapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateRootSignature([NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateRootSignature>((IntPtr)(lpVtbl[16]))(pThis, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
            }
        }

        public void CreateConstantBufferView([NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateConstantBufferView>((IntPtr)(lpVtbl[17]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CreateShaderResourceView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateShaderResourceView>((IntPtr)(lpVtbl[18]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateUnorderedAccessView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateUnorderedAccessView>((IntPtr)(lpVtbl[19]))(pThis, pResource, pCounterResource, pDesc, DestDescriptor);
            }
        }

        public void CreateRenderTargetView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateRenderTargetView>((IntPtr)(lpVtbl[20]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateDepthStencilView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateDepthStencilView>((IntPtr)(lpVtbl[21]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateSampler([NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateSampler>((IntPtr)(lpVtbl[22]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CopyDescriptors([NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptors>((IntPtr)(lpVtbl[23]))(pThis, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
            }
        }

        public void CopyDescriptorsSimple([NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptorsSimple>((IntPtr)(lpVtbl[24]))(pThis, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo([NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo>((IntPtr)(lpVtbl[25]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs);
            }
        }

        public D3D12_HEAP_PROPERTIES GetCustomHeapProperties([NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                D3D12_HEAP_PROPERTIES result;
                return *Marshal.GetDelegateForFunctionPointer<_GetCustomHeapProperties>((IntPtr)(lpVtbl[26]))(pThis, &result, nodeMask, heapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource>((IntPtr)(lpVtbl[27]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap>((IntPtr)(lpVtbl[28]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePlacedResource([NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePlacedResource>((IntPtr)(lpVtbl[29]))(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource>((IntPtr)(lpVtbl[30]))(pThis, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateSharedHandle([NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateSharedHandle>((IntPtr)(lpVtbl[31]))(pThis, pObject, pAttributes, Access, Name, pHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandle([NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandle>((IntPtr)(lpVtbl[32]))(pThis, NTHandle, riid, ppvObj);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandleByName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandleByName>((IntPtr)(lpVtbl[33]))(pThis, Name, Access, pNTHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int MakeResident([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_MakeResident>((IntPtr)(lpVtbl[34]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Evict([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Evict>((IntPtr)(lpVtbl[35]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateFence([NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateFence>((IntPtr)(lpVtbl[36]))(pThis, InitialValue, Flags, riid, ppFence);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDeviceRemovedReason()
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDeviceRemovedReason>((IntPtr)(lpVtbl[37]))(pThis);
            }
        }

        public void GetCopyableFootprints([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetCopyableFootprints>((IntPtr)(lpVtbl[38]))(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateQueryHeap([NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateQueryHeap>((IntPtr)(lpVtbl[39]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetStablePowerState([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetStablePowerState>((IntPtr)(lpVtbl[40]))(pThis, Enable);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandSignature([NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandSignature>((IntPtr)(lpVtbl[41]))(pThis, pDesc, pRootSignature, riid, ppvCommandSignature);
            }
        }

        public void GetResourceTiling([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetResourceTiling>((IntPtr)(lpVtbl[42]))(pThis, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        public LUID GetAdapterLuid()
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                LUID result;
                return *Marshal.GetDelegateForFunctionPointer<_GetAdapterLuid>((IntPtr)(lpVtbl[43]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineLibrary([NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineLibrary>((IntPtr)(lpVtbl[44]))(pThis, pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetEventOnMultipleFenceCompletion([NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetEventOnMultipleFenceCompletion>((IntPtr)(lpVtbl[45]))(pThis, ppFences, pFenceValues, NumFences, Flags, hEvent);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetResidencyPriority([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetResidencyPriority>((IntPtr)(lpVtbl[46]))(pThis, NumObjects, ppObjects, pPriorities);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineState([NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineState>((IntPtr)(lpVtbl[47]))(pThis, pDesc, riid, ppPipelineState);
            }
        }
    }

    public enum D3D12_RESIDENCY_FLAGS
    {
        D3D12_RESIDENCY_FLAG_NONE = 0,
        D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET = 0x1,
    }

    [Guid("81DADC15-2BAD-4392-93C5-101345C4AA98")]
    [NativeTypeName("struct ID3D12Device3 : ID3D12Device2")]
    [NativeInheritance("ID3D12Device2")]
    public unsafe partial struct ID3D12Device3
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Device3* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Device3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Device3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Device3* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Device3* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Device3* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Device3* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNodeCount(ID3D12Device3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandQueue(ID3D12Device3* pThis, [NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandAllocator(ID3D12Device3* pThis, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateGraphicsPipelineState(ID3D12Device3* pThis, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateComputePipelineState(ID3D12Device3* pThis, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList(ID3D12Device3* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12Device3* pThis, D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateDescriptorHeap(ID3D12Device3* pThis, [NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetDescriptorHandleIncrementSize(ID3D12Device3* pThis, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateRootSignature(ID3D12Device3* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateConstantBufferView(ID3D12Device3* pThis, [NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateShaderResourceView(ID3D12Device3* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateUnorderedAccessView(ID3D12Device3* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateRenderTargetView(ID3D12Device3* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateDepthStencilView(ID3D12Device3* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateSampler(ID3D12Device3* pThis, [NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptors(ID3D12Device3* pThis, [NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptorsSimple(ID3D12Device3* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo(ID3D12Device3* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_HEAP_PROPERTIES* _GetCustomHeapProperties(ID3D12Device3* pThis, D3D12_HEAP_PROPERTIES* _result, [NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource(ID3D12Device3* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap(ID3D12Device3* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePlacedResource(ID3D12Device3* pThis, [NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource(ID3D12Device3* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateSharedHandle(ID3D12Device3* pThis, [NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandle(ID3D12Device3* pThis, [NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandleByName(ID3D12Device3* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _MakeResident(ID3D12Device3* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Evict(ID3D12Device3* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateFence(ID3D12Device3* pThis, [NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDeviceRemovedReason(ID3D12Device3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetCopyableFootprints(ID3D12Device3* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateQueryHeap(ID3D12Device3* pThis, [NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetStablePowerState(ID3D12Device3* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandSignature(ID3D12Device3* pThis, [NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetResourceTiling(ID3D12Device3* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate LUID* _GetAdapterLuid(ID3D12Device3* pThis, LUID* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineLibrary(ID3D12Device3* pThis, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetEventOnMultipleFenceCompletion(ID3D12Device3* pThis, [NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetResidencyPriority(ID3D12Device3* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineState(ID3D12Device3* pThis, [NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromAddress(ID3D12Device3* pThis, [NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromFileMapping(ID3D12Device3* pThis, [NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnqueueMakeResident(ID3D12Device3* pThis, D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNodeCount()
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNodeCount>((IntPtr)(lpVtbl[7]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandQueue([NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandQueue>((IntPtr)(lpVtbl[8]))(pThis, pDesc, riid, ppCommandQueue);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandAllocator([In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandAllocator>((IntPtr)(lpVtbl[9]))(pThis, type, riid, ppCommandAllocator);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateGraphicsPipelineState([NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateGraphicsPipelineState>((IntPtr)(lpVtbl[10]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateComputePipelineState([NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateComputePipelineState>((IntPtr)(lpVtbl[11]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList>((IntPtr)(lpVtbl[12]))(pThis, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[13]))(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateDescriptorHeap([NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateDescriptorHeap>((IntPtr)(lpVtbl[14]))(pThis, pDescriptorHeapDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetDescriptorHandleIncrementSize([In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDescriptorHandleIncrementSize>((IntPtr)(lpVtbl[15]))(pThis, DescriptorHeapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateRootSignature([NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateRootSignature>((IntPtr)(lpVtbl[16]))(pThis, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
            }
        }

        public void CreateConstantBufferView([NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateConstantBufferView>((IntPtr)(lpVtbl[17]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CreateShaderResourceView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateShaderResourceView>((IntPtr)(lpVtbl[18]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateUnorderedAccessView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateUnorderedAccessView>((IntPtr)(lpVtbl[19]))(pThis, pResource, pCounterResource, pDesc, DestDescriptor);
            }
        }

        public void CreateRenderTargetView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateRenderTargetView>((IntPtr)(lpVtbl[20]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateDepthStencilView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateDepthStencilView>((IntPtr)(lpVtbl[21]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateSampler([NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateSampler>((IntPtr)(lpVtbl[22]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CopyDescriptors([NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptors>((IntPtr)(lpVtbl[23]))(pThis, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
            }
        }

        public void CopyDescriptorsSimple([NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptorsSimple>((IntPtr)(lpVtbl[24]))(pThis, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo([NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo>((IntPtr)(lpVtbl[25]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs);
            }
        }

        public D3D12_HEAP_PROPERTIES GetCustomHeapProperties([NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                D3D12_HEAP_PROPERTIES result;
                return *Marshal.GetDelegateForFunctionPointer<_GetCustomHeapProperties>((IntPtr)(lpVtbl[26]))(pThis, &result, nodeMask, heapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource>((IntPtr)(lpVtbl[27]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap>((IntPtr)(lpVtbl[28]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePlacedResource([NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePlacedResource>((IntPtr)(lpVtbl[29]))(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource>((IntPtr)(lpVtbl[30]))(pThis, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateSharedHandle([NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateSharedHandle>((IntPtr)(lpVtbl[31]))(pThis, pObject, pAttributes, Access, Name, pHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandle([NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandle>((IntPtr)(lpVtbl[32]))(pThis, NTHandle, riid, ppvObj);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandleByName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandleByName>((IntPtr)(lpVtbl[33]))(pThis, Name, Access, pNTHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int MakeResident([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_MakeResident>((IntPtr)(lpVtbl[34]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Evict([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Evict>((IntPtr)(lpVtbl[35]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateFence([NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateFence>((IntPtr)(lpVtbl[36]))(pThis, InitialValue, Flags, riid, ppFence);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDeviceRemovedReason()
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDeviceRemovedReason>((IntPtr)(lpVtbl[37]))(pThis);
            }
        }

        public void GetCopyableFootprints([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetCopyableFootprints>((IntPtr)(lpVtbl[38]))(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateQueryHeap([NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateQueryHeap>((IntPtr)(lpVtbl[39]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetStablePowerState([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetStablePowerState>((IntPtr)(lpVtbl[40]))(pThis, Enable);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandSignature([NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandSignature>((IntPtr)(lpVtbl[41]))(pThis, pDesc, pRootSignature, riid, ppvCommandSignature);
            }
        }

        public void GetResourceTiling([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetResourceTiling>((IntPtr)(lpVtbl[42]))(pThis, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        public LUID GetAdapterLuid()
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                LUID result;
                return *Marshal.GetDelegateForFunctionPointer<_GetAdapterLuid>((IntPtr)(lpVtbl[43]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineLibrary([NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineLibrary>((IntPtr)(lpVtbl[44]))(pThis, pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetEventOnMultipleFenceCompletion([NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetEventOnMultipleFenceCompletion>((IntPtr)(lpVtbl[45]))(pThis, ppFences, pFenceValues, NumFences, Flags, hEvent);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetResidencyPriority([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetResidencyPriority>((IntPtr)(lpVtbl[46]))(pThis, NumObjects, ppObjects, pPriorities);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineState([NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineState>((IntPtr)(lpVtbl[47]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromAddress([NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromAddress>((IntPtr)(lpVtbl[48]))(pThis, pAddress, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromFileMapping([NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromFileMapping>((IntPtr)(lpVtbl[49]))(pThis, hFileMapping, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnqueueMakeResident(D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal)
        {
            fixed (ID3D12Device3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnqueueMakeResident>((IntPtr)(lpVtbl[50]))(pThis, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
            }
        }
    }

    public enum D3D12_COMMAND_LIST_FLAGS
    {
        D3D12_COMMAND_LIST_FLAG_NONE = 0,
    }

    public enum D3D12_COMMAND_POOL_FLAGS
    {
        D3D12_COMMAND_POOL_FLAG_NONE = 0,
    }

    public enum D3D12_COMMAND_RECORDER_FLAGS
    {
        D3D12_COMMAND_RECORDER_FLAG_NONE = 0,
    }

    public enum D3D12_PROTECTED_SESSION_STATUS
    {
        D3D12_PROTECTED_SESSION_STATUS_OK = 0,
        D3D12_PROTECTED_SESSION_STATUS_INVALID = 1,
    }

    [Guid("A1533D18-0AC1-4084-85B9-89A96116806B")]
    [NativeTypeName("struct ID3D12ProtectedSession : ID3D12DeviceChild")]
    [NativeInheritance("ID3D12DeviceChild")]
    public unsafe partial struct ID3D12ProtectedSession
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12ProtectedSession* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12ProtectedSession* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12ProtectedSession* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12ProtectedSession* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12ProtectedSession* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12ProtectedSession* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12ProtectedSession* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12ProtectedSession* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetStatusFence(ID3D12ProtectedSession* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_PROTECTED_SESSION_STATUS _GetSessionStatus(ID3D12ProtectedSession* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12ProtectedSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12ProtectedSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12ProtectedSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12ProtectedSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12ProtectedSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12ProtectedSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12ProtectedSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12ProtectedSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetStatusFence([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppFence)
        {
            fixed (ID3D12ProtectedSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetStatusFence>((IntPtr)(lpVtbl[8]))(pThis, riid, ppFence);
            }
        }

        public D3D12_PROTECTED_SESSION_STATUS GetSessionStatus()
        {
            fixed (ID3D12ProtectedSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetSessionStatus>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }
    }

    public enum D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS
    {
        D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE = 0,
        D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED = 0x1,
    }

    public partial struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS Support;
    }

    public enum D3D12_PROTECTED_RESOURCE_SESSION_FLAGS
    {
        D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE = 0,
    }

    public partial struct D3D12_PROTECTED_RESOURCE_SESSION_DESC
    {
        [NativeTypeName("UINT")]
        public uint NodeMask;

        public D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
    }

    [Guid("6CD696F4-F289-40CC-8091-5A6C0A099C3D")]
    [NativeTypeName("struct ID3D12ProtectedResourceSession : ID3D12ProtectedSession")]
    [NativeInheritance("ID3D12ProtectedSession")]
    public unsafe partial struct ID3D12ProtectedResourceSession
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12ProtectedResourceSession* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12ProtectedResourceSession* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12ProtectedResourceSession* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12ProtectedResourceSession* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12ProtectedResourceSession* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12ProtectedResourceSession* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12ProtectedResourceSession* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12ProtectedResourceSession* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetStatusFence(ID3D12ProtectedResourceSession* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_PROTECTED_SESSION_STATUS _GetSessionStatus(ID3D12ProtectedResourceSession* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_PROTECTED_RESOURCE_SESSION_DESC* _GetDesc(ID3D12ProtectedResourceSession* pThis, D3D12_PROTECTED_RESOURCE_SESSION_DESC* _result);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12ProtectedResourceSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12ProtectedResourceSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12ProtectedResourceSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12ProtectedResourceSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12ProtectedResourceSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12ProtectedResourceSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12ProtectedResourceSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12ProtectedResourceSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetStatusFence([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppFence)
        {
            fixed (ID3D12ProtectedResourceSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetStatusFence>((IntPtr)(lpVtbl[8]))(pThis, riid, ppFence);
            }
        }

        public D3D12_PROTECTED_SESSION_STATUS GetSessionStatus()
        {
            fixed (ID3D12ProtectedResourceSession* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetSessionStatus>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        public D3D12_PROTECTED_RESOURCE_SESSION_DESC GetDesc()
        {
            fixed (ID3D12ProtectedResourceSession* pThis = &this)
            {
                D3D12_PROTECTED_RESOURCE_SESSION_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[10]))(pThis, &result);
            }
        }
    }

    [Guid("E865DF17-A9EE-46F9-A463-3098315AA2E5")]
    [NativeTypeName("struct ID3D12Device4 : ID3D12Device3")]
    [NativeInheritance("ID3D12Device3")]
    public unsafe partial struct ID3D12Device4
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Device4* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Device4* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Device4* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Device4* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Device4* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Device4* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Device4* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNodeCount(ID3D12Device4* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandQueue(ID3D12Device4* pThis, [NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandAllocator(ID3D12Device4* pThis, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateGraphicsPipelineState(ID3D12Device4* pThis, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateComputePipelineState(ID3D12Device4* pThis, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList(ID3D12Device4* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12Device4* pThis, D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateDescriptorHeap(ID3D12Device4* pThis, [NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetDescriptorHandleIncrementSize(ID3D12Device4* pThis, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateRootSignature(ID3D12Device4* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateConstantBufferView(ID3D12Device4* pThis, [NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateShaderResourceView(ID3D12Device4* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateUnorderedAccessView(ID3D12Device4* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateRenderTargetView(ID3D12Device4* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateDepthStencilView(ID3D12Device4* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateSampler(ID3D12Device4* pThis, [NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptors(ID3D12Device4* pThis, [NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptorsSimple(ID3D12Device4* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo(ID3D12Device4* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_HEAP_PROPERTIES* _GetCustomHeapProperties(ID3D12Device4* pThis, D3D12_HEAP_PROPERTIES* _result, [NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource(ID3D12Device4* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap(ID3D12Device4* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePlacedResource(ID3D12Device4* pThis, [NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource(ID3D12Device4* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateSharedHandle(ID3D12Device4* pThis, [NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandle(ID3D12Device4* pThis, [NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandleByName(ID3D12Device4* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _MakeResident(ID3D12Device4* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Evict(ID3D12Device4* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateFence(ID3D12Device4* pThis, [NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDeviceRemovedReason(ID3D12Device4* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetCopyableFootprints(ID3D12Device4* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateQueryHeap(ID3D12Device4* pThis, [NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetStablePowerState(ID3D12Device4* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandSignature(ID3D12Device4* pThis, [NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetResourceTiling(ID3D12Device4* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate LUID* _GetAdapterLuid(ID3D12Device4* pThis, LUID* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineLibrary(ID3D12Device4* pThis, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetEventOnMultipleFenceCompletion(ID3D12Device4* pThis, [NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetResidencyPriority(ID3D12Device4* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineState(ID3D12Device4* pThis, [NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromAddress(ID3D12Device4* pThis, [NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromFileMapping(ID3D12Device4* pThis, [NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnqueueMakeResident(ID3D12Device4* pThis, D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList1(ID3D12Device4* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [In] D3D12_COMMAND_LIST_FLAGS flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateProtectedResourceSession(ID3D12Device4* pThis, [NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource1(ID3D12Device4* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap1(ID3D12Device4* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource1(ID3D12Device4* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo1(ID3D12Device4* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNodeCount()
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNodeCount>((IntPtr)(lpVtbl[7]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandQueue([NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandQueue>((IntPtr)(lpVtbl[8]))(pThis, pDesc, riid, ppCommandQueue);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandAllocator([In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandAllocator>((IntPtr)(lpVtbl[9]))(pThis, type, riid, ppCommandAllocator);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateGraphicsPipelineState([NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateGraphicsPipelineState>((IntPtr)(lpVtbl[10]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateComputePipelineState([NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateComputePipelineState>((IntPtr)(lpVtbl[11]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList>((IntPtr)(lpVtbl[12]))(pThis, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[13]))(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateDescriptorHeap([NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateDescriptorHeap>((IntPtr)(lpVtbl[14]))(pThis, pDescriptorHeapDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetDescriptorHandleIncrementSize([In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDescriptorHandleIncrementSize>((IntPtr)(lpVtbl[15]))(pThis, DescriptorHeapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateRootSignature([NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateRootSignature>((IntPtr)(lpVtbl[16]))(pThis, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
            }
        }

        public void CreateConstantBufferView([NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateConstantBufferView>((IntPtr)(lpVtbl[17]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CreateShaderResourceView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateShaderResourceView>((IntPtr)(lpVtbl[18]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateUnorderedAccessView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateUnorderedAccessView>((IntPtr)(lpVtbl[19]))(pThis, pResource, pCounterResource, pDesc, DestDescriptor);
            }
        }

        public void CreateRenderTargetView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateRenderTargetView>((IntPtr)(lpVtbl[20]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateDepthStencilView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateDepthStencilView>((IntPtr)(lpVtbl[21]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateSampler([NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateSampler>((IntPtr)(lpVtbl[22]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CopyDescriptors([NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptors>((IntPtr)(lpVtbl[23]))(pThis, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
            }
        }

        public void CopyDescriptorsSimple([NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptorsSimple>((IntPtr)(lpVtbl[24]))(pThis, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo([NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo>((IntPtr)(lpVtbl[25]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs);
            }
        }

        public D3D12_HEAP_PROPERTIES GetCustomHeapProperties([NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                D3D12_HEAP_PROPERTIES result;
                return *Marshal.GetDelegateForFunctionPointer<_GetCustomHeapProperties>((IntPtr)(lpVtbl[26]))(pThis, &result, nodeMask, heapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource>((IntPtr)(lpVtbl[27]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap>((IntPtr)(lpVtbl[28]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePlacedResource([NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePlacedResource>((IntPtr)(lpVtbl[29]))(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource>((IntPtr)(lpVtbl[30]))(pThis, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateSharedHandle([NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateSharedHandle>((IntPtr)(lpVtbl[31]))(pThis, pObject, pAttributes, Access, Name, pHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandle([NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandle>((IntPtr)(lpVtbl[32]))(pThis, NTHandle, riid, ppvObj);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandleByName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandleByName>((IntPtr)(lpVtbl[33]))(pThis, Name, Access, pNTHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int MakeResident([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_MakeResident>((IntPtr)(lpVtbl[34]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Evict([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Evict>((IntPtr)(lpVtbl[35]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateFence([NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateFence>((IntPtr)(lpVtbl[36]))(pThis, InitialValue, Flags, riid, ppFence);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDeviceRemovedReason()
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDeviceRemovedReason>((IntPtr)(lpVtbl[37]))(pThis);
            }
        }

        public void GetCopyableFootprints([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetCopyableFootprints>((IntPtr)(lpVtbl[38]))(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateQueryHeap([NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateQueryHeap>((IntPtr)(lpVtbl[39]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetStablePowerState([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetStablePowerState>((IntPtr)(lpVtbl[40]))(pThis, Enable);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandSignature([NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandSignature>((IntPtr)(lpVtbl[41]))(pThis, pDesc, pRootSignature, riid, ppvCommandSignature);
            }
        }

        public void GetResourceTiling([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetResourceTiling>((IntPtr)(lpVtbl[42]))(pThis, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        public LUID GetAdapterLuid()
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                LUID result;
                return *Marshal.GetDelegateForFunctionPointer<_GetAdapterLuid>((IntPtr)(lpVtbl[43]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineLibrary([NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineLibrary>((IntPtr)(lpVtbl[44]))(pThis, pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetEventOnMultipleFenceCompletion([NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetEventOnMultipleFenceCompletion>((IntPtr)(lpVtbl[45]))(pThis, ppFences, pFenceValues, NumFences, Flags, hEvent);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetResidencyPriority([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetResidencyPriority>((IntPtr)(lpVtbl[46]))(pThis, NumObjects, ppObjects, pPriorities);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineState([NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineState>((IntPtr)(lpVtbl[47]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromAddress([NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromAddress>((IntPtr)(lpVtbl[48]))(pThis, pAddress, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromFileMapping([NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromFileMapping>((IntPtr)(lpVtbl[49]))(pThis, hFileMapping, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnqueueMakeResident(D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnqueueMakeResident>((IntPtr)(lpVtbl[50]))(pThis, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList1([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [In] D3D12_COMMAND_LIST_FLAGS flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList1>((IntPtr)(lpVtbl[51]))(pThis, nodeMask, type, flags, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateProtectedResourceSession([NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateProtectedResourceSession>((IntPtr)(lpVtbl[52]))(pThis, pDesc, riid, ppSession);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource1([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource1>((IntPtr)(lpVtbl[53]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap1([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap1>((IntPtr)(lpVtbl[54]))(pThis, pDesc, pProtectedSession, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource1([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource1>((IntPtr)(lpVtbl[55]))(pThis, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo1([NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1)
        {
            fixed (ID3D12Device4* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo1>((IntPtr)(lpVtbl[56]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
            }
        }
    }

    public enum D3D12_LIFETIME_STATE
    {
        D3D12_LIFETIME_STATE_IN_USE = 0,
        D3D12_LIFETIME_STATE_NOT_IN_USE = (D3D12_LIFETIME_STATE_IN_USE + 1),
    }

    [Guid("E667AF9F-CD56-4F46-83CE-032E595D70A8")]
    [NativeTypeName("struct ID3D12LifetimeOwner : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12LifetimeOwner
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12LifetimeOwner* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12LifetimeOwner* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12LifetimeOwner* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _LifetimeStateUpdated(ID3D12LifetimeOwner* pThis, D3D12_LIFETIME_STATE NewState);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12LifetimeOwner* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12LifetimeOwner* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12LifetimeOwner* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        public void LifetimeStateUpdated(D3D12_LIFETIME_STATE NewState)
        {
            fixed (ID3D12LifetimeOwner* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_LifetimeStateUpdated>((IntPtr)(lpVtbl[3]))(pThis, NewState);
            }
        }
    }

    [Guid("F1DF64B6-57FD-49CD-8807-C0EB88B45C8F")]
    [NativeTypeName("struct ID3D12SwapChainAssistant : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12SwapChainAssistant
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12SwapChainAssistant* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12SwapChainAssistant* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12SwapChainAssistant* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate LUID* _GetLUID(ID3D12SwapChainAssistant* pThis, LUID* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetSwapChainObject(ID3D12SwapChainAssistant* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppv);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetCurrentResourceAndCommandQueue(ID3D12SwapChainAssistant* pThis, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr] void** ppvResource, [NativeTypeName("const IID &")] [Const] Guid* riidQueue, [NativeTypeName("void **")] [ComOutPtr] void** ppvQueue);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _InsertImplicitSync(ID3D12SwapChainAssistant* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12SwapChainAssistant* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12SwapChainAssistant* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12SwapChainAssistant* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        public LUID GetLUID()
        {
            fixed (ID3D12SwapChainAssistant* pThis = &this)
            {
                LUID result;
                return *Marshal.GetDelegateForFunctionPointer<_GetLUID>((IntPtr)(lpVtbl[3]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetSwapChainObject([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppv)
        {
            fixed (ID3D12SwapChainAssistant* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetSwapChainObject>((IntPtr)(lpVtbl[4]))(pThis, riid, ppv);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetCurrentResourceAndCommandQueue([NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr] void** ppvResource, [NativeTypeName("const IID &")] [Const] Guid* riidQueue, [NativeTypeName("void **")] [ComOutPtr] void** ppvQueue)
        {
            fixed (ID3D12SwapChainAssistant* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetCurrentResourceAndCommandQueue>((IntPtr)(lpVtbl[5]))(pThis, riidResource, ppvResource, riidQueue, ppvQueue);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int InsertImplicitSync()
        {
            fixed (ID3D12SwapChainAssistant* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_InsertImplicitSync>((IntPtr)(lpVtbl[6]))(pThis);
            }
        }
    }

    [Guid("3FD03D36-4EB1-424A-A582-494ECB8BA813")]
    [NativeTypeName("struct ID3D12LifetimeTracker : ID3D12DeviceChild")]
    [NativeInheritance("ID3D12DeviceChild")]
    public unsafe partial struct ID3D12LifetimeTracker
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12LifetimeTracker* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12LifetimeTracker* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12LifetimeTracker* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12LifetimeTracker* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12LifetimeTracker* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12LifetimeTracker* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12LifetimeTracker* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12LifetimeTracker* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _DestroyOwnedObject(ID3D12LifetimeTracker* pThis, [NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12LifetimeTracker* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12LifetimeTracker* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12LifetimeTracker* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12LifetimeTracker* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12LifetimeTracker* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12LifetimeTracker* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12LifetimeTracker* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12LifetimeTracker* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int DestroyOwnedObject([NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject)
        {
            fixed (ID3D12LifetimeTracker* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_DestroyOwnedObject>((IntPtr)(lpVtbl[8]))(pThis, pObject);
            }
        }
    }

    public enum D3D12_META_COMMAND_PARAMETER_TYPE
    {
        D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT = 0,
        D3D12_META_COMMAND_PARAMETER_TYPE_UINT64 = 1,
        D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS = 2,
        D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 3,
        D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV = 4,
    }

    public enum D3D12_META_COMMAND_PARAMETER_FLAGS
    {
        D3D12_META_COMMAND_PARAMETER_FLAG_INPUT = 0x1,
        D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT = 0x2,
    }

    public enum D3D12_META_COMMAND_PARAMETER_STAGE
    {
        D3D12_META_COMMAND_PARAMETER_STAGE_CREATION = 0,
        D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1,
        D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION = 2,
    }

    public unsafe partial struct D3D12_META_COMMAND_PARAMETER_DESC
    {
        [NativeTypeName("LPCWSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)]
        public ushort* Name;

        public D3D12_META_COMMAND_PARAMETER_TYPE Type;

        public D3D12_META_COMMAND_PARAMETER_FLAGS Flags;

        public D3D12_RESOURCE_STATES RequiredResourceState;

        [NativeTypeName("UINT")]
        public uint StructureOffset;
    }

    public enum D3D12_GRAPHICS_STATES
    {
        D3D12_GRAPHICS_STATE_NONE = 0,
        D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS = (1 << 0),
        D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER = (1 << 1),
        D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY = (1 << 2),
        D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP = (1 << 3),
        D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE = (1 << 4),
        D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE = (1 << 5),
        D3D12_GRAPHICS_STATE_RS_VIEWPORTS = (1 << 6),
        D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS = (1 << 7),
        D3D12_GRAPHICS_STATE_PREDICATION = (1 << 8),
        D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS = (1 << 9),
        D3D12_GRAPHICS_STATE_OM_STENCIL_REF = (1 << 10),
        D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR = (1 << 11),
        D3D12_GRAPHICS_STATE_PIPELINE_STATE = (1 << 12),
        D3D12_GRAPHICS_STATE_SO_TARGETS = (1 << 13),
        D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS = (1 << 14),
        D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS = (1 << 15),
        D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK = (1 << 16),
    }

    public unsafe partial struct D3D12_META_COMMAND_DESC
    {
        [NativeTypeName("GUID")]
        public Guid Id;

        [NativeTypeName("LPCWSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)]
        public ushort* Name;

        public D3D12_GRAPHICS_STATES InitializationDirtyState;

        public D3D12_GRAPHICS_STATES ExecutionDirtyState;
    }

    [Guid("47016943-FCA8-4594-93EA-AF258B55346D")]
    [NativeTypeName("struct ID3D12StateObject : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12StateObject
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12StateObject* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12StateObject* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12StateObject* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12StateObject* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12StateObject* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12StateObject* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12StateObject* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12StateObject* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12StateObject* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12StateObject* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12StateObject* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12StateObject* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12StateObject* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12StateObject* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12StateObject* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12StateObject* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }
    }

    [Guid("DE5FA827-9BF9-4F26-89FF-D7F56FDE3860")]
    [NativeTypeName("struct ID3D12StateObjectProperties : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12StateObjectProperties
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12StateObjectProperties* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12StateObjectProperties* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12StateObjectProperties* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("void *")]
        public delegate void* _GetShaderIdentifier(ID3D12StateObjectProperties* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pExportName);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetShaderStackSize(ID3D12StateObjectProperties* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pExportName);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetPipelineStackSize(ID3D12StateObjectProperties* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPipelineStackSize(ID3D12StateObjectProperties* pThis, [NativeTypeName("UINT64")] ulong PipelineStackSizeInBytes);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12StateObjectProperties* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12StateObjectProperties* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12StateObjectProperties* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("void *")]
        public void* GetShaderIdentifier([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pExportName)
        {
            fixed (ID3D12StateObjectProperties* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetShaderIdentifier>((IntPtr)(lpVtbl[3]))(pThis, pExportName);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetShaderStackSize([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* pExportName)
        {
            fixed (ID3D12StateObjectProperties* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetShaderStackSize>((IntPtr)(lpVtbl[4]))(pThis, pExportName);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetPipelineStackSize()
        {
            fixed (ID3D12StateObjectProperties* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPipelineStackSize>((IntPtr)(lpVtbl[5]))(pThis);
            }
        }

        public void SetPipelineStackSize([NativeTypeName("UINT64")] ulong PipelineStackSizeInBytes)
        {
            fixed (ID3D12StateObjectProperties* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPipelineStackSize>((IntPtr)(lpVtbl[6]))(pThis, PipelineStackSizeInBytes);
            }
        }
    }

    public enum D3D12_STATE_SUBOBJECT_TYPE
    {
        D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG = 0,
        D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE = 1,
        D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE = 2,
        D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK = 3,
        D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY = 5,
        D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION = 6,
        D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 7,
        D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION = 8,
        D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG = 9,
        D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG = 10,
        D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP = 11,
        D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1 = 12,
        D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID = (D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG1 + 1),
    }

    public unsafe partial struct D3D12_STATE_SUBOBJECT
    {
        public D3D12_STATE_SUBOBJECT_TYPE Type;

        [NativeTypeName("const void *")]
        [Const]
        public void* pDesc;
    }

    public enum D3D12_STATE_OBJECT_FLAGS
    {
        D3D12_STATE_OBJECT_FLAG_NONE = 0,
        D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS = 0x1,
        D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS = 0x2,
        D3D12_STATE_OBJECT_FLAG_ALLOW_STATE_OBJECT_ADDITIONS = 0x4,
    }

    public partial struct D3D12_STATE_OBJECT_CONFIG
    {
        public D3D12_STATE_OBJECT_FLAGS Flags;
    }

    public unsafe partial struct D3D12_GLOBAL_ROOT_SIGNATURE
    {
        [NativeTypeName("ID3D12RootSignature *")]
        public ID3D12RootSignature* pGlobalRootSignature;
    }

    public unsafe partial struct D3D12_LOCAL_ROOT_SIGNATURE
    {
        [NativeTypeName("ID3D12RootSignature *")]
        public ID3D12RootSignature* pLocalRootSignature;
    }

    public partial struct D3D12_NODE_MASK
    {
        [NativeTypeName("UINT")]
        public uint NodeMask;
    }

    public enum D3D12_EXPORT_FLAGS
    {
        D3D12_EXPORT_FLAG_NONE = 0,
    }

    public unsafe partial struct D3D12_EXPORT_DESC
    {
        [NativeTypeName("LPCWSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)]
        public ushort* Name;

        [NativeTypeName("LPCWSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)]
        public ushort* ExportToRename;

        public D3D12_EXPORT_FLAGS Flags;
    }

    public unsafe partial struct D3D12_DXIL_LIBRARY_DESC
    {
        public D3D12_SHADER_BYTECODE DXILLibrary;

        [NativeTypeName("UINT")]
        public uint NumExports;

        [NativeTypeName("D3D12_EXPORT_DESC *")]
        public D3D12_EXPORT_DESC* pExports;
    }

    public unsafe partial struct D3D12_EXISTING_COLLECTION_DESC
    {
        [NativeTypeName("ID3D12StateObject *")]
        public ID3D12StateObject* pExistingCollection;

        [NativeTypeName("UINT")]
        public uint NumExports;

        [NativeTypeName("D3D12_EXPORT_DESC *")]
        public D3D12_EXPORT_DESC* pExports;
    }

    public unsafe partial struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION
    {
        [NativeTypeName("const D3D12_STATE_SUBOBJECT *")]
        [Const]
        public D3D12_STATE_SUBOBJECT* pSubobjectToAssociate;

        [NativeTypeName("UINT")]
        public uint NumExports;

        [NativeTypeName("LPCWSTR *")]
        public ushort** pExports;
    }

    public unsafe partial struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION
    {
        [NativeTypeName("LPCWSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)]
        public ushort* SubobjectToAssociate;

        [NativeTypeName("UINT")]
        public uint NumExports;

        [NativeTypeName("LPCWSTR *")]
        public ushort** pExports;
    }

    public enum D3D12_HIT_GROUP_TYPE
    {
        D3D12_HIT_GROUP_TYPE_TRIANGLES = 0,
        D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE = 0x1,
    }

    public unsafe partial struct D3D12_HIT_GROUP_DESC
    {
        [NativeTypeName("LPCWSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)]
        public ushort* HitGroupExport;

        public D3D12_HIT_GROUP_TYPE Type;

        [NativeTypeName("LPCWSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)]
        public ushort* AnyHitShaderImport;

        [NativeTypeName("LPCWSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)]
        public ushort* ClosestHitShaderImport;

        [NativeTypeName("LPCWSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)]
        public ushort* IntersectionShaderImport;
    }

    public partial struct D3D12_RAYTRACING_SHADER_CONFIG
    {
        [NativeTypeName("UINT")]
        public uint MaxPayloadSizeInBytes;

        [NativeTypeName("UINT")]
        public uint MaxAttributeSizeInBytes;
    }

    public partial struct D3D12_RAYTRACING_PIPELINE_CONFIG
    {
        [NativeTypeName("UINT")]
        public uint MaxTraceRecursionDepth;
    }

    public enum D3D12_RAYTRACING_PIPELINE_FLAGS
    {
        D3D12_RAYTRACING_PIPELINE_FLAG_NONE = 0,
        D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_TRIANGLES = 0x100,
        D3D12_RAYTRACING_PIPELINE_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 0x200,
    }

    public partial struct D3D12_RAYTRACING_PIPELINE_CONFIG1
    {
        [NativeTypeName("UINT")]
        public uint MaxTraceRecursionDepth;

        public D3D12_RAYTRACING_PIPELINE_FLAGS Flags;
    }

    public enum D3D12_STATE_OBJECT_TYPE
    {
        D3D12_STATE_OBJECT_TYPE_COLLECTION = 0,
        D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE = 3,
    }

    public unsafe partial struct D3D12_STATE_OBJECT_DESC
    {
        public D3D12_STATE_OBJECT_TYPE Type;

        [NativeTypeName("UINT")]
        public uint NumSubobjects;

        [NativeTypeName("const D3D12_STATE_SUBOBJECT *")]
        [Const]
        public D3D12_STATE_SUBOBJECT* pSubobjects;
    }

    public enum D3D12_RAYTRACING_GEOMETRY_FLAGS
    {
        D3D12_RAYTRACING_GEOMETRY_FLAG_NONE = 0,
        D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE = 0x1,
        D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION = 0x2,
    }

    public enum D3D12_RAYTRACING_GEOMETRY_TYPE
    {
        D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES = 0,
        D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS = (D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES + 1),
    }

    public enum D3D12_RAYTRACING_INSTANCE_FLAGS
    {
        D3D12_RAYTRACING_INSTANCE_FLAG_NONE = 0,
        D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE = 0x1,
        D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE = 0x2,
        D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE = 0x4,
        D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE = 0x8,
    }

    public partial struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong StartAddress;

        [NativeTypeName("UINT64")]
        public ulong StrideInBytes;
    }

    public partial struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong StartAddress;

        [NativeTypeName("UINT64")]
        public ulong SizeInBytes;
    }

    public partial struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong StartAddress;

        [NativeTypeName("UINT64")]
        public ulong SizeInBytes;

        [NativeTypeName("UINT64")]
        public ulong StrideInBytes;
    }

    public partial struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong Transform3x4;

        public DXGI_FORMAT IndexFormat;

        public DXGI_FORMAT VertexFormat;

        [NativeTypeName("UINT")]
        public uint IndexCount;

        [NativeTypeName("UINT")]
        public uint VertexCount;

        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong IndexBuffer;

        public D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE VertexBuffer;
    }

    public partial struct D3D12_RAYTRACING_AABB
    {
        [NativeTypeName("FLOAT")]
        public float MinX;

        [NativeTypeName("FLOAT")]
        public float MinY;

        [NativeTypeName("FLOAT")]
        public float MinZ;

        [NativeTypeName("FLOAT")]
        public float MaxX;

        [NativeTypeName("FLOAT")]
        public float MaxY;

        [NativeTypeName("FLOAT")]
        public float MaxZ;
    }

    public partial struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC
    {
        [NativeTypeName("UINT64")]
        public ulong AABBCount;

        public D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE AABBs;
    }

    public enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS
    {
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE = 0,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE = 0x1,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION = 0x2,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE = 0x4,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD = 0x8,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY = 0x10,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE = 0x20,
    }

    public enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE
    {
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE = 0,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT = 0x1,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS = 0x2,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE = 0x3,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE = 0x4,
    }

    public enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE
    {
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL = 0,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL = 0x1,
    }

    public enum D3D12_ELEMENTS_LAYOUT
    {
        D3D12_ELEMENTS_LAYOUT_ARRAY = 0,
        D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS = 0x1,
    }

    public enum D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE
    {
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE = 0,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION = 0x1,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION = 0x2,
        D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE = 0x3,
    }

    public partial struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong DestBuffer;

        public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE InfoType;
    }

    public partial struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC
    {
        [NativeTypeName("UINT64")]
        public ulong CompactedSizeInBytes;
    }

    public partial struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC
    {
        [NativeTypeName("UINT64")]
        public ulong DecodedSizeInBytes;
    }

    public partial struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER
    {
        public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;

        [NativeTypeName("UINT")]
        public uint NumDescs;
    }

    public partial struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC
    {
        [NativeTypeName("UINT64")]
        public ulong SerializedSizeInBytes;

        [NativeTypeName("UINT64")]
        public ulong NumBottomLevelAccelerationStructurePointers;
    }

    public unsafe partial struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER
    {
        [NativeTypeName("GUID")]
        public Guid DriverOpaqueGUID;

        [NativeTypeName("BYTE [16]")]
        public fixed byte DriverOpaqueVersioningData[16];
    }

    public enum D3D12_SERIALIZED_DATA_TYPE
    {
        D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE = 0,
    }

    public enum D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS
    {
        D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE = 0,
        D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE = 0x1,
        D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED = 0x2,
        D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION = 0x3,
        D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE = 0x4,
    }

    public partial struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER
    {
        public D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER DriverMatchingIdentifier;

        [NativeTypeName("UINT64")]
        public ulong SerializedSizeInBytesIncludingHeader;

        [NativeTypeName("UINT64")]
        public ulong DeserializedSizeInBytes;

        [NativeTypeName("UINT64")]
        public ulong NumBottomLevelAccelerationStructurePointersAfterHeader;
    }

    public partial struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC
    {
        [NativeTypeName("UINT64")]
        public ulong CurrentSizeInBytes;
    }

    public unsafe partial struct D3D12_RAYTRACING_INSTANCE_DESC
    {
        [NativeTypeName("FLOAT [3][4]")]
        public fixed float Transform[3 * 4];

        public uint _bitfield1;

        [NativeTypeName("UINT : 24")]
        public uint InstanceID
        {
            get
            {
                return _bitfield1 & 0xFFFFFFu;
            }

            set
            {
                _bitfield1 = (_bitfield1 & ~0xFFFFFFu) | (value & 0xFFFFFFu);
            }
        }

        [NativeTypeName("UINT : 8")]
        public uint InstanceMask
        {
            get
            {
                return (_bitfield1 >> 24) & 0xFFu;
            }

            set
            {
                _bitfield1 = (_bitfield1 & ~(0xFFu << 24)) | ((value & 0xFFu) << 24);
            }
        }

        public uint _bitfield2;

        [NativeTypeName("UINT : 24")]
        public uint InstanceContributionToHitGroupIndex
        {
            get
            {
                return _bitfield2 & 0xFFFFFFu;
            }

            set
            {
                _bitfield2 = (_bitfield2 & ~0xFFFFFFu) | (value & 0xFFFFFFu);
            }
        }

        [NativeTypeName("UINT : 8")]
        public uint Flags
        {
            get
            {
                return (_bitfield2 >> 24) & 0xFFu;
            }

            set
            {
                _bitfield2 = (_bitfield2 & ~(0xFFu << 24)) | ((value & 0xFFu) << 24);
            }
        }

        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong AccelerationStructure;
    }

    public partial struct D3D12_RAYTRACING_GEOMETRY_DESC
    {
        public D3D12_RAYTRACING_GEOMETRY_TYPE Type;

        public D3D12_RAYTRACING_GEOMETRY_FLAGS Flags;

        [NativeTypeName("D3D12_RAYTRACING_GEOMETRY_DESC::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:12484:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC Triangles;

            [FieldOffset(0)]
            public D3D12_RAYTRACING_GEOMETRY_AABBS_DESC AABBs;
        }
    }

    public unsafe partial struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS
    {
        public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;

        public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS Flags;

        [NativeTypeName("UINT")]
        public uint NumDescs;

        public D3D12_ELEMENTS_LAYOUT DescsLayout;

        [NativeTypeName("D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:12497:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public unsafe partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
            public ulong InstanceDescs;

            [FieldOffset(0)]
            [NativeTypeName("const D3D12_RAYTRACING_GEOMETRY_DESC *")]
            [Const]
            public D3D12_RAYTRACING_GEOMETRY_DESC* pGeometryDescs;

            [FieldOffset(0)]
            [NativeTypeName("const D3D12_RAYTRACING_GEOMETRY_DESC *const *")]
            [Const]
            public D3D12_RAYTRACING_GEOMETRY_DESC** ppGeometryDescs;
        }
    }

    public partial struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong DestAccelerationStructureData;

        public D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS Inputs;

        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong SourceAccelerationStructureData;

        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong ScratchAccelerationStructureData;
    }

    public partial struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO
    {
        [NativeTypeName("UINT64")]
        public ulong ResultDataMaxSizeInBytes;

        [NativeTypeName("UINT64")]
        public ulong ScratchDataSizeInBytes;

        [NativeTypeName("UINT64")]
        public ulong UpdateScratchDataSizeInBytes;
    }

    public enum D3D12_RAY_FLAGS
    {
        D3D12_RAY_FLAG_NONE = 0,
        D3D12_RAY_FLAG_FORCE_OPAQUE = 0x1,
        D3D12_RAY_FLAG_FORCE_NON_OPAQUE = 0x2,
        D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH = 0x4,
        D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER = 0x8,
        D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES = 0x10,
        D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES = 0x20,
        D3D12_RAY_FLAG_CULL_OPAQUE = 0x40,
        D3D12_RAY_FLAG_CULL_NON_OPAQUE = 0x80,
        D3D12_RAY_FLAG_SKIP_TRIANGLES = 0x100,
        D3D12_RAY_FLAG_SKIP_PROCEDURAL_PRIMITIVES = 0x200,
    }

    public enum D3D12_HIT_KIND
    {
        D3D12_HIT_KIND_TRIANGLE_FRONT_FACE = 0xfe,
        D3D12_HIT_KIND_TRIANGLE_BACK_FACE = 0xff,
    }

    [Guid("8B4F173B-2FEA-4B80-8F58-4307191AB95D")]
    [NativeTypeName("struct ID3D12Device5 : ID3D12Device4")]
    [NativeInheritance("ID3D12Device4")]
    public unsafe partial struct ID3D12Device5
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Device5* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Device5* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Device5* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Device5* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Device5* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Device5* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Device5* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNodeCount(ID3D12Device5* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandQueue(ID3D12Device5* pThis, [NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandAllocator(ID3D12Device5* pThis, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateGraphicsPipelineState(ID3D12Device5* pThis, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateComputePipelineState(ID3D12Device5* pThis, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList(ID3D12Device5* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12Device5* pThis, D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateDescriptorHeap(ID3D12Device5* pThis, [NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetDescriptorHandleIncrementSize(ID3D12Device5* pThis, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateRootSignature(ID3D12Device5* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateConstantBufferView(ID3D12Device5* pThis, [NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateShaderResourceView(ID3D12Device5* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateUnorderedAccessView(ID3D12Device5* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateRenderTargetView(ID3D12Device5* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateDepthStencilView(ID3D12Device5* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateSampler(ID3D12Device5* pThis, [NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptors(ID3D12Device5* pThis, [NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptorsSimple(ID3D12Device5* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo(ID3D12Device5* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_HEAP_PROPERTIES* _GetCustomHeapProperties(ID3D12Device5* pThis, D3D12_HEAP_PROPERTIES* _result, [NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource(ID3D12Device5* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap(ID3D12Device5* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePlacedResource(ID3D12Device5* pThis, [NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource(ID3D12Device5* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateSharedHandle(ID3D12Device5* pThis, [NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandle(ID3D12Device5* pThis, [NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandleByName(ID3D12Device5* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _MakeResident(ID3D12Device5* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Evict(ID3D12Device5* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateFence(ID3D12Device5* pThis, [NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDeviceRemovedReason(ID3D12Device5* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetCopyableFootprints(ID3D12Device5* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateQueryHeap(ID3D12Device5* pThis, [NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetStablePowerState(ID3D12Device5* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandSignature(ID3D12Device5* pThis, [NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetResourceTiling(ID3D12Device5* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate LUID* _GetAdapterLuid(ID3D12Device5* pThis, LUID* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineLibrary(ID3D12Device5* pThis, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetEventOnMultipleFenceCompletion(ID3D12Device5* pThis, [NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetResidencyPriority(ID3D12Device5* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineState(ID3D12Device5* pThis, [NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromAddress(ID3D12Device5* pThis, [NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromFileMapping(ID3D12Device5* pThis, [NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnqueueMakeResident(ID3D12Device5* pThis, D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList1(ID3D12Device5* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [In] D3D12_COMMAND_LIST_FLAGS flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateProtectedResourceSession(ID3D12Device5* pThis, [NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource1(ID3D12Device5* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap1(ID3D12Device5* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource1(ID3D12Device5* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo1(ID3D12Device5* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateLifetimeTracker(ID3D12Device5* pThis, [NativeTypeName("ID3D12LifetimeOwner *")] [In] ID3D12LifetimeOwner* pOwner, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvTracker);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RemoveDevice(ID3D12Device5* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnumerateMetaCommands(ID3D12Device5* pThis, [NativeTypeName("UINT *")] [In][Out] uint* pNumMetaCommands, [NativeTypeName("D3D12_META_COMMAND_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out][Optional] D3D12_META_COMMAND_DESC* pDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnumerateMetaCommandParameters(ID3D12Device5* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [In] D3D12_META_COMMAND_PARAMETER_STAGE Stage, [NativeTypeName("UINT *")] [Out][Optional] uint* pTotalStructureSizeInBytes, [NativeTypeName("UINT *")] [In][Out] uint* pParameterCount, [NativeTypeName("D3D12_META_COMMAND_PARAMETER_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][Out][Optional] D3D12_META_COMMAND_PARAMETER_DESC* pParameterDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateMetaCommand(ID3D12Device5* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [NativeTypeName("UINT")] [In] uint NodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] void* pCreationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr CreationParametersDataSizeInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppMetaCommand);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateStateObject(ID3D12Device5* pThis, [NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppStateObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetRaytracingAccelerationStructurePrebuildInfo(ID3D12Device5* pThis, [NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS* pDesc, [NativeTypeName("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO *")] [Out] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS _CheckDriverMatchingIdentifier(ID3D12Device5* pThis, [In] D3D12_SERIALIZED_DATA_TYPE SerializedDataType, [NativeTypeName("const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER *")] [Const] [In] D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER* pIdentifierToCheck);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNodeCount()
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNodeCount>((IntPtr)(lpVtbl[7]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandQueue([NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandQueue>((IntPtr)(lpVtbl[8]))(pThis, pDesc, riid, ppCommandQueue);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandAllocator([In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandAllocator>((IntPtr)(lpVtbl[9]))(pThis, type, riid, ppCommandAllocator);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateGraphicsPipelineState([NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateGraphicsPipelineState>((IntPtr)(lpVtbl[10]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateComputePipelineState([NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateComputePipelineState>((IntPtr)(lpVtbl[11]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList>((IntPtr)(lpVtbl[12]))(pThis, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[13]))(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateDescriptorHeap([NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateDescriptorHeap>((IntPtr)(lpVtbl[14]))(pThis, pDescriptorHeapDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetDescriptorHandleIncrementSize([In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDescriptorHandleIncrementSize>((IntPtr)(lpVtbl[15]))(pThis, DescriptorHeapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateRootSignature([NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateRootSignature>((IntPtr)(lpVtbl[16]))(pThis, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
            }
        }

        public void CreateConstantBufferView([NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateConstantBufferView>((IntPtr)(lpVtbl[17]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CreateShaderResourceView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateShaderResourceView>((IntPtr)(lpVtbl[18]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateUnorderedAccessView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateUnorderedAccessView>((IntPtr)(lpVtbl[19]))(pThis, pResource, pCounterResource, pDesc, DestDescriptor);
            }
        }

        public void CreateRenderTargetView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateRenderTargetView>((IntPtr)(lpVtbl[20]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateDepthStencilView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateDepthStencilView>((IntPtr)(lpVtbl[21]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateSampler([NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateSampler>((IntPtr)(lpVtbl[22]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CopyDescriptors([NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptors>((IntPtr)(lpVtbl[23]))(pThis, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
            }
        }

        public void CopyDescriptorsSimple([NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptorsSimple>((IntPtr)(lpVtbl[24]))(pThis, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo([NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo>((IntPtr)(lpVtbl[25]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs);
            }
        }

        public D3D12_HEAP_PROPERTIES GetCustomHeapProperties([NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                D3D12_HEAP_PROPERTIES result;
                return *Marshal.GetDelegateForFunctionPointer<_GetCustomHeapProperties>((IntPtr)(lpVtbl[26]))(pThis, &result, nodeMask, heapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource>((IntPtr)(lpVtbl[27]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap>((IntPtr)(lpVtbl[28]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePlacedResource([NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePlacedResource>((IntPtr)(lpVtbl[29]))(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource>((IntPtr)(lpVtbl[30]))(pThis, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateSharedHandle([NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateSharedHandle>((IntPtr)(lpVtbl[31]))(pThis, pObject, pAttributes, Access, Name, pHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandle([NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandle>((IntPtr)(lpVtbl[32]))(pThis, NTHandle, riid, ppvObj);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandleByName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandleByName>((IntPtr)(lpVtbl[33]))(pThis, Name, Access, pNTHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int MakeResident([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_MakeResident>((IntPtr)(lpVtbl[34]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Evict([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Evict>((IntPtr)(lpVtbl[35]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateFence([NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateFence>((IntPtr)(lpVtbl[36]))(pThis, InitialValue, Flags, riid, ppFence);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDeviceRemovedReason()
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDeviceRemovedReason>((IntPtr)(lpVtbl[37]))(pThis);
            }
        }

        public void GetCopyableFootprints([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetCopyableFootprints>((IntPtr)(lpVtbl[38]))(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateQueryHeap([NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateQueryHeap>((IntPtr)(lpVtbl[39]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetStablePowerState([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetStablePowerState>((IntPtr)(lpVtbl[40]))(pThis, Enable);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandSignature([NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandSignature>((IntPtr)(lpVtbl[41]))(pThis, pDesc, pRootSignature, riid, ppvCommandSignature);
            }
        }

        public void GetResourceTiling([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetResourceTiling>((IntPtr)(lpVtbl[42]))(pThis, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        public LUID GetAdapterLuid()
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                LUID result;
                return *Marshal.GetDelegateForFunctionPointer<_GetAdapterLuid>((IntPtr)(lpVtbl[43]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineLibrary([NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineLibrary>((IntPtr)(lpVtbl[44]))(pThis, pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetEventOnMultipleFenceCompletion([NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetEventOnMultipleFenceCompletion>((IntPtr)(lpVtbl[45]))(pThis, ppFences, pFenceValues, NumFences, Flags, hEvent);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetResidencyPriority([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetResidencyPriority>((IntPtr)(lpVtbl[46]))(pThis, NumObjects, ppObjects, pPriorities);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineState([NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineState>((IntPtr)(lpVtbl[47]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromAddress([NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromAddress>((IntPtr)(lpVtbl[48]))(pThis, pAddress, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromFileMapping([NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromFileMapping>((IntPtr)(lpVtbl[49]))(pThis, hFileMapping, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnqueueMakeResident(D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnqueueMakeResident>((IntPtr)(lpVtbl[50]))(pThis, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList1([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [In] D3D12_COMMAND_LIST_FLAGS flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList1>((IntPtr)(lpVtbl[51]))(pThis, nodeMask, type, flags, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateProtectedResourceSession([NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateProtectedResourceSession>((IntPtr)(lpVtbl[52]))(pThis, pDesc, riid, ppSession);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource1([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource1>((IntPtr)(lpVtbl[53]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap1([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap1>((IntPtr)(lpVtbl[54]))(pThis, pDesc, pProtectedSession, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource1([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource1>((IntPtr)(lpVtbl[55]))(pThis, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo1([NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo1>((IntPtr)(lpVtbl[56]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateLifetimeTracker([NativeTypeName("ID3D12LifetimeOwner *")] [In] ID3D12LifetimeOwner* pOwner, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvTracker)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateLifetimeTracker>((IntPtr)(lpVtbl[57]))(pThis, pOwner, riid, ppvTracker);
            }
        }

        public void RemoveDevice()
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RemoveDevice>((IntPtr)(lpVtbl[58]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnumerateMetaCommands([NativeTypeName("UINT *")] [In][Out] uint* pNumMetaCommands, [NativeTypeName("D3D12_META_COMMAND_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out][Optional] D3D12_META_COMMAND_DESC* pDescs)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnumerateMetaCommands>((IntPtr)(lpVtbl[59]))(pThis, pNumMetaCommands, pDescs);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnumerateMetaCommandParameters([NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [In] D3D12_META_COMMAND_PARAMETER_STAGE Stage, [NativeTypeName("UINT *")] [Out][Optional] uint* pTotalStructureSizeInBytes, [NativeTypeName("UINT *")] [In][Out] uint* pParameterCount, [NativeTypeName("D3D12_META_COMMAND_PARAMETER_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][Out][Optional] D3D12_META_COMMAND_PARAMETER_DESC* pParameterDescs)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnumerateMetaCommandParameters>((IntPtr)(lpVtbl[60]))(pThis, CommandId, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateMetaCommand([NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [NativeTypeName("UINT")] [In] uint NodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] void* pCreationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr CreationParametersDataSizeInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppMetaCommand)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateMetaCommand>((IntPtr)(lpVtbl[61]))(pThis, CommandId, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateStateObject([NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppStateObject)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateStateObject>((IntPtr)(lpVtbl[62]))(pThis, pDesc, riid, ppStateObject);
            }
        }

        public void GetRaytracingAccelerationStructurePrebuildInfo([NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS* pDesc, [NativeTypeName("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO *")] [Out] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetRaytracingAccelerationStructurePrebuildInfo>((IntPtr)(lpVtbl[63]))(pThis, pDesc, pInfo);
            }
        }

        public D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS CheckDriverMatchingIdentifier([In] D3D12_SERIALIZED_DATA_TYPE SerializedDataType, [NativeTypeName("const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER *")] [Const] [In] D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER* pIdentifierToCheck)
        {
            fixed (ID3D12Device5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckDriverMatchingIdentifier>((IntPtr)(lpVtbl[64]))(pThis, SerializedDataType, pIdentifierToCheck);
            }
        }
    }

    public enum D3D12_AUTO_BREADCRUMB_OP
    {
        D3D12_AUTO_BREADCRUMB_OP_SETMARKER = 0,
        D3D12_AUTO_BREADCRUMB_OP_BEGINEVENT = 1,
        D3D12_AUTO_BREADCRUMB_OP_ENDEVENT = 2,
        D3D12_AUTO_BREADCRUMB_OP_DRAWINSTANCED = 3,
        D3D12_AUTO_BREADCRUMB_OP_DRAWINDEXEDINSTANCED = 4,
        D3D12_AUTO_BREADCRUMB_OP_EXECUTEINDIRECT = 5,
        D3D12_AUTO_BREADCRUMB_OP_DISPATCH = 6,
        D3D12_AUTO_BREADCRUMB_OP_COPYBUFFERREGION = 7,
        D3D12_AUTO_BREADCRUMB_OP_COPYTEXTUREREGION = 8,
        D3D12_AUTO_BREADCRUMB_OP_COPYRESOURCE = 9,
        D3D12_AUTO_BREADCRUMB_OP_COPYTILES = 10,
        D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCE = 11,
        D3D12_AUTO_BREADCRUMB_OP_CLEARRENDERTARGETVIEW = 12,
        D3D12_AUTO_BREADCRUMB_OP_CLEARUNORDEREDACCESSVIEW = 13,
        D3D12_AUTO_BREADCRUMB_OP_CLEARDEPTHSTENCILVIEW = 14,
        D3D12_AUTO_BREADCRUMB_OP_RESOURCEBARRIER = 15,
        D3D12_AUTO_BREADCRUMB_OP_EXECUTEBUNDLE = 16,
        D3D12_AUTO_BREADCRUMB_OP_PRESENT = 17,
        D3D12_AUTO_BREADCRUMB_OP_RESOLVEQUERYDATA = 18,
        D3D12_AUTO_BREADCRUMB_OP_BEGINSUBMISSION = 19,
        D3D12_AUTO_BREADCRUMB_OP_ENDSUBMISSION = 20,
        D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME = 21,
        D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES = 22,
        D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT = 23,
        D3D12_AUTO_BREADCRUMB_OP_ATOMICCOPYBUFFERUINT64 = 24,
        D3D12_AUTO_BREADCRUMB_OP_RESOLVESUBRESOURCEREGION = 25,
        D3D12_AUTO_BREADCRUMB_OP_WRITEBUFFERIMMEDIATE = 26,
        D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME1 = 27,
        D3D12_AUTO_BREADCRUMB_OP_SETPROTECTEDRESOURCESESSION = 28,
        D3D12_AUTO_BREADCRUMB_OP_DECODEFRAME2 = 29,
        D3D12_AUTO_BREADCRUMB_OP_PROCESSFRAMES1 = 30,
        D3D12_AUTO_BREADCRUMB_OP_BUILDRAYTRACINGACCELERATIONSTRUCTURE = 31,
        D3D12_AUTO_BREADCRUMB_OP_EMITRAYTRACINGACCELERATIONSTRUCTUREPOSTBUILDINFO = 32,
        D3D12_AUTO_BREADCRUMB_OP_COPYRAYTRACINGACCELERATIONSTRUCTURE = 33,
        D3D12_AUTO_BREADCRUMB_OP_DISPATCHRAYS = 34,
        D3D12_AUTO_BREADCRUMB_OP_INITIALIZEMETACOMMAND = 35,
        D3D12_AUTO_BREADCRUMB_OP_EXECUTEMETACOMMAND = 36,
        D3D12_AUTO_BREADCRUMB_OP_ESTIMATEMOTION = 37,
        D3D12_AUTO_BREADCRUMB_OP_RESOLVEMOTIONVECTORHEAP = 38,
        D3D12_AUTO_BREADCRUMB_OP_SETPIPELINESTATE1 = 39,
        D3D12_AUTO_BREADCRUMB_OP_INITIALIZEEXTENSIONCOMMAND = 40,
        D3D12_AUTO_BREADCRUMB_OP_EXECUTEEXTENSIONCOMMAND = 41,
        D3D12_AUTO_BREADCRUMB_OP_DISPATCHMESH = 42,
    }

    public unsafe partial struct D3D12_AUTO_BREADCRUMB_NODE
    {
        [NativeTypeName("const char *")]
        [Const]
        public sbyte* pCommandListDebugNameA;

        [NativeTypeName("const wchar_t *")]
        [Const]
        public ushort* pCommandListDebugNameW;

        [NativeTypeName("const char *")]
        [Const]
        public sbyte* pCommandQueueDebugNameA;

        [NativeTypeName("const wchar_t *")]
        [Const]
        public ushort* pCommandQueueDebugNameW;

        [NativeTypeName("ID3D12GraphicsCommandList *")]
        public ID3D12GraphicsCommandList* pCommandList;

        [NativeTypeName("ID3D12CommandQueue *")]
        public ID3D12CommandQueue* pCommandQueue;

        [NativeTypeName("UINT32")]
        public uint BreadcrumbCount;

        [NativeTypeName("const UINT32 *")]
        [Const]
        public uint* pLastBreadcrumbValue;

        [NativeTypeName("const D3D12_AUTO_BREADCRUMB_OP *")]
        [Const]
        public D3D12_AUTO_BREADCRUMB_OP* pCommandHistory;

        [NativeTypeName("const struct D3D12_AUTO_BREADCRUMB_NODE *")]
        [Const]
        public D3D12_AUTO_BREADCRUMB_NODE* pNext;
    }

    public unsafe partial struct D3D12_DRED_BREADCRUMB_CONTEXT
    {
        [NativeTypeName("UINT")]
        public uint BreadcrumbIndex;

        [NativeTypeName("const wchar_t *")]
        [Const]
        public ushort* pContextString;
    }

    public unsafe partial struct D3D12_AUTO_BREADCRUMB_NODE1
    {
        [NativeTypeName("const char *")]
        [Const]
        public sbyte* pCommandListDebugNameA;

        [NativeTypeName("const wchar_t *")]
        [Const]
        public ushort* pCommandListDebugNameW;

        [NativeTypeName("const char *")]
        [Const]
        public sbyte* pCommandQueueDebugNameA;

        [NativeTypeName("const wchar_t *")]
        [Const]
        public ushort* pCommandQueueDebugNameW;

        [NativeTypeName("ID3D12GraphicsCommandList *")]
        public ID3D12GraphicsCommandList* pCommandList;

        [NativeTypeName("ID3D12CommandQueue *")]
        public ID3D12CommandQueue* pCommandQueue;

        [NativeTypeName("UINT")]
        public uint BreadcrumbCount;

        [NativeTypeName("const UINT *")]
        [Const]
        public uint* pLastBreadcrumbValue;

        [NativeTypeName("const D3D12_AUTO_BREADCRUMB_OP *")]
        [Const]
        public D3D12_AUTO_BREADCRUMB_OP* pCommandHistory;

        [NativeTypeName("const struct D3D12_AUTO_BREADCRUMB_NODE1 *")]
        [Const]
        public D3D12_AUTO_BREADCRUMB_NODE1* pNext;

        [NativeTypeName("UINT")]
        public uint BreadcrumbContextsCount;

        [NativeTypeName("D3D12_DRED_BREADCRUMB_CONTEXT *")]
        public D3D12_DRED_BREADCRUMB_CONTEXT* pBreadcrumbContexts;
    }

    public enum D3D12_DRED_VERSION
    {
        D3D12_DRED_VERSION_1_0 = 0x1,
        D3D12_DRED_VERSION_1_1 = 0x2,
        D3D12_DRED_VERSION_1_2 = 0x3,
    }

    public enum D3D12_DRED_FLAGS
    {
        D3D12_DRED_FLAG_NONE = 0,
        D3D12_DRED_FLAG_FORCE_ENABLE = 1,
        D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS = 2,
    }

    public enum D3D12_DRED_ENABLEMENT
    {
        D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED = 0,
        D3D12_DRED_ENABLEMENT_FORCED_OFF = 1,
        D3D12_DRED_ENABLEMENT_FORCED_ON = 2,
    }

    public unsafe partial struct D3D12_DEVICE_REMOVED_EXTENDED_DATA
    {
        public D3D12_DRED_FLAGS Flags;

        [NativeTypeName("D3D12_AUTO_BREADCRUMB_NODE *")]
        public D3D12_AUTO_BREADCRUMB_NODE* pHeadAutoBreadcrumbNode;
    }

    public enum D3D12_DRED_ALLOCATION_TYPE
    {
        D3D12_DRED_ALLOCATION_TYPE_COMMAND_QUEUE = 19,
        D3D12_DRED_ALLOCATION_TYPE_COMMAND_ALLOCATOR = 20,
        D3D12_DRED_ALLOCATION_TYPE_PIPELINE_STATE = 21,
        D3D12_DRED_ALLOCATION_TYPE_COMMAND_LIST = 22,
        D3D12_DRED_ALLOCATION_TYPE_FENCE = 23,
        D3D12_DRED_ALLOCATION_TYPE_DESCRIPTOR_HEAP = 24,
        D3D12_DRED_ALLOCATION_TYPE_HEAP = 25,
        D3D12_DRED_ALLOCATION_TYPE_QUERY_HEAP = 27,
        D3D12_DRED_ALLOCATION_TYPE_COMMAND_SIGNATURE = 28,
        D3D12_DRED_ALLOCATION_TYPE_PIPELINE_LIBRARY = 29,
        D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER = 30,
        D3D12_DRED_ALLOCATION_TYPE_VIDEO_PROCESSOR = 32,
        D3D12_DRED_ALLOCATION_TYPE_RESOURCE = 34,
        D3D12_DRED_ALLOCATION_TYPE_PASS = 35,
        D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSION = 36,
        D3D12_DRED_ALLOCATION_TYPE_CRYPTOSESSIONPOLICY = 37,
        D3D12_DRED_ALLOCATION_TYPE_PROTECTEDRESOURCESESSION = 38,
        D3D12_DRED_ALLOCATION_TYPE_VIDEO_DECODER_HEAP = 39,
        D3D12_DRED_ALLOCATION_TYPE_COMMAND_POOL = 40,
        D3D12_DRED_ALLOCATION_TYPE_COMMAND_RECORDER = 41,
        D3D12_DRED_ALLOCATION_TYPE_STATE_OBJECT = 42,
        D3D12_DRED_ALLOCATION_TYPE_METACOMMAND = 43,
        D3D12_DRED_ALLOCATION_TYPE_SCHEDULINGGROUP = 44,
        D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_ESTIMATOR = 45,
        D3D12_DRED_ALLOCATION_TYPE_VIDEO_MOTION_VECTOR_HEAP = 46,
        D3D12_DRED_ALLOCATION_TYPE_VIDEO_EXTENSION_COMMAND = 47,
        D3D12_DRED_ALLOCATION_TYPE_INVALID = unchecked((int)(0xffffffff)),
    }

    public unsafe partial struct D3D12_DRED_ALLOCATION_NODE
    {
        [NativeTypeName("const char *")]
        [Const]
        public sbyte* ObjectNameA;

        [NativeTypeName("const wchar_t *")]
        [Const]
        public ushort* ObjectNameW;

        public D3D12_DRED_ALLOCATION_TYPE AllocationType;

        [NativeTypeName("const struct D3D12_DRED_ALLOCATION_NODE *")]
        [Const]
        public D3D12_DRED_ALLOCATION_NODE* pNext;
    }

    public unsafe partial struct D3D12_DRED_ALLOCATION_NODE1
    {
        [NativeTypeName("const char *")]
        [Const]
        public sbyte* ObjectNameA;

        [NativeTypeName("const wchar_t *")]
        [Const]
        public ushort* ObjectNameW;

        public D3D12_DRED_ALLOCATION_TYPE AllocationType;

        [NativeTypeName("const struct D3D12_DRED_ALLOCATION_NODE1 *")]
        [Const]
        public D3D12_DRED_ALLOCATION_NODE1* pNext;

        [NativeTypeName("const IUnknown *")]
        [Const]
        public IUnknown* pObject;
    }

    public unsafe partial struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT
    {
        [NativeTypeName("const D3D12_AUTO_BREADCRUMB_NODE *")]
        [Const]
        public D3D12_AUTO_BREADCRUMB_NODE* pHeadAutoBreadcrumbNode;
    }

    public unsafe partial struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1
    {
        [NativeTypeName("const D3D12_AUTO_BREADCRUMB_NODE1 *")]
        [Const]
        public D3D12_AUTO_BREADCRUMB_NODE1* pHeadAutoBreadcrumbNode;
    }

    public unsafe partial struct D3D12_DRED_PAGE_FAULT_OUTPUT
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong PageFaultVA;

        [NativeTypeName("const D3D12_DRED_ALLOCATION_NODE *")]
        [Const]
        public D3D12_DRED_ALLOCATION_NODE* pHeadExistingAllocationNode;

        [NativeTypeName("const D3D12_DRED_ALLOCATION_NODE *")]
        [Const]
        public D3D12_DRED_ALLOCATION_NODE* pHeadRecentFreedAllocationNode;
    }

    public unsafe partial struct D3D12_DRED_PAGE_FAULT_OUTPUT1
    {
        [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong PageFaultVA;

        [NativeTypeName("const D3D12_DRED_ALLOCATION_NODE1 *")]
        [Const]
        public D3D12_DRED_ALLOCATION_NODE1* pHeadExistingAllocationNode;

        [NativeTypeName("const D3D12_DRED_ALLOCATION_NODE1 *")]
        [Const]
        public D3D12_DRED_ALLOCATION_NODE1* pHeadRecentFreedAllocationNode;
    }

    public partial struct D3D12_DEVICE_REMOVED_EXTENDED_DATA1
    {
        [NativeTypeName("HRESULT")]
        public int DeviceRemovedReason;

        public D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT AutoBreadcrumbsOutput;

        public D3D12_DRED_PAGE_FAULT_OUTPUT PageFaultOutput;
    }

    public partial struct D3D12_DEVICE_REMOVED_EXTENDED_DATA2
    {
        [NativeTypeName("HRESULT")]
        public int DeviceRemovedReason;

        public D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 AutoBreadcrumbsOutput;

        public D3D12_DRED_PAGE_FAULT_OUTPUT1 PageFaultOutput;
    }

    public partial struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA
    {
        public D3D12_DRED_VERSION Version;

        [NativeTypeName("D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:13459:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_DEVICE_REMOVED_EXTENDED_DATA Dred_1_0;

            [FieldOffset(0)]
            public D3D12_DEVICE_REMOVED_EXTENDED_DATA1 Dred_1_1;

            [FieldOffset(0)]
            public D3D12_DEVICE_REMOVED_EXTENDED_DATA2 Dred_1_2;
        }
    }

    [Guid("82BC481C-6B9B-4030-AEDB-7EE3D1DF1E63")]
    [NativeTypeName("struct ID3D12DeviceRemovedExtendedDataSettings : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12DeviceRemovedExtendedDataSettings
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DeviceRemovedExtendedDataSettings* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DeviceRemovedExtendedDataSettings* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DeviceRemovedExtendedDataSettings* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetAutoBreadcrumbsEnablement(ID3D12DeviceRemovedExtendedDataSettings* pThis, D3D12_DRED_ENABLEMENT Enablement);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPageFaultEnablement(ID3D12DeviceRemovedExtendedDataSettings* pThis, D3D12_DRED_ENABLEMENT Enablement);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetWatsonDumpEnablement(ID3D12DeviceRemovedExtendedDataSettings* pThis, D3D12_DRED_ENABLEMENT Enablement);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        public void SetAutoBreadcrumbsEnablement(D3D12_DRED_ENABLEMENT Enablement)
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetAutoBreadcrumbsEnablement>((IntPtr)(lpVtbl[3]))(pThis, Enablement);
            }
        }

        public void SetPageFaultEnablement(D3D12_DRED_ENABLEMENT Enablement)
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPageFaultEnablement>((IntPtr)(lpVtbl[4]))(pThis, Enablement);
            }
        }

        public void SetWatsonDumpEnablement(D3D12_DRED_ENABLEMENT Enablement)
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetWatsonDumpEnablement>((IntPtr)(lpVtbl[5]))(pThis, Enablement);
            }
        }
    }

    [Guid("DBD5AE51-3317-4F0A-ADF9-1D7CEDCAAE0B")]
    [NativeTypeName("struct ID3D12DeviceRemovedExtendedDataSettings1 : ID3D12DeviceRemovedExtendedDataSettings")]
    [NativeInheritance("ID3D12DeviceRemovedExtendedDataSettings")]
    public unsafe partial struct ID3D12DeviceRemovedExtendedDataSettings1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DeviceRemovedExtendedDataSettings1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DeviceRemovedExtendedDataSettings1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DeviceRemovedExtendedDataSettings1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetAutoBreadcrumbsEnablement(ID3D12DeviceRemovedExtendedDataSettings1* pThis, D3D12_DRED_ENABLEMENT Enablement);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPageFaultEnablement(ID3D12DeviceRemovedExtendedDataSettings1* pThis, D3D12_DRED_ENABLEMENT Enablement);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetWatsonDumpEnablement(ID3D12DeviceRemovedExtendedDataSettings1* pThis, D3D12_DRED_ENABLEMENT Enablement);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetBreadcrumbContextEnablement(ID3D12DeviceRemovedExtendedDataSettings1* pThis, D3D12_DRED_ENABLEMENT Enablement);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        public void SetAutoBreadcrumbsEnablement(D3D12_DRED_ENABLEMENT Enablement)
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetAutoBreadcrumbsEnablement>((IntPtr)(lpVtbl[3]))(pThis, Enablement);
            }
        }

        public void SetPageFaultEnablement(D3D12_DRED_ENABLEMENT Enablement)
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPageFaultEnablement>((IntPtr)(lpVtbl[4]))(pThis, Enablement);
            }
        }

        public void SetWatsonDumpEnablement(D3D12_DRED_ENABLEMENT Enablement)
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetWatsonDumpEnablement>((IntPtr)(lpVtbl[5]))(pThis, Enablement);
            }
        }

        public void SetBreadcrumbContextEnablement(D3D12_DRED_ENABLEMENT Enablement)
        {
            fixed (ID3D12DeviceRemovedExtendedDataSettings1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetBreadcrumbContextEnablement>((IntPtr)(lpVtbl[6]))(pThis, Enablement);
            }
        }
    }

    [Guid("98931D33-5AE8-4791-AA3C-1A73A2934E71")]
    [NativeTypeName("struct ID3D12DeviceRemovedExtendedData : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12DeviceRemovedExtendedData
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DeviceRemovedExtendedData* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DeviceRemovedExtendedData* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DeviceRemovedExtendedData* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetAutoBreadcrumbsOutput(ID3D12DeviceRemovedExtendedData* pThis, [NativeTypeName("D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT *")] [Out] D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT* pOutput);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPageFaultAllocationOutput(ID3D12DeviceRemovedExtendedData* pThis, [NativeTypeName("D3D12_DRED_PAGE_FAULT_OUTPUT *")] [Out] D3D12_DRED_PAGE_FAULT_OUTPUT* pOutput);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DeviceRemovedExtendedData* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DeviceRemovedExtendedData* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DeviceRemovedExtendedData* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetAutoBreadcrumbsOutput([NativeTypeName("D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT *")] [Out] D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT* pOutput)
        {
            fixed (ID3D12DeviceRemovedExtendedData* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetAutoBreadcrumbsOutput>((IntPtr)(lpVtbl[3]))(pThis, pOutput);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPageFaultAllocationOutput([NativeTypeName("D3D12_DRED_PAGE_FAULT_OUTPUT *")] [Out] D3D12_DRED_PAGE_FAULT_OUTPUT* pOutput)
        {
            fixed (ID3D12DeviceRemovedExtendedData* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPageFaultAllocationOutput>((IntPtr)(lpVtbl[4]))(pThis, pOutput);
            }
        }
    }

    [Guid("9727A022-CF1D-4DDA-9EBA-EFFA653FC506")]
    [NativeTypeName("struct ID3D12DeviceRemovedExtendedData1 : ID3D12DeviceRemovedExtendedData")]
    [NativeInheritance("ID3D12DeviceRemovedExtendedData")]
    public unsafe partial struct ID3D12DeviceRemovedExtendedData1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DeviceRemovedExtendedData1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DeviceRemovedExtendedData1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DeviceRemovedExtendedData1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetAutoBreadcrumbsOutput(ID3D12DeviceRemovedExtendedData1* pThis, [NativeTypeName("D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT *")] [Out] D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT* pOutput);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPageFaultAllocationOutput(ID3D12DeviceRemovedExtendedData1* pThis, [NativeTypeName("D3D12_DRED_PAGE_FAULT_OUTPUT *")] [Out] D3D12_DRED_PAGE_FAULT_OUTPUT* pOutput);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetAutoBreadcrumbsOutput1(ID3D12DeviceRemovedExtendedData1* pThis, [NativeTypeName("D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 *")] [Out] D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1* pOutput);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPageFaultAllocationOutput1(ID3D12DeviceRemovedExtendedData1* pThis, [NativeTypeName("D3D12_DRED_PAGE_FAULT_OUTPUT1 *")] [Out] D3D12_DRED_PAGE_FAULT_OUTPUT1* pOutput);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DeviceRemovedExtendedData1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DeviceRemovedExtendedData1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DeviceRemovedExtendedData1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetAutoBreadcrumbsOutput([NativeTypeName("D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT *")] [Out] D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT* pOutput)
        {
            fixed (ID3D12DeviceRemovedExtendedData1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetAutoBreadcrumbsOutput>((IntPtr)(lpVtbl[3]))(pThis, pOutput);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPageFaultAllocationOutput([NativeTypeName("D3D12_DRED_PAGE_FAULT_OUTPUT *")] [Out] D3D12_DRED_PAGE_FAULT_OUTPUT* pOutput)
        {
            fixed (ID3D12DeviceRemovedExtendedData1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPageFaultAllocationOutput>((IntPtr)(lpVtbl[4]))(pThis, pOutput);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetAutoBreadcrumbsOutput1([NativeTypeName("D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1 *")] [Out] D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT1* pOutput)
        {
            fixed (ID3D12DeviceRemovedExtendedData1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetAutoBreadcrumbsOutput1>((IntPtr)(lpVtbl[5]))(pThis, pOutput);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPageFaultAllocationOutput1([NativeTypeName("D3D12_DRED_PAGE_FAULT_OUTPUT1 *")] [Out] D3D12_DRED_PAGE_FAULT_OUTPUT1* pOutput)
        {
            fixed (ID3D12DeviceRemovedExtendedData1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPageFaultAllocationOutput1>((IntPtr)(lpVtbl[6]))(pThis, pOutput);
            }
        }
    }

    public enum D3D12_BACKGROUND_PROCESSING_MODE
    {
        D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED = 0,
        D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS = (D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED + 1),
        D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK = (D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS + 1),
        D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM = (D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK + 1),
    }

    public enum D3D12_MEASUREMENTS_ACTION
    {
        D3D12_MEASUREMENTS_ACTION_KEEP_ALL = 0,
        D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS = (D3D12_MEASUREMENTS_ACTION_KEEP_ALL + 1),
        D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY = (D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS + 1),
        D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS = (D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY + 1),
    }

    [Guid("C70B221B-40E4-4A17-89AF-025A0727A6DC")]
    [NativeTypeName("struct ID3D12Device6 : ID3D12Device5")]
    [NativeInheritance("ID3D12Device5")]
    public unsafe partial struct ID3D12Device6
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Device6* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Device6* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Device6* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Device6* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Device6* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Device6* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Device6* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNodeCount(ID3D12Device6* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandQueue(ID3D12Device6* pThis, [NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandAllocator(ID3D12Device6* pThis, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateGraphicsPipelineState(ID3D12Device6* pThis, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateComputePipelineState(ID3D12Device6* pThis, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList(ID3D12Device6* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12Device6* pThis, D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateDescriptorHeap(ID3D12Device6* pThis, [NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetDescriptorHandleIncrementSize(ID3D12Device6* pThis, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateRootSignature(ID3D12Device6* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateConstantBufferView(ID3D12Device6* pThis, [NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateShaderResourceView(ID3D12Device6* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateUnorderedAccessView(ID3D12Device6* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateRenderTargetView(ID3D12Device6* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateDepthStencilView(ID3D12Device6* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateSampler(ID3D12Device6* pThis, [NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptors(ID3D12Device6* pThis, [NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptorsSimple(ID3D12Device6* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo(ID3D12Device6* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_HEAP_PROPERTIES* _GetCustomHeapProperties(ID3D12Device6* pThis, D3D12_HEAP_PROPERTIES* _result, [NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource(ID3D12Device6* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap(ID3D12Device6* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePlacedResource(ID3D12Device6* pThis, [NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource(ID3D12Device6* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateSharedHandle(ID3D12Device6* pThis, [NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandle(ID3D12Device6* pThis, [NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandleByName(ID3D12Device6* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _MakeResident(ID3D12Device6* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Evict(ID3D12Device6* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateFence(ID3D12Device6* pThis, [NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDeviceRemovedReason(ID3D12Device6* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetCopyableFootprints(ID3D12Device6* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateQueryHeap(ID3D12Device6* pThis, [NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetStablePowerState(ID3D12Device6* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandSignature(ID3D12Device6* pThis, [NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetResourceTiling(ID3D12Device6* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate LUID* _GetAdapterLuid(ID3D12Device6* pThis, LUID* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineLibrary(ID3D12Device6* pThis, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetEventOnMultipleFenceCompletion(ID3D12Device6* pThis, [NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetResidencyPriority(ID3D12Device6* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineState(ID3D12Device6* pThis, [NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromAddress(ID3D12Device6* pThis, [NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromFileMapping(ID3D12Device6* pThis, [NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnqueueMakeResident(ID3D12Device6* pThis, D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList1(ID3D12Device6* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [In] D3D12_COMMAND_LIST_FLAGS flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateProtectedResourceSession(ID3D12Device6* pThis, [NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource1(ID3D12Device6* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap1(ID3D12Device6* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource1(ID3D12Device6* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo1(ID3D12Device6* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateLifetimeTracker(ID3D12Device6* pThis, [NativeTypeName("ID3D12LifetimeOwner *")] [In] ID3D12LifetimeOwner* pOwner, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvTracker);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RemoveDevice(ID3D12Device6* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnumerateMetaCommands(ID3D12Device6* pThis, [NativeTypeName("UINT *")] [In][Out] uint* pNumMetaCommands, [NativeTypeName("D3D12_META_COMMAND_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out][Optional] D3D12_META_COMMAND_DESC* pDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnumerateMetaCommandParameters(ID3D12Device6* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [In] D3D12_META_COMMAND_PARAMETER_STAGE Stage, [NativeTypeName("UINT *")] [Out][Optional] uint* pTotalStructureSizeInBytes, [NativeTypeName("UINT *")] [In][Out] uint* pParameterCount, [NativeTypeName("D3D12_META_COMMAND_PARAMETER_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][Out][Optional] D3D12_META_COMMAND_PARAMETER_DESC* pParameterDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateMetaCommand(ID3D12Device6* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [NativeTypeName("UINT")] [In] uint NodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] void* pCreationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr CreationParametersDataSizeInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppMetaCommand);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateStateObject(ID3D12Device6* pThis, [NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppStateObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetRaytracingAccelerationStructurePrebuildInfo(ID3D12Device6* pThis, [NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS* pDesc, [NativeTypeName("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO *")] [Out] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS _CheckDriverMatchingIdentifier(ID3D12Device6* pThis, [In] D3D12_SERIALIZED_DATA_TYPE SerializedDataType, [NativeTypeName("const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER *")] [Const] [In] D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER* pIdentifierToCheck);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetBackgroundProcessingMode(ID3D12Device6* pThis, D3D12_BACKGROUND_PROCESSING_MODE Mode, D3D12_MEASUREMENTS_ACTION MeasurementsAction, [NativeTypeName("HANDLE")] [In][Optional] IntPtr hEventToSignalUponCompletion, [NativeTypeName("BOOL *")] [Out][Optional] int* pbFurtherMeasurementsDesired);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNodeCount()
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNodeCount>((IntPtr)(lpVtbl[7]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandQueue([NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandQueue>((IntPtr)(lpVtbl[8]))(pThis, pDesc, riid, ppCommandQueue);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandAllocator([In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandAllocator>((IntPtr)(lpVtbl[9]))(pThis, type, riid, ppCommandAllocator);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateGraphicsPipelineState([NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateGraphicsPipelineState>((IntPtr)(lpVtbl[10]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateComputePipelineState([NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateComputePipelineState>((IntPtr)(lpVtbl[11]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList>((IntPtr)(lpVtbl[12]))(pThis, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[13]))(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateDescriptorHeap([NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateDescriptorHeap>((IntPtr)(lpVtbl[14]))(pThis, pDescriptorHeapDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetDescriptorHandleIncrementSize([In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDescriptorHandleIncrementSize>((IntPtr)(lpVtbl[15]))(pThis, DescriptorHeapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateRootSignature([NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateRootSignature>((IntPtr)(lpVtbl[16]))(pThis, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
            }
        }

        public void CreateConstantBufferView([NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateConstantBufferView>((IntPtr)(lpVtbl[17]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CreateShaderResourceView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateShaderResourceView>((IntPtr)(lpVtbl[18]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateUnorderedAccessView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateUnorderedAccessView>((IntPtr)(lpVtbl[19]))(pThis, pResource, pCounterResource, pDesc, DestDescriptor);
            }
        }

        public void CreateRenderTargetView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateRenderTargetView>((IntPtr)(lpVtbl[20]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateDepthStencilView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateDepthStencilView>((IntPtr)(lpVtbl[21]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateSampler([NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateSampler>((IntPtr)(lpVtbl[22]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CopyDescriptors([NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptors>((IntPtr)(lpVtbl[23]))(pThis, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
            }
        }

        public void CopyDescriptorsSimple([NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptorsSimple>((IntPtr)(lpVtbl[24]))(pThis, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo([NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo>((IntPtr)(lpVtbl[25]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs);
            }
        }

        public D3D12_HEAP_PROPERTIES GetCustomHeapProperties([NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                D3D12_HEAP_PROPERTIES result;
                return *Marshal.GetDelegateForFunctionPointer<_GetCustomHeapProperties>((IntPtr)(lpVtbl[26]))(pThis, &result, nodeMask, heapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource>((IntPtr)(lpVtbl[27]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap>((IntPtr)(lpVtbl[28]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePlacedResource([NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePlacedResource>((IntPtr)(lpVtbl[29]))(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource>((IntPtr)(lpVtbl[30]))(pThis, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateSharedHandle([NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateSharedHandle>((IntPtr)(lpVtbl[31]))(pThis, pObject, pAttributes, Access, Name, pHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandle([NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandle>((IntPtr)(lpVtbl[32]))(pThis, NTHandle, riid, ppvObj);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandleByName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandleByName>((IntPtr)(lpVtbl[33]))(pThis, Name, Access, pNTHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int MakeResident([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_MakeResident>((IntPtr)(lpVtbl[34]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Evict([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Evict>((IntPtr)(lpVtbl[35]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateFence([NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateFence>((IntPtr)(lpVtbl[36]))(pThis, InitialValue, Flags, riid, ppFence);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDeviceRemovedReason()
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDeviceRemovedReason>((IntPtr)(lpVtbl[37]))(pThis);
            }
        }

        public void GetCopyableFootprints([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetCopyableFootprints>((IntPtr)(lpVtbl[38]))(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateQueryHeap([NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateQueryHeap>((IntPtr)(lpVtbl[39]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetStablePowerState([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetStablePowerState>((IntPtr)(lpVtbl[40]))(pThis, Enable);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandSignature([NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandSignature>((IntPtr)(lpVtbl[41]))(pThis, pDesc, pRootSignature, riid, ppvCommandSignature);
            }
        }

        public void GetResourceTiling([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetResourceTiling>((IntPtr)(lpVtbl[42]))(pThis, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        public LUID GetAdapterLuid()
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                LUID result;
                return *Marshal.GetDelegateForFunctionPointer<_GetAdapterLuid>((IntPtr)(lpVtbl[43]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineLibrary([NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineLibrary>((IntPtr)(lpVtbl[44]))(pThis, pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetEventOnMultipleFenceCompletion([NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetEventOnMultipleFenceCompletion>((IntPtr)(lpVtbl[45]))(pThis, ppFences, pFenceValues, NumFences, Flags, hEvent);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetResidencyPriority([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetResidencyPriority>((IntPtr)(lpVtbl[46]))(pThis, NumObjects, ppObjects, pPriorities);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineState([NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineState>((IntPtr)(lpVtbl[47]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromAddress([NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromAddress>((IntPtr)(lpVtbl[48]))(pThis, pAddress, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromFileMapping([NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromFileMapping>((IntPtr)(lpVtbl[49]))(pThis, hFileMapping, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnqueueMakeResident(D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnqueueMakeResident>((IntPtr)(lpVtbl[50]))(pThis, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList1([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [In] D3D12_COMMAND_LIST_FLAGS flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList1>((IntPtr)(lpVtbl[51]))(pThis, nodeMask, type, flags, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateProtectedResourceSession([NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateProtectedResourceSession>((IntPtr)(lpVtbl[52]))(pThis, pDesc, riid, ppSession);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource1([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource1>((IntPtr)(lpVtbl[53]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap1([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap1>((IntPtr)(lpVtbl[54]))(pThis, pDesc, pProtectedSession, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource1([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource1>((IntPtr)(lpVtbl[55]))(pThis, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo1([NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo1>((IntPtr)(lpVtbl[56]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateLifetimeTracker([NativeTypeName("ID3D12LifetimeOwner *")] [In] ID3D12LifetimeOwner* pOwner, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvTracker)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateLifetimeTracker>((IntPtr)(lpVtbl[57]))(pThis, pOwner, riid, ppvTracker);
            }
        }

        public void RemoveDevice()
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RemoveDevice>((IntPtr)(lpVtbl[58]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnumerateMetaCommands([NativeTypeName("UINT *")] [In][Out] uint* pNumMetaCommands, [NativeTypeName("D3D12_META_COMMAND_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out][Optional] D3D12_META_COMMAND_DESC* pDescs)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnumerateMetaCommands>((IntPtr)(lpVtbl[59]))(pThis, pNumMetaCommands, pDescs);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnumerateMetaCommandParameters([NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [In] D3D12_META_COMMAND_PARAMETER_STAGE Stage, [NativeTypeName("UINT *")] [Out][Optional] uint* pTotalStructureSizeInBytes, [NativeTypeName("UINT *")] [In][Out] uint* pParameterCount, [NativeTypeName("D3D12_META_COMMAND_PARAMETER_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][Out][Optional] D3D12_META_COMMAND_PARAMETER_DESC* pParameterDescs)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnumerateMetaCommandParameters>((IntPtr)(lpVtbl[60]))(pThis, CommandId, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateMetaCommand([NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [NativeTypeName("UINT")] [In] uint NodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] void* pCreationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr CreationParametersDataSizeInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppMetaCommand)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateMetaCommand>((IntPtr)(lpVtbl[61]))(pThis, CommandId, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateStateObject([NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppStateObject)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateStateObject>((IntPtr)(lpVtbl[62]))(pThis, pDesc, riid, ppStateObject);
            }
        }

        public void GetRaytracingAccelerationStructurePrebuildInfo([NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS* pDesc, [NativeTypeName("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO *")] [Out] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetRaytracingAccelerationStructurePrebuildInfo>((IntPtr)(lpVtbl[63]))(pThis, pDesc, pInfo);
            }
        }

        public D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS CheckDriverMatchingIdentifier([In] D3D12_SERIALIZED_DATA_TYPE SerializedDataType, [NativeTypeName("const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER *")] [Const] [In] D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER* pIdentifierToCheck)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckDriverMatchingIdentifier>((IntPtr)(lpVtbl[64]))(pThis, SerializedDataType, pIdentifierToCheck);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetBackgroundProcessingMode(D3D12_BACKGROUND_PROCESSING_MODE Mode, D3D12_MEASUREMENTS_ACTION MeasurementsAction, [NativeTypeName("HANDLE")] [In][Optional] IntPtr hEventToSignalUponCompletion, [NativeTypeName("BOOL *")] [Out][Optional] int* pbFurtherMeasurementsDesired)
        {
            fixed (ID3D12Device6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetBackgroundProcessingMode>((IntPtr)(lpVtbl[65]))(pThis, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired);
            }
        }
    }

    public partial struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPE_COUNT
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("UINT")]
        public uint Count;
    }

    public unsafe partial struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_TYPES
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("UINT")]
        public uint Count;

        [NativeTypeName("GUID *")]
        public Guid* pTypes;
    }

    public partial struct D3D12_PROTECTED_RESOURCE_SESSION_DESC1
    {
        [NativeTypeName("UINT")]
        public uint NodeMask;

        public D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;

        [NativeTypeName("GUID")]
        public Guid ProtectionType;
    }

    [Guid("D6F12DD6-76FB-406E-8961-4296EEFC0409")]
    [NativeTypeName("struct ID3D12ProtectedResourceSession1 : ID3D12ProtectedResourceSession")]
    [NativeInheritance("ID3D12ProtectedResourceSession")]
    public unsafe partial struct ID3D12ProtectedResourceSession1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12ProtectedResourceSession1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12ProtectedResourceSession1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12ProtectedResourceSession1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12ProtectedResourceSession1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12ProtectedResourceSession1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12ProtectedResourceSession1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12ProtectedResourceSession1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12ProtectedResourceSession1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetStatusFence(ID3D12ProtectedResourceSession1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_PROTECTED_SESSION_STATUS _GetSessionStatus(ID3D12ProtectedResourceSession1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_PROTECTED_RESOURCE_SESSION_DESC* _GetDesc(ID3D12ProtectedResourceSession1* pThis, D3D12_PROTECTED_RESOURCE_SESSION_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_PROTECTED_RESOURCE_SESSION_DESC1* _GetDesc1(ID3D12ProtectedResourceSession1* pThis, D3D12_PROTECTED_RESOURCE_SESSION_DESC1* _result);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetStatusFence([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppFence)
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetStatusFence>((IntPtr)(lpVtbl[8]))(pThis, riid, ppFence);
            }
        }

        public D3D12_PROTECTED_SESSION_STATUS GetSessionStatus()
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetSessionStatus>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        public D3D12_PROTECTED_RESOURCE_SESSION_DESC GetDesc()
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                D3D12_PROTECTED_RESOURCE_SESSION_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[10]))(pThis, &result);
            }
        }

        public D3D12_PROTECTED_RESOURCE_SESSION_DESC1 GetDesc1()
        {
            fixed (ID3D12ProtectedResourceSession1* pThis = &this)
            {
                D3D12_PROTECTED_RESOURCE_SESSION_DESC1 result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc1>((IntPtr)(lpVtbl[11]))(pThis, &result);
            }
        }
    }

    [Guid("5C014B53-68A1-4B9B-8BD1-DD6046B9358B")]
    [NativeTypeName("struct ID3D12Device7 : ID3D12Device6")]
    [NativeInheritance("ID3D12Device6")]
    public unsafe partial struct ID3D12Device7
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Device7* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Device7* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Device7* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Device7* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Device7* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Device7* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Device7* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNodeCount(ID3D12Device7* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandQueue(ID3D12Device7* pThis, [NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandAllocator(ID3D12Device7* pThis, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateGraphicsPipelineState(ID3D12Device7* pThis, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateComputePipelineState(ID3D12Device7* pThis, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList(ID3D12Device7* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12Device7* pThis, D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateDescriptorHeap(ID3D12Device7* pThis, [NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetDescriptorHandleIncrementSize(ID3D12Device7* pThis, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateRootSignature(ID3D12Device7* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateConstantBufferView(ID3D12Device7* pThis, [NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateShaderResourceView(ID3D12Device7* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateUnorderedAccessView(ID3D12Device7* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateRenderTargetView(ID3D12Device7* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateDepthStencilView(ID3D12Device7* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateSampler(ID3D12Device7* pThis, [NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptors(ID3D12Device7* pThis, [NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptorsSimple(ID3D12Device7* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo(ID3D12Device7* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_HEAP_PROPERTIES* _GetCustomHeapProperties(ID3D12Device7* pThis, D3D12_HEAP_PROPERTIES* _result, [NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource(ID3D12Device7* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap(ID3D12Device7* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePlacedResource(ID3D12Device7* pThis, [NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource(ID3D12Device7* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateSharedHandle(ID3D12Device7* pThis, [NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandle(ID3D12Device7* pThis, [NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandleByName(ID3D12Device7* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _MakeResident(ID3D12Device7* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Evict(ID3D12Device7* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateFence(ID3D12Device7* pThis, [NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDeviceRemovedReason(ID3D12Device7* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetCopyableFootprints(ID3D12Device7* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateQueryHeap(ID3D12Device7* pThis, [NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetStablePowerState(ID3D12Device7* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandSignature(ID3D12Device7* pThis, [NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetResourceTiling(ID3D12Device7* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate LUID* _GetAdapterLuid(ID3D12Device7* pThis, LUID* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineLibrary(ID3D12Device7* pThis, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetEventOnMultipleFenceCompletion(ID3D12Device7* pThis, [NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetResidencyPriority(ID3D12Device7* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineState(ID3D12Device7* pThis, [NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromAddress(ID3D12Device7* pThis, [NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromFileMapping(ID3D12Device7* pThis, [NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnqueueMakeResident(ID3D12Device7* pThis, D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList1(ID3D12Device7* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [In] D3D12_COMMAND_LIST_FLAGS flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateProtectedResourceSession(ID3D12Device7* pThis, [NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource1(ID3D12Device7* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap1(ID3D12Device7* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource1(ID3D12Device7* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo1(ID3D12Device7* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateLifetimeTracker(ID3D12Device7* pThis, [NativeTypeName("ID3D12LifetimeOwner *")] [In] ID3D12LifetimeOwner* pOwner, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvTracker);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RemoveDevice(ID3D12Device7* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnumerateMetaCommands(ID3D12Device7* pThis, [NativeTypeName("UINT *")] [In][Out] uint* pNumMetaCommands, [NativeTypeName("D3D12_META_COMMAND_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out][Optional] D3D12_META_COMMAND_DESC* pDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnumerateMetaCommandParameters(ID3D12Device7* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [In] D3D12_META_COMMAND_PARAMETER_STAGE Stage, [NativeTypeName("UINT *")] [Out][Optional] uint* pTotalStructureSizeInBytes, [NativeTypeName("UINT *")] [In][Out] uint* pParameterCount, [NativeTypeName("D3D12_META_COMMAND_PARAMETER_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][Out][Optional] D3D12_META_COMMAND_PARAMETER_DESC* pParameterDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateMetaCommand(ID3D12Device7* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [NativeTypeName("UINT")] [In] uint NodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] void* pCreationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr CreationParametersDataSizeInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppMetaCommand);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateStateObject(ID3D12Device7* pThis, [NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppStateObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetRaytracingAccelerationStructurePrebuildInfo(ID3D12Device7* pThis, [NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS* pDesc, [NativeTypeName("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO *")] [Out] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS _CheckDriverMatchingIdentifier(ID3D12Device7* pThis, [In] D3D12_SERIALIZED_DATA_TYPE SerializedDataType, [NativeTypeName("const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER *")] [Const] [In] D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER* pIdentifierToCheck);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetBackgroundProcessingMode(ID3D12Device7* pThis, D3D12_BACKGROUND_PROCESSING_MODE Mode, D3D12_MEASUREMENTS_ACTION MeasurementsAction, [NativeTypeName("HANDLE")] [In][Optional] IntPtr hEventToSignalUponCompletion, [NativeTypeName("BOOL *")] [Out][Optional] int* pbFurtherMeasurementsDesired);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _AddToStateObject(ID3D12Device7* pThis, [NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pAddition, [NativeTypeName("ID3D12StateObject *")] ID3D12StateObject* pStateObjectToGrowFrom, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppNewStateObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateProtectedResourceSession1(ID3D12Device7* pThis, [NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC1 *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC1* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNodeCount()
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNodeCount>((IntPtr)(lpVtbl[7]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandQueue([NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandQueue>((IntPtr)(lpVtbl[8]))(pThis, pDesc, riid, ppCommandQueue);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandAllocator([In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandAllocator>((IntPtr)(lpVtbl[9]))(pThis, type, riid, ppCommandAllocator);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateGraphicsPipelineState([NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateGraphicsPipelineState>((IntPtr)(lpVtbl[10]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateComputePipelineState([NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateComputePipelineState>((IntPtr)(lpVtbl[11]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList>((IntPtr)(lpVtbl[12]))(pThis, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[13]))(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateDescriptorHeap([NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateDescriptorHeap>((IntPtr)(lpVtbl[14]))(pThis, pDescriptorHeapDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetDescriptorHandleIncrementSize([In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDescriptorHandleIncrementSize>((IntPtr)(lpVtbl[15]))(pThis, DescriptorHeapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateRootSignature([NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateRootSignature>((IntPtr)(lpVtbl[16]))(pThis, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
            }
        }

        public void CreateConstantBufferView([NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateConstantBufferView>((IntPtr)(lpVtbl[17]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CreateShaderResourceView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateShaderResourceView>((IntPtr)(lpVtbl[18]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateUnorderedAccessView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateUnorderedAccessView>((IntPtr)(lpVtbl[19]))(pThis, pResource, pCounterResource, pDesc, DestDescriptor);
            }
        }

        public void CreateRenderTargetView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateRenderTargetView>((IntPtr)(lpVtbl[20]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateDepthStencilView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateDepthStencilView>((IntPtr)(lpVtbl[21]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateSampler([NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateSampler>((IntPtr)(lpVtbl[22]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CopyDescriptors([NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptors>((IntPtr)(lpVtbl[23]))(pThis, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
            }
        }

        public void CopyDescriptorsSimple([NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptorsSimple>((IntPtr)(lpVtbl[24]))(pThis, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo([NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo>((IntPtr)(lpVtbl[25]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs);
            }
        }

        public D3D12_HEAP_PROPERTIES GetCustomHeapProperties([NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                D3D12_HEAP_PROPERTIES result;
                return *Marshal.GetDelegateForFunctionPointer<_GetCustomHeapProperties>((IntPtr)(lpVtbl[26]))(pThis, &result, nodeMask, heapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource>((IntPtr)(lpVtbl[27]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap>((IntPtr)(lpVtbl[28]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePlacedResource([NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePlacedResource>((IntPtr)(lpVtbl[29]))(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource>((IntPtr)(lpVtbl[30]))(pThis, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateSharedHandle([NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateSharedHandle>((IntPtr)(lpVtbl[31]))(pThis, pObject, pAttributes, Access, Name, pHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandle([NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandle>((IntPtr)(lpVtbl[32]))(pThis, NTHandle, riid, ppvObj);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandleByName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandleByName>((IntPtr)(lpVtbl[33]))(pThis, Name, Access, pNTHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int MakeResident([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_MakeResident>((IntPtr)(lpVtbl[34]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Evict([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Evict>((IntPtr)(lpVtbl[35]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateFence([NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateFence>((IntPtr)(lpVtbl[36]))(pThis, InitialValue, Flags, riid, ppFence);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDeviceRemovedReason()
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDeviceRemovedReason>((IntPtr)(lpVtbl[37]))(pThis);
            }
        }

        public void GetCopyableFootprints([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetCopyableFootprints>((IntPtr)(lpVtbl[38]))(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateQueryHeap([NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateQueryHeap>((IntPtr)(lpVtbl[39]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetStablePowerState([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetStablePowerState>((IntPtr)(lpVtbl[40]))(pThis, Enable);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandSignature([NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandSignature>((IntPtr)(lpVtbl[41]))(pThis, pDesc, pRootSignature, riid, ppvCommandSignature);
            }
        }

        public void GetResourceTiling([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetResourceTiling>((IntPtr)(lpVtbl[42]))(pThis, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        public LUID GetAdapterLuid()
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                LUID result;
                return *Marshal.GetDelegateForFunctionPointer<_GetAdapterLuid>((IntPtr)(lpVtbl[43]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineLibrary([NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineLibrary>((IntPtr)(lpVtbl[44]))(pThis, pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetEventOnMultipleFenceCompletion([NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetEventOnMultipleFenceCompletion>((IntPtr)(lpVtbl[45]))(pThis, ppFences, pFenceValues, NumFences, Flags, hEvent);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetResidencyPriority([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetResidencyPriority>((IntPtr)(lpVtbl[46]))(pThis, NumObjects, ppObjects, pPriorities);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineState([NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineState>((IntPtr)(lpVtbl[47]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromAddress([NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromAddress>((IntPtr)(lpVtbl[48]))(pThis, pAddress, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromFileMapping([NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromFileMapping>((IntPtr)(lpVtbl[49]))(pThis, hFileMapping, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnqueueMakeResident(D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnqueueMakeResident>((IntPtr)(lpVtbl[50]))(pThis, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList1([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [In] D3D12_COMMAND_LIST_FLAGS flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList1>((IntPtr)(lpVtbl[51]))(pThis, nodeMask, type, flags, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateProtectedResourceSession([NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateProtectedResourceSession>((IntPtr)(lpVtbl[52]))(pThis, pDesc, riid, ppSession);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource1([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource1>((IntPtr)(lpVtbl[53]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap1([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap1>((IntPtr)(lpVtbl[54]))(pThis, pDesc, pProtectedSession, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource1([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource1>((IntPtr)(lpVtbl[55]))(pThis, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo1([NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo1>((IntPtr)(lpVtbl[56]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateLifetimeTracker([NativeTypeName("ID3D12LifetimeOwner *")] [In] ID3D12LifetimeOwner* pOwner, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvTracker)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateLifetimeTracker>((IntPtr)(lpVtbl[57]))(pThis, pOwner, riid, ppvTracker);
            }
        }

        public void RemoveDevice()
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RemoveDevice>((IntPtr)(lpVtbl[58]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnumerateMetaCommands([NativeTypeName("UINT *")] [In][Out] uint* pNumMetaCommands, [NativeTypeName("D3D12_META_COMMAND_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out][Optional] D3D12_META_COMMAND_DESC* pDescs)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnumerateMetaCommands>((IntPtr)(lpVtbl[59]))(pThis, pNumMetaCommands, pDescs);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnumerateMetaCommandParameters([NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [In] D3D12_META_COMMAND_PARAMETER_STAGE Stage, [NativeTypeName("UINT *")] [Out][Optional] uint* pTotalStructureSizeInBytes, [NativeTypeName("UINT *")] [In][Out] uint* pParameterCount, [NativeTypeName("D3D12_META_COMMAND_PARAMETER_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][Out][Optional] D3D12_META_COMMAND_PARAMETER_DESC* pParameterDescs)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnumerateMetaCommandParameters>((IntPtr)(lpVtbl[60]))(pThis, CommandId, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateMetaCommand([NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [NativeTypeName("UINT")] [In] uint NodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] void* pCreationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr CreationParametersDataSizeInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppMetaCommand)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateMetaCommand>((IntPtr)(lpVtbl[61]))(pThis, CommandId, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateStateObject([NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppStateObject)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateStateObject>((IntPtr)(lpVtbl[62]))(pThis, pDesc, riid, ppStateObject);
            }
        }

        public void GetRaytracingAccelerationStructurePrebuildInfo([NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS* pDesc, [NativeTypeName("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO *")] [Out] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetRaytracingAccelerationStructurePrebuildInfo>((IntPtr)(lpVtbl[63]))(pThis, pDesc, pInfo);
            }
        }

        public D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS CheckDriverMatchingIdentifier([In] D3D12_SERIALIZED_DATA_TYPE SerializedDataType, [NativeTypeName("const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER *")] [Const] [In] D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER* pIdentifierToCheck)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckDriverMatchingIdentifier>((IntPtr)(lpVtbl[64]))(pThis, SerializedDataType, pIdentifierToCheck);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetBackgroundProcessingMode(D3D12_BACKGROUND_PROCESSING_MODE Mode, D3D12_MEASUREMENTS_ACTION MeasurementsAction, [NativeTypeName("HANDLE")] [In][Optional] IntPtr hEventToSignalUponCompletion, [NativeTypeName("BOOL *")] [Out][Optional] int* pbFurtherMeasurementsDesired)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetBackgroundProcessingMode>((IntPtr)(lpVtbl[65]))(pThis, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int AddToStateObject([NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pAddition, [NativeTypeName("ID3D12StateObject *")] ID3D12StateObject* pStateObjectToGrowFrom, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppNewStateObject)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddToStateObject>((IntPtr)(lpVtbl[66]))(pThis, pAddition, pStateObjectToGrowFrom, riid, ppNewStateObject);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateProtectedResourceSession1([NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC1 *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC1* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession)
        {
            fixed (ID3D12Device7* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateProtectedResourceSession1>((IntPtr)(lpVtbl[67]))(pThis, pDesc, riid, ppSession);
            }
        }
    }

    [Guid("9218E6BB-F944-4F7E-A75C-B1B2C7B701F3")]
    [NativeTypeName("struct ID3D12Device8 : ID3D12Device7")]
    [NativeInheritance("ID3D12Device7")]
    public unsafe partial struct ID3D12Device8
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Device8* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Device8* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Device8* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Device8* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Device8* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Device8* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Device8* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNodeCount(ID3D12Device8* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandQueue(ID3D12Device8* pThis, [NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandAllocator(ID3D12Device8* pThis, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateGraphicsPipelineState(ID3D12Device8* pThis, [NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateComputePipelineState(ID3D12Device8* pThis, [NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList(ID3D12Device8* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12Device8* pThis, D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateDescriptorHeap(ID3D12Device8* pThis, [NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetDescriptorHandleIncrementSize(ID3D12Device8* pThis, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateRootSignature(ID3D12Device8* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateConstantBufferView(ID3D12Device8* pThis, [NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateShaderResourceView(ID3D12Device8* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateUnorderedAccessView(ID3D12Device8* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateRenderTargetView(ID3D12Device8* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateDepthStencilView(ID3D12Device8* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateSampler(ID3D12Device8* pThis, [NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptors(ID3D12Device8* pThis, [NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyDescriptorsSimple(ID3D12Device8* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo(ID3D12Device8* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_HEAP_PROPERTIES* _GetCustomHeapProperties(ID3D12Device8* pThis, D3D12_HEAP_PROPERTIES* _result, [NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource(ID3D12Device8* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap(ID3D12Device8* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePlacedResource(ID3D12Device8* pThis, [NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource(ID3D12Device8* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateSharedHandle(ID3D12Device8* pThis, [NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandle(ID3D12Device8* pThis, [NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenSharedHandleByName(ID3D12Device8* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _MakeResident(ID3D12Device8* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Evict(ID3D12Device8* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateFence(ID3D12Device8* pThis, [NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDeviceRemovedReason(ID3D12Device8* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetCopyableFootprints(ID3D12Device8* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateQueryHeap(ID3D12Device8* pThis, [NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetStablePowerState(ID3D12Device8* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandSignature(ID3D12Device8* pThis, [NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetResourceTiling(ID3D12Device8* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate LUID* _GetAdapterLuid(ID3D12Device8* pThis, LUID* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineLibrary(ID3D12Device8* pThis, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetEventOnMultipleFenceCompletion(ID3D12Device8* pThis, [NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetResidencyPriority(ID3D12Device8* pThis, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePipelineState(ID3D12Device8* pThis, [NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromAddress(ID3D12Device8* pThis, [NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _OpenExistingHeapFromFileMapping(ID3D12Device8* pThis, [NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnqueueMakeResident(ID3D12Device8* pThis, D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommandList1(ID3D12Device8* pThis, [NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [In] D3D12_COMMAND_LIST_FLAGS flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateProtectedResourceSession(ID3D12Device8* pThis, [NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource1(ID3D12Device8* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateHeap1(ID3D12Device8* pThis, [NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateReservedResource1(ID3D12Device8* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo1(ID3D12Device8* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateLifetimeTracker(ID3D12Device8* pThis, [NativeTypeName("ID3D12LifetimeOwner *")] [In] ID3D12LifetimeOwner* pOwner, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvTracker);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RemoveDevice(ID3D12Device8* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnumerateMetaCommands(ID3D12Device8* pThis, [NativeTypeName("UINT *")] [In][Out] uint* pNumMetaCommands, [NativeTypeName("D3D12_META_COMMAND_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out][Optional] D3D12_META_COMMAND_DESC* pDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _EnumerateMetaCommandParameters(ID3D12Device8* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [In] D3D12_META_COMMAND_PARAMETER_STAGE Stage, [NativeTypeName("UINT *")] [Out][Optional] uint* pTotalStructureSizeInBytes, [NativeTypeName("UINT *")] [In][Out] uint* pParameterCount, [NativeTypeName("D3D12_META_COMMAND_PARAMETER_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][Out][Optional] D3D12_META_COMMAND_PARAMETER_DESC* pParameterDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateMetaCommand(ID3D12Device8* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [NativeTypeName("UINT")] [In] uint NodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] void* pCreationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr CreationParametersDataSizeInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppMetaCommand);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateStateObject(ID3D12Device8* pThis, [NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppStateObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetRaytracingAccelerationStructurePrebuildInfo(ID3D12Device8* pThis, [NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS* pDesc, [NativeTypeName("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO *")] [Out] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS _CheckDriverMatchingIdentifier(ID3D12Device8* pThis, [In] D3D12_SERIALIZED_DATA_TYPE SerializedDataType, [NativeTypeName("const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER *")] [Const] [In] D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER* pIdentifierToCheck);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetBackgroundProcessingMode(ID3D12Device8* pThis, D3D12_BACKGROUND_PROCESSING_MODE Mode, D3D12_MEASUREMENTS_ACTION MeasurementsAction, [NativeTypeName("HANDLE")] [In][Optional] IntPtr hEventToSignalUponCompletion, [NativeTypeName("BOOL *")] [Out][Optional] int* pbFurtherMeasurementsDesired);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _AddToStateObject(ID3D12Device8* pThis, [NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pAddition, [NativeTypeName("ID3D12StateObject *")] ID3D12StateObject* pStateObjectToGrowFrom, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppNewStateObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateProtectedResourceSession1(ID3D12Device8* pThis, [NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC1 *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC1* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_ALLOCATION_INFO* _GetResourceAllocationInfo2(ID3D12Device8* pThis, D3D12_RESOURCE_ALLOCATION_INFO* _result, [NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC1 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC1* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateCommittedResource2(ID3D12Device8* pThis, [NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC1 *")] [Const] [In] D3D12_RESOURCE_DESC1* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreatePlacedResource1(ID3D12Device8* pThis, [NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC1 *")] [Const] [In] D3D12_RESOURCE_DESC1* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CreateSamplerFeedbackUnorderedAccessView(ID3D12Device8* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pTargetedResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pFeedbackResource, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _GetCopyableFootprints1(ID3D12Device8* pThis, [NativeTypeName("const D3D12_RESOURCE_DESC1 *")] [Const] [In] D3D12_RESOURCE_DESC1* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNodeCount()
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNodeCount>((IntPtr)(lpVtbl[7]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandQueue([NativeTypeName("const D3D12_COMMAND_QUEUE_DESC *")] [Const] [In] D3D12_COMMAND_QUEUE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandQueue)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandQueue>((IntPtr)(lpVtbl[8]))(pThis, pDesc, riid, ppCommandQueue);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandAllocator([In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandAllocator)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandAllocator>((IntPtr)(lpVtbl[9]))(pThis, type, riid, ppCommandAllocator);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateGraphicsPipelineState([NativeTypeName("const D3D12_GRAPHICS_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateGraphicsPipelineState>((IntPtr)(lpVtbl[10]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateComputePipelineState([NativeTypeName("const D3D12_COMPUTE_PIPELINE_STATE_DESC *")] [Const] [In] D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateComputePipelineState>((IntPtr)(lpVtbl[11]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pCommandAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList>((IntPtr)(lpVtbl[12]))(pThis, nodeMask, type, pCommandAllocator, pInitialState, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE Feature, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[13]))(pThis, Feature, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateDescriptorHeap([NativeTypeName("const D3D12_DESCRIPTOR_HEAP_DESC *")] [Const] [In] D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateDescriptorHeap>((IntPtr)(lpVtbl[14]))(pThis, pDescriptorHeapDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetDescriptorHandleIncrementSize([In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDescriptorHandleIncrementSize>((IntPtr)(lpVtbl[15]))(pThis, DescriptorHeapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateRootSignature([NativeTypeName("UINT")] [In] uint nodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pBlobWithRootSignature, [NativeTypeName("SIZE_T")] [In] UIntPtr blobLengthInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvRootSignature)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateRootSignature>((IntPtr)(lpVtbl[16]))(pThis, nodeMask, pBlobWithRootSignature, blobLengthInBytes, riid, ppvRootSignature);
            }
        }

        public void CreateConstantBufferView([NativeTypeName("const D3D12_CONSTANT_BUFFER_VIEW_DESC *")] [Const] [In][Optional] D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateConstantBufferView>((IntPtr)(lpVtbl[17]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CreateShaderResourceView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_SHADER_RESOURCE_VIEW_DESC *")] [Const] [In][Optional] D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateShaderResourceView>((IntPtr)(lpVtbl[18]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateUnorderedAccessView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCounterResource, [NativeTypeName("const D3D12_UNORDERED_ACCESS_VIEW_DESC *")] [Const] [In][Optional] D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateUnorderedAccessView>((IntPtr)(lpVtbl[19]))(pThis, pResource, pCounterResource, pDesc, DestDescriptor);
            }
        }

        public void CreateRenderTargetView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_RENDER_TARGET_VIEW_DESC *")] [Const] [In][Optional] D3D12_RENDER_TARGET_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateRenderTargetView>((IntPtr)(lpVtbl[20]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateDepthStencilView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DEPTH_STENCIL_VIEW_DESC *")] [Const] [In][Optional] D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateDepthStencilView>((IntPtr)(lpVtbl[21]))(pThis, pResource, pDesc, DestDescriptor);
            }
        }

        public void CreateSampler([NativeTypeName("const D3D12_SAMPLER_DESC *")] [Const] [In] D3D12_SAMPLER_DESC* pDesc, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateSampler>((IntPtr)(lpVtbl[22]))(pThis, pDesc, DestDescriptor);
            }
        }

        public void CopyDescriptors([NativeTypeName("UINT")] [In] uint NumDestDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pDestDescriptorRangeSizes, [NativeTypeName("UINT")] [In] uint NumSrcDescriptorRanges, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In] D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, [NativeTypeName("const UINT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] uint* pSrcDescriptorRangeSizes, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptors>((IntPtr)(lpVtbl[23]))(pThis, NumDestDescriptorRanges, pDestDescriptorRangeStarts, pDestDescriptorRangeSizes, NumSrcDescriptorRanges, pSrcDescriptorRangeStarts, pSrcDescriptorRangeSizes, DescriptorHeapsType);
            }
        }

        public void CopyDescriptorsSimple([NativeTypeName("UINT")] [In] uint NumDescriptors, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptorRangeStart, [In] D3D12_CPU_DESCRIPTOR_HANDLE SrcDescriptorRangeStart, [In] D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyDescriptorsSimple>((IntPtr)(lpVtbl[24]))(pThis, NumDescriptors, DestDescriptorRangeStart, SrcDescriptorRangeStart, DescriptorHeapsType);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo([NativeTypeName("UINT")] [In] uint visibleMask, [NativeTypeName("UINT")] [In] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo>((IntPtr)(lpVtbl[25]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs);
            }
        }

        public D3D12_HEAP_PROPERTIES GetCustomHeapProperties([NativeTypeName("UINT")] [In] uint nodeMask, D3D12_HEAP_TYPE heapType)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                D3D12_HEAP_PROPERTIES result;
                return *Marshal.GetDelegateForFunctionPointer<_GetCustomHeapProperties>((IntPtr)(lpVtbl[26]))(pThis, &result, nodeMask, heapType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource>((IntPtr)(lpVtbl[27]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap>((IntPtr)(lpVtbl[28]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePlacedResource([NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePlacedResource>((IntPtr)(lpVtbl[29]))(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource>((IntPtr)(lpVtbl[30]))(pThis, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateSharedHandle([NativeTypeName("ID3D12DeviceChild *")] [In] ID3D12DeviceChild* pObject, [NativeTypeName("const SECURITY_ATTRIBUTES *")] [Const] [In][Optional] SECURITY_ATTRIBUTES* pAttributes, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In][Optional] ushort* Name, [NativeTypeName("HANDLE *")] [Out] IntPtr* pHandle)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateSharedHandle>((IntPtr)(lpVtbl[31]))(pThis, pObject, pAttributes, Access, Name, pHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandle([NativeTypeName("HANDLE")] [In] IntPtr NTHandle, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvObj)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandle>((IntPtr)(lpVtbl[32]))(pThis, NTHandle, riid, ppvObj);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenSharedHandleByName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name, [NativeTypeName("DWORD")] uint Access, [NativeTypeName("HANDLE *")] [Out] IntPtr* pNTHandle)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenSharedHandleByName>((IntPtr)(lpVtbl[33]))(pThis, Name, Access, pNTHandle);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int MakeResident([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_MakeResident>((IntPtr)(lpVtbl[34]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Evict([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Evict>((IntPtr)(lpVtbl[35]))(pThis, NumObjects, ppObjects);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateFence([NativeTypeName("UINT64")] ulong InitialValue, D3D12_FENCE_FLAGS Flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppFence)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateFence>((IntPtr)(lpVtbl[36]))(pThis, InitialValue, Flags, riid, ppFence);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDeviceRemovedReason()
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDeviceRemovedReason>((IntPtr)(lpVtbl[37]))(pThis);
            }
        }

        public void GetCopyableFootprints([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetCopyableFootprints>((IntPtr)(lpVtbl[38]))(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateQueryHeap([NativeTypeName("const D3D12_QUERY_HEAP_DESC *")] [Const] [In] D3D12_QUERY_HEAP_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateQueryHeap>((IntPtr)(lpVtbl[39]))(pThis, pDesc, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetStablePowerState([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetStablePowerState>((IntPtr)(lpVtbl[40]))(pThis, Enable);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandSignature([NativeTypeName("const D3D12_COMMAND_SIGNATURE_DESC *")] [Const] [In] D3D12_COMMAND_SIGNATURE_DESC* pDesc, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvCommandSignature)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandSignature>((IntPtr)(lpVtbl[41]))(pThis, pDesc, pRootSignature, riid, ppvCommandSignature);
            }
        }

        public void GetResourceTiling([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("UINT *")] [Out][Optional] uint* pNumTilesForEntireResource, [NativeTypeName("D3D12_PACKED_MIP_INFO *")] [Out][Optional] D3D12_PACKED_MIP_INFO* pPackedMipDesc, [NativeTypeName("D3D12_TILE_SHAPE *")] [Out][Optional] D3D12_TILE_SHAPE* pStandardTileShapeForNonPackedMips, [NativeTypeName("UINT *")] [In][Out][Optional] uint* pNumSubresourceTilings, [NativeTypeName("UINT")] [In] uint FirstSubresourceTilingToGet, [NativeTypeName("D3D12_SUBRESOURCE_TILING *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] D3D12_SUBRESOURCE_TILING* pSubresourceTilingsForNonPackedMips)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetResourceTiling>((IntPtr)(lpVtbl[42]))(pThis, pTiledResource, pNumTilesForEntireResource, pPackedMipDesc, pStandardTileShapeForNonPackedMips, pNumSubresourceTilings, FirstSubresourceTilingToGet, pSubresourceTilingsForNonPackedMips);
            }
        }

        public LUID GetAdapterLuid()
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                LUID result;
                return *Marshal.GetDelegateForFunctionPointer<_GetAdapterLuid>((IntPtr)(lpVtbl[43]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineLibrary([NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pLibraryBlob, [NativeTypeName("SIZE_T")] UIntPtr BlobLength, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineLibrary)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineLibrary>((IntPtr)(lpVtbl[44]))(pThis, pLibraryBlob, BlobLength, riid, ppPipelineLibrary);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetEventOnMultipleFenceCompletion([NativeTypeName("ID3D12Fence *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ID3D12Fence** ppFences, [NativeTypeName("const UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] ulong* pFenceValues, [NativeTypeName("UINT")] uint NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAGS Flags, [NativeTypeName("HANDLE")] IntPtr hEvent)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetEventOnMultipleFenceCompletion>((IntPtr)(lpVtbl[45]))(pThis, ppFences, pFenceValues, NumFences, Flags, hEvent);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetResidencyPriority([NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12Pageable** ppObjects, [NativeTypeName("const D3D12_RESIDENCY_PRIORITY *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESIDENCY_PRIORITY* pPriorities)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetResidencyPriority>((IntPtr)(lpVtbl[46]))(pThis, NumObjects, ppObjects, pPriorities);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePipelineState([NativeTypeName("const D3D12_PIPELINE_STATE_STREAM_DESC *")] [Const] D3D12_PIPELINE_STATE_STREAM_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppPipelineState)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePipelineState>((IntPtr)(lpVtbl[47]))(pThis, pDesc, riid, ppPipelineState);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromAddress([NativeTypeName("const void *")] [Const] [In] void* pAddress, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromAddress>((IntPtr)(lpVtbl[48]))(pThis, pAddress, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int OpenExistingHeapFromFileMapping([NativeTypeName("HANDLE")] [In] IntPtr hFileMapping, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvHeap)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_OpenExistingHeapFromFileMapping>((IntPtr)(lpVtbl[49]))(pThis, hFileMapping, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnqueueMakeResident(D3D12_RESIDENCY_FLAGS Flags, [NativeTypeName("UINT")] uint NumObjects, [NativeTypeName("ID3D12Pageable *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Pageable** ppObjects, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFenceToSignal, [NativeTypeName("UINT64")] ulong FenceValueToSignal)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnqueueMakeResident>((IntPtr)(lpVtbl[50]))(pThis, Flags, NumObjects, ppObjects, pFenceToSignal, FenceValueToSignal);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommandList1([NativeTypeName("UINT")] [In] uint nodeMask, [In] D3D12_COMMAND_LIST_TYPE type, [In] D3D12_COMMAND_LIST_FLAGS flags, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppCommandList)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommandList1>((IntPtr)(lpVtbl[51]))(pThis, nodeMask, type, flags, riid, ppCommandList);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateProtectedResourceSession([NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateProtectedResourceSession>((IntPtr)(lpVtbl[52]))(pThis, pDesc, riid, ppSession);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource1([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource1>((IntPtr)(lpVtbl[53]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateHeap1([NativeTypeName("const D3D12_HEAP_DESC *")] [Const] [In] D3D12_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvHeap)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateHeap1>((IntPtr)(lpVtbl[54]))(pThis, pDesc, pProtectedSession, riid, ppvHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateReservedResource1([NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [In] D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateReservedResource1>((IntPtr)(lpVtbl[55]))(pThis, pDesc, InitialState, pOptimizedClearValue, pProtectedSession, riid, ppvResource);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo1([NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo1>((IntPtr)(lpVtbl[56]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateLifetimeTracker([NativeTypeName("ID3D12LifetimeOwner *")] [In] ID3D12LifetimeOwner* pOwner, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvTracker)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateLifetimeTracker>((IntPtr)(lpVtbl[57]))(pThis, pOwner, riid, ppvTracker);
            }
        }

        public void RemoveDevice()
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RemoveDevice>((IntPtr)(lpVtbl[58]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnumerateMetaCommands([NativeTypeName("UINT *")] [In][Out] uint* pNumMetaCommands, [NativeTypeName("D3D12_META_COMMAND_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out][Optional] D3D12_META_COMMAND_DESC* pDescs)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnumerateMetaCommands>((IntPtr)(lpVtbl[59]))(pThis, pNumMetaCommands, pDescs);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int EnumerateMetaCommandParameters([NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [In] D3D12_META_COMMAND_PARAMETER_STAGE Stage, [NativeTypeName("UINT *")] [Out][Optional] uint* pTotalStructureSizeInBytes, [NativeTypeName("UINT *")] [In][Out] uint* pParameterCount, [NativeTypeName("D3D12_META_COMMAND_PARAMETER_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][Out][Optional] D3D12_META_COMMAND_PARAMETER_DESC* pParameterDescs)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_EnumerateMetaCommandParameters>((IntPtr)(lpVtbl[60]))(pThis, CommandId, Stage, pTotalStructureSizeInBytes, pParameterCount, pParameterDescs);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateMetaCommand([NativeTypeName("const GUID &")] [Const] [In] Guid* CommandId, [NativeTypeName("UINT")] [In] uint NodeMask, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] void* pCreationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr CreationParametersDataSizeInBytes, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppMetaCommand)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateMetaCommand>((IntPtr)(lpVtbl[61]))(pThis, CommandId, NodeMask, pCreationParametersData, CreationParametersDataSizeInBytes, riid, ppMetaCommand);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateStateObject([NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pDesc, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppStateObject)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateStateObject>((IntPtr)(lpVtbl[62]))(pThis, pDesc, riid, ppStateObject);
            }
        }

        public void GetRaytracingAccelerationStructurePrebuildInfo([NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS* pDesc, [NativeTypeName("D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO *")] [Out] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO* pInfo)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetRaytracingAccelerationStructurePrebuildInfo>((IntPtr)(lpVtbl[63]))(pThis, pDesc, pInfo);
            }
        }

        public D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS CheckDriverMatchingIdentifier([In] D3D12_SERIALIZED_DATA_TYPE SerializedDataType, [NativeTypeName("const D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER *")] [Const] [In] D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER* pIdentifierToCheck)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckDriverMatchingIdentifier>((IntPtr)(lpVtbl[64]))(pThis, SerializedDataType, pIdentifierToCheck);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetBackgroundProcessingMode(D3D12_BACKGROUND_PROCESSING_MODE Mode, D3D12_MEASUREMENTS_ACTION MeasurementsAction, [NativeTypeName("HANDLE")] [In][Optional] IntPtr hEventToSignalUponCompletion, [NativeTypeName("BOOL *")] [Out][Optional] int* pbFurtherMeasurementsDesired)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetBackgroundProcessingMode>((IntPtr)(lpVtbl[65]))(pThis, Mode, MeasurementsAction, hEventToSignalUponCompletion, pbFurtherMeasurementsDesired);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int AddToStateObject([NativeTypeName("const D3D12_STATE_OBJECT_DESC *")] [Const] D3D12_STATE_OBJECT_DESC* pAddition, [NativeTypeName("ID3D12StateObject *")] ID3D12StateObject* pStateObjectToGrowFrom, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppNewStateObject)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddToStateObject>((IntPtr)(lpVtbl[66]))(pThis, pAddition, pStateObjectToGrowFrom, riid, ppNewStateObject);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateProtectedResourceSession1([NativeTypeName("const D3D12_PROTECTED_RESOURCE_SESSION_DESC1 *")] [Const] [In] D3D12_PROTECTED_RESOURCE_SESSION_DESC1* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppSession)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateProtectedResourceSession1>((IntPtr)(lpVtbl[67]))(pThis, pDesc, riid, ppSession);
            }
        }

        public D3D12_RESOURCE_ALLOCATION_INFO GetResourceAllocationInfo2([NativeTypeName("UINT")] uint visibleMask, [NativeTypeName("UINT")] uint numResourceDescs, [NativeTypeName("const D3D12_RESOURCE_DESC1 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] D3D12_RESOURCE_DESC1* pResourceDescs, [NativeTypeName("D3D12_RESOURCE_ALLOCATION_INFO1 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_RESOURCE_ALLOCATION_INFO1* pResourceAllocationInfo1)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                D3D12_RESOURCE_ALLOCATION_INFO result;
                return *Marshal.GetDelegateForFunctionPointer<_GetResourceAllocationInfo2>((IntPtr)(lpVtbl[68]))(pThis, &result, visibleMask, numResourceDescs, pResourceDescs, pResourceAllocationInfo1);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateCommittedResource2([NativeTypeName("const D3D12_HEAP_PROPERTIES *")] [Const] [In] D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, [NativeTypeName("const D3D12_RESOURCE_DESC1 *")] [Const] [In] D3D12_RESOURCE_DESC1* pDesc, D3D12_RESOURCE_STATES InitialResourceState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedSession, [NativeTypeName("const IID &")] [Const] Guid* riidResource, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateCommittedResource2>((IntPtr)(lpVtbl[69]))(pThis, pHeapProperties, HeapFlags, pDesc, InitialResourceState, pOptimizedClearValue, pProtectedSession, riidResource, ppvResource);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreatePlacedResource1([NativeTypeName("ID3D12Heap *")] [In] ID3D12Heap* pHeap, [NativeTypeName("UINT64")] ulong HeapOffset, [NativeTypeName("const D3D12_RESOURCE_DESC1 *")] [Const] [In] D3D12_RESOURCE_DESC1* pDesc, D3D12_RESOURCE_STATES InitialState, [NativeTypeName("const D3D12_CLEAR_VALUE *")] [Const] [In][Optional] D3D12_CLEAR_VALUE* pOptimizedClearValue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvResource)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreatePlacedResource1>((IntPtr)(lpVtbl[70]))(pThis, pHeap, HeapOffset, pDesc, InitialState, pOptimizedClearValue, riid, ppvResource);
            }
        }

        public void CreateSamplerFeedbackUnorderedAccessView([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pTargetedResource, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pFeedbackResource, [In] D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CreateSamplerFeedbackUnorderedAccessView>((IntPtr)(lpVtbl[71]))(pThis, pTargetedResource, pFeedbackResource, DestDescriptor);
            }
        }

        public void GetCopyableFootprints1([NativeTypeName("const D3D12_RESOURCE_DESC1 *")] [Const] [In] D3D12_RESOURCE_DESC1* pResourceDesc, [NativeTypeName("UINT")] uint FirstSubresource, [NativeTypeName("UINT")] uint NumSubresources, [NativeTypeName("UINT64")] ulong BaseOffset, [NativeTypeName("D3D12_PLACED_SUBRESOURCE_FOOTPRINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_PLACED_SUBRESOURCE_FOOTPRINT* pLayouts, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] uint* pNumRows, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] ulong* pRowSizeInBytes, [NativeTypeName("UINT64 *")] [Out][Optional] ulong* pTotalBytes)
        {
            fixed (ID3D12Device8* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_GetCopyableFootprints1>((IntPtr)(lpVtbl[72]))(pThis, pResourceDesc, FirstSubresource, NumSubresources, BaseOffset, pLayouts, pNumRows, pRowSizeInBytes, pTotalBytes);
            }
        }
    }

    [Guid("9D5E227A-4430-4161-88B3-3ECA6BB16E19")]
    [NativeTypeName("struct ID3D12Resource1 : ID3D12Resource")]
    [NativeInheritance("ID3D12Resource")]
    public unsafe partial struct ID3D12Resource1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Resource1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Resource1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Resource1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Resource1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Resource1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Resource1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Resource1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12Resource1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Map(ID3D12Resource1* pThis, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pReadRange, [NativeTypeName("void **")] [Out][Optional] void** ppData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _Unmap(ID3D12Resource1* pThis, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pWrittenRange);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_DESC* _GetDesc(ID3D12Resource1* pThis, D3D12_RESOURCE_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public delegate ulong _GetGPUVirtualAddress(ID3D12Resource1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _WriteToSubresource(ID3D12Resource1* pThis, [NativeTypeName("UINT")] uint DstSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pDstBox, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] uint SrcRowPitch, [NativeTypeName("UINT")] uint SrcDepthPitch);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _ReadFromSubresource(ID3D12Resource1* pThis, [NativeTypeName("void *")] [Out] void* pDstData, [NativeTypeName("UINT")] uint DstRowPitch, [NativeTypeName("UINT")] uint DstDepthPitch, [NativeTypeName("UINT")] uint SrcSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetHeapProperties(ID3D12Resource1* pThis, [NativeTypeName("D3D12_HEAP_PROPERTIES *")] [Out][Optional] D3D12_HEAP_PROPERTIES* pHeapProperties, [NativeTypeName("D3D12_HEAP_FLAGS *")] [Out][Optional] D3D12_HEAP_FLAGS* pHeapFlags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetProtectedResourceSession(ID3D12Resource1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Map([NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pReadRange, [NativeTypeName("void **")] [Out][Optional] void** ppData)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Map>((IntPtr)(lpVtbl[8]))(pThis, Subresource, pReadRange, ppData);
            }
        }

        public void Unmap([NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pWrittenRange)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_Unmap>((IntPtr)(lpVtbl[9]))(pThis, Subresource, pWrittenRange);
            }
        }

        public D3D12_RESOURCE_DESC GetDesc()
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                D3D12_RESOURCE_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[10]))(pThis, &result);
            }
        }

        [return: NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong GetGPUVirtualAddress()
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetGPUVirtualAddress>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int WriteToSubresource([NativeTypeName("UINT")] uint DstSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pDstBox, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] uint SrcRowPitch, [NativeTypeName("UINT")] uint SrcDepthPitch)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_WriteToSubresource>((IntPtr)(lpVtbl[12]))(pThis, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int ReadFromSubresource([NativeTypeName("void *")] [Out] void* pDstData, [NativeTypeName("UINT")] uint DstRowPitch, [NativeTypeName("UINT")] uint DstDepthPitch, [NativeTypeName("UINT")] uint SrcSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_ReadFromSubresource>((IntPtr)(lpVtbl[13]))(pThis, pDstData, DstRowPitch, DstDepthPitch, SrcSubresource, pSrcBox);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetHeapProperties([NativeTypeName("D3D12_HEAP_PROPERTIES *")] [Out][Optional] D3D12_HEAP_PROPERTIES* pHeapProperties, [NativeTypeName("D3D12_HEAP_FLAGS *")] [Out][Optional] D3D12_HEAP_FLAGS* pHeapFlags)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetHeapProperties>((IntPtr)(lpVtbl[14]))(pThis, pHeapProperties, pHeapFlags);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetProtectedResourceSession([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession)
        {
            fixed (ID3D12Resource1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetProtectedResourceSession>((IntPtr)(lpVtbl[15]))(pThis, riid, ppProtectedSession);
            }
        }
    }

    [Guid("BE36EC3B-EA85-4AEB-A45A-E9D76404A495")]
    [NativeTypeName("struct ID3D12Resource2 : ID3D12Resource1")]
    [NativeInheritance("ID3D12Resource1")]
    public unsafe partial struct ID3D12Resource2
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Resource2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Resource2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Resource2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Resource2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Resource2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Resource2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Resource2* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12Resource2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Map(ID3D12Resource2* pThis, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pReadRange, [NativeTypeName("void **")] [Out][Optional] void** ppData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _Unmap(ID3D12Resource2* pThis, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pWrittenRange);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_DESC* _GetDesc(ID3D12Resource2* pThis, D3D12_RESOURCE_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public delegate ulong _GetGPUVirtualAddress(ID3D12Resource2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _WriteToSubresource(ID3D12Resource2* pThis, [NativeTypeName("UINT")] uint DstSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pDstBox, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] uint SrcRowPitch, [NativeTypeName("UINT")] uint SrcDepthPitch);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _ReadFromSubresource(ID3D12Resource2* pThis, [NativeTypeName("void *")] [Out] void* pDstData, [NativeTypeName("UINT")] uint DstRowPitch, [NativeTypeName("UINT")] uint DstDepthPitch, [NativeTypeName("UINT")] uint SrcSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetHeapProperties(ID3D12Resource2* pThis, [NativeTypeName("D3D12_HEAP_PROPERTIES *")] [Out][Optional] D3D12_HEAP_PROPERTIES* pHeapProperties, [NativeTypeName("D3D12_HEAP_FLAGS *")] [Out][Optional] D3D12_HEAP_FLAGS* pHeapFlags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetProtectedResourceSession(ID3D12Resource2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_RESOURCE_DESC1* _GetDesc1(ID3D12Resource2* pThis, D3D12_RESOURCE_DESC1* _result);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Map([NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pReadRange, [NativeTypeName("void **")] [Out][Optional] void** ppData)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Map>((IntPtr)(lpVtbl[8]))(pThis, Subresource, pReadRange, ppData);
            }
        }

        public void Unmap([NativeTypeName("UINT")] uint Subresource, [NativeTypeName("const D3D12_RANGE *")] [Const] [In][Optional] D3D12_RANGE* pWrittenRange)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_Unmap>((IntPtr)(lpVtbl[9]))(pThis, Subresource, pWrittenRange);
            }
        }

        public D3D12_RESOURCE_DESC GetDesc()
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                D3D12_RESOURCE_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[10]))(pThis, &result);
            }
        }

        [return: NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")]
        public ulong GetGPUVirtualAddress()
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetGPUVirtualAddress>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int WriteToSubresource([NativeTypeName("UINT")] uint DstSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pDstBox, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] uint SrcRowPitch, [NativeTypeName("UINT")] uint SrcDepthPitch)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_WriteToSubresource>((IntPtr)(lpVtbl[12]))(pThis, DstSubresource, pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int ReadFromSubresource([NativeTypeName("void *")] [Out] void* pDstData, [NativeTypeName("UINT")] uint DstRowPitch, [NativeTypeName("UINT")] uint DstDepthPitch, [NativeTypeName("UINT")] uint SrcSubresource, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_ReadFromSubresource>((IntPtr)(lpVtbl[13]))(pThis, pDstData, DstRowPitch, DstDepthPitch, SrcSubresource, pSrcBox);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetHeapProperties([NativeTypeName("D3D12_HEAP_PROPERTIES *")] [Out][Optional] D3D12_HEAP_PROPERTIES* pHeapProperties, [NativeTypeName("D3D12_HEAP_FLAGS *")] [Out][Optional] D3D12_HEAP_FLAGS* pHeapFlags)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetHeapProperties>((IntPtr)(lpVtbl[14]))(pThis, pHeapProperties, pHeapFlags);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetProtectedResourceSession([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession)
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetProtectedResourceSession>((IntPtr)(lpVtbl[15]))(pThis, riid, ppProtectedSession);
            }
        }

        public D3D12_RESOURCE_DESC1 GetDesc1()
        {
            fixed (ID3D12Resource2* pThis = &this)
            {
                D3D12_RESOURCE_DESC1 result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc1>((IntPtr)(lpVtbl[16]))(pThis, &result);
            }
        }
    }

    [Guid("572F7389-2168-49E3-9693-D6DF5871BF6D")]
    [NativeTypeName("struct ID3D12Heap1 : ID3D12Heap")]
    [NativeInheritance("ID3D12Heap")]
    public unsafe partial struct ID3D12Heap1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Heap1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Heap1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Heap1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12Heap1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12Heap1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12Heap1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12Heap1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12Heap1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_HEAP_DESC* _GetDesc(ID3D12Heap1* pThis, D3D12_HEAP_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetProtectedResourceSession(ID3D12Heap1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Heap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Heap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Heap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12Heap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12Heap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12Heap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12Heap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12Heap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public D3D12_HEAP_DESC GetDesc()
        {
            fixed (ID3D12Heap1* pThis = &this)
            {
                D3D12_HEAP_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[8]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetProtectedResourceSession([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession)
        {
            fixed (ID3D12Heap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetProtectedResourceSession>((IntPtr)(lpVtbl[9]))(pThis, riid, ppProtectedSession);
            }
        }
    }

    [Guid("6FDA83A7-B84C-4E38-9AC8-C7BD22016B3D")]
    [NativeTypeName("struct ID3D12GraphicsCommandList3 : ID3D12GraphicsCommandList2")]
    [NativeInheritance("ID3D12GraphicsCommandList2")]
    public unsafe partial struct ID3D12GraphicsCommandList3
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12GraphicsCommandList3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12GraphicsCommandList3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12GraphicsCommandList3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12GraphicsCommandList3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawInstanced(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawIndexedInstanced(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _Dispatch(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyBufferRegion(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTextureRegion(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyResource(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTiles(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresource(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetPrimitiveTopology(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetViewports(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetScissorRects(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetBlendFactor(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetStencilRef(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint StencilRef);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPipelineState(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteBundle(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetDescriptorHeaps(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootSignature(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootSignature(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootDescriptorTable(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootDescriptorTable(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstant(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstant(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstants(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstants(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootConstantBufferView(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootConstantBufferView(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootShaderResourceView(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootShaderResourceView(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootUnorderedAccessView(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootUnorderedAccessView(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetIndexBuffer(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetVertexBuffers(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SOSetTargets(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetRenderTargets(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearDepthStencilView(ID3D12GraphicsCommandList3* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearRenderTargetView(ID3D12GraphicsCommandList3* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewUint(ID3D12GraphicsCommandList3* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewFloat(ID3D12GraphicsCommandList3* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12GraphicsCommandList3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteIndirect(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT64(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetDepthBounds(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetSamplePositions(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresourceRegion(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetViewInstanceMask(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] [In] uint Mask);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetProtectedResourceSession(ID3D12GraphicsCommandList3* pThis, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator, pInitialState);
            }
        }

        public void ClearState([NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis, pPipelineState);
            }
        }

        public void DrawInstanced([NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawInstanced>((IntPtr)(lpVtbl[12]))(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }
        }

        public void DrawIndexedInstanced([NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawIndexedInstanced>((IntPtr)(lpVtbl[13]))(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }
        }

        public void Dispatch([NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_Dispatch>((IntPtr)(lpVtbl[14]))(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }
        }

        public void CopyBufferRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyBufferRegion>((IntPtr)(lpVtbl[15]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
            }
        }

        public void CopyTextureRegion([NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTextureRegion>((IntPtr)(lpVtbl[16]))(pThis, pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
            }
        }

        public void CopyResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyResource>((IntPtr)(lpVtbl[17]))(pThis, pDstResource, pSrcResource);
            }
        }

        public void CopyTiles([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTiles>((IntPtr)(lpVtbl[18]))(pThis, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
            }
        }

        public void ResolveSubresource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresource>((IntPtr)(lpVtbl[19]))(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }
        }

        public void IASetPrimitiveTopology([NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetPrimitiveTopology>((IntPtr)(lpVtbl[20]))(pThis, PrimitiveTopology);
            }
        }

        public void RSSetViewports([NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetViewports>((IntPtr)(lpVtbl[21]))(pThis, NumViewports, pViewports);
            }
        }

        public void RSSetScissorRects([NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetScissorRects>((IntPtr)(lpVtbl[22]))(pThis, NumRects, pRects);
            }
        }

        public void OMSetBlendFactor([NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetBlendFactor>((IntPtr)(lpVtbl[23]))(pThis, BlendFactor);
            }
        }

        public void OMSetStencilRef([NativeTypeName("UINT")] [In] uint StencilRef)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetStencilRef>((IntPtr)(lpVtbl[24]))(pThis, StencilRef);
            }
        }

        public void SetPipelineState([NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPipelineState>((IntPtr)(lpVtbl[25]))(pThis, pPipelineState);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[26]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void ExecuteBundle([NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteBundle>((IntPtr)(lpVtbl[27]))(pThis, pCommandList);
            }
        }

        public void SetDescriptorHeaps([NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetDescriptorHeaps>((IntPtr)(lpVtbl[28]))(pThis, NumDescriptorHeaps, ppDescriptorHeaps);
            }
        }

        public void SetComputeRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootSignature>((IntPtr)(lpVtbl[29]))(pThis, pRootSignature);
            }
        }

        public void SetGraphicsRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootSignature>((IntPtr)(lpVtbl[30]))(pThis, pRootSignature);
            }
        }

        public void SetComputeRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootDescriptorTable>((IntPtr)(lpVtbl[31]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetGraphicsRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootDescriptorTable>((IntPtr)(lpVtbl[32]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetComputeRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstant>((IntPtr)(lpVtbl[33]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstant>((IntPtr)(lpVtbl[34]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstants>((IntPtr)(lpVtbl[35]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstants>((IntPtr)(lpVtbl[36]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootConstantBufferView>((IntPtr)(lpVtbl[37]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootConstantBufferView>((IntPtr)(lpVtbl[38]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootShaderResourceView>((IntPtr)(lpVtbl[39]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootShaderResourceView>((IntPtr)(lpVtbl[40]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootUnorderedAccessView>((IntPtr)(lpVtbl[41]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootUnorderedAccessView>((IntPtr)(lpVtbl[42]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void IASetIndexBuffer([NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetIndexBuffer>((IntPtr)(lpVtbl[43]))(pThis, pView);
            }
        }

        public void IASetVertexBuffers([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetVertexBuffers>((IntPtr)(lpVtbl[44]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void SOSetTargets([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SOSetTargets>((IntPtr)(lpVtbl[45]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void OMSetRenderTargets([NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetRenderTargets>((IntPtr)(lpVtbl[46]))(pThis, NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
            }
        }

        public void ClearDepthStencilView([In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearDepthStencilView>((IntPtr)(lpVtbl[47]))(pThis, DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
            }
        }

        public void ClearRenderTargetView([In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearRenderTargetView>((IntPtr)(lpVtbl[48]))(pThis, RenderTargetView, ColorRGBA, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewUint([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewUint>((IntPtr)(lpVtbl[49]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewFloat([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewFloat>((IntPtr)(lpVtbl[50]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[51]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[52]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[53]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[54]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[55]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[56]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[57]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[58]))(pThis);
            }
        }

        public void ExecuteIndirect([NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteIndirect>((IntPtr)(lpVtbl[59]))(pThis, pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
            }
        }

        public void AtomicCopyBufferUINT([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT>((IntPtr)(lpVtbl[60]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void AtomicCopyBufferUINT64([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT64>((IntPtr)(lpVtbl[61]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void OMSetDepthBounds([NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetDepthBounds>((IntPtr)(lpVtbl[62]))(pThis, Min, Max);
            }
        }

        public void SetSamplePositions([NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetSamplePositions>((IntPtr)(lpVtbl[63]))(pThis, NumSamplesPerPixel, NumPixels, pSamplePositions);
            }
        }

        public void ResolveSubresourceRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresourceRegion>((IntPtr)(lpVtbl[64]))(pThis, pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
            }
        }

        public void SetViewInstanceMask([NativeTypeName("UINT")] [In] uint Mask)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetViewInstanceMask>((IntPtr)(lpVtbl[65]))(pThis, Mask);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[66]))(pThis, Count, pParams, pModes);
            }
        }

        public void SetProtectedResourceSession([NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession)
        {
            fixed (ID3D12GraphicsCommandList3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetProtectedResourceSession>((IntPtr)(lpVtbl[67]))(pThis, pProtectedResourceSession);
            }
        }
    }

    public enum D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE
    {
        D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD = 0,
        D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE = (D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD + 1),
        D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR = (D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE + 1),
        D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS = (D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR + 1),
    }

    public partial struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS
    {
        public D3D12_CLEAR_VALUE ClearValue;
    }

    public partial struct D3D12_RENDER_PASS_BEGINNING_ACCESS
    {
        public D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE Type;

        [NativeTypeName("D3D12_RENDER_PASS_BEGINNING_ACCESS::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:17439:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS Clear;
        }
    }

    public enum D3D12_RENDER_PASS_ENDING_ACCESS_TYPE
    {
        D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD = 0,
        D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE = (D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD + 1),
        D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE = (D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE + 1),
        D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS = (D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE + 1),
    }

    public partial struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS
    {
        [NativeTypeName("UINT")]
        public uint SrcSubresource;

        [NativeTypeName("UINT")]
        public uint DstSubresource;

        [NativeTypeName("UINT")]
        public uint DstX;

        [NativeTypeName("UINT")]
        public uint DstY;

        [NativeTypeName("D3D12_RECT")]
        public RECT SrcRect;
    }

    public unsafe partial struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pSrcResource;

        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pDstResource;

        [NativeTypeName("UINT")]
        public uint SubresourceCount;

        [NativeTypeName("const D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS *")]
        [Const]
        public D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS* pSubresourceParameters;

        public DXGI_FORMAT Format;

        public D3D12_RESOLVE_MODE ResolveMode;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int PreserveResolveSource;
    }

    public partial struct D3D12_RENDER_PASS_ENDING_ACCESS
    {
        public D3D12_RENDER_PASS_ENDING_ACCESS_TYPE Type;

        [NativeTypeName("D3D12_RENDER_PASS_ENDING_ACCESS::(anonymous union at D:/repos/win32metadata/artifacts/InstalledPackages/Microsoft.Windows.SDK.CPP.10.0.19041.5/c/Include/10.0.19041.0/um/d3d12.h:17477:5)")]
        public _Anonymous_e__Union Anonymous;

        [StructLayout(LayoutKind.Explicit)]
        public partial struct _Anonymous_e__Union
        {
            [FieldOffset(0)]
            public D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS Resolve;
        }
    }

    public partial struct D3D12_RENDER_PASS_RENDER_TARGET_DESC
    {
        public D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;

        public D3D12_RENDER_PASS_BEGINNING_ACCESS BeginningAccess;

        public D3D12_RENDER_PASS_ENDING_ACCESS EndingAccess;
    }

    public partial struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC
    {
        public D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;

        public D3D12_RENDER_PASS_BEGINNING_ACCESS DepthBeginningAccess;

        public D3D12_RENDER_PASS_BEGINNING_ACCESS StencilBeginningAccess;

        public D3D12_RENDER_PASS_ENDING_ACCESS DepthEndingAccess;

        public D3D12_RENDER_PASS_ENDING_ACCESS StencilEndingAccess;
    }

    public enum D3D12_RENDER_PASS_FLAGS
    {
        D3D12_RENDER_PASS_FLAG_NONE = 0,
        D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES = 0x1,
        D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS = 0x2,
        D3D12_RENDER_PASS_FLAG_RESUMING_PASS = 0x4,
    }

    [Guid("DBB84C27-36CE-4FC9-B801-F048C46AC570")]
    [NativeTypeName("struct ID3D12MetaCommand : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12MetaCommand
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12MetaCommand* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12MetaCommand* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12MetaCommand* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12MetaCommand* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12MetaCommand* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12MetaCommand* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12MetaCommand* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12MetaCommand* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetRequiredParameterResourceSize(ID3D12MetaCommand* pThis, [In] D3D12_META_COMMAND_PARAMETER_STAGE Stage, [NativeTypeName("UINT")] [In] uint ParameterIndex);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12MetaCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12MetaCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12MetaCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12MetaCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12MetaCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12MetaCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12MetaCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12MetaCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetRequiredParameterResourceSize([In] D3D12_META_COMMAND_PARAMETER_STAGE Stage, [NativeTypeName("UINT")] [In] uint ParameterIndex)
        {
            fixed (ID3D12MetaCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetRequiredParameterResourceSize>((IntPtr)(lpVtbl[8]))(pThis, Stage, ParameterIndex);
            }
        }
    }

    public partial struct D3D12_DISPATCH_RAYS_DESC
    {
        public D3D12_GPU_VIRTUAL_ADDRESS_RANGE RayGenerationShaderRecord;

        public D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE MissShaderTable;

        public D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE HitGroupTable;

        public D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE CallableShaderTable;

        [NativeTypeName("UINT")]
        public uint Width;

        [NativeTypeName("UINT")]
        public uint Height;

        [NativeTypeName("UINT")]
        public uint Depth;
    }

    [Guid("8754318E-D3A9-4541-98CF-645B50DC4874")]
    [NativeTypeName("struct ID3D12GraphicsCommandList4 : ID3D12GraphicsCommandList3")]
    [NativeInheritance("ID3D12GraphicsCommandList3")]
    public unsafe partial struct ID3D12GraphicsCommandList4
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12GraphicsCommandList4* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12GraphicsCommandList4* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12GraphicsCommandList4* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12GraphicsCommandList4* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawInstanced(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawIndexedInstanced(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _Dispatch(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyBufferRegion(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTextureRegion(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyResource(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTiles(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresource(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetPrimitiveTopology(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetViewports(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetScissorRects(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetBlendFactor(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetStencilRef(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint StencilRef);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPipelineState(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteBundle(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetDescriptorHeaps(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootSignature(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootSignature(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootDescriptorTable(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootDescriptorTable(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstant(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstant(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstants(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstants(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootConstantBufferView(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootConstantBufferView(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootShaderResourceView(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootShaderResourceView(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootUnorderedAccessView(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootUnorderedAccessView(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetIndexBuffer(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetVertexBuffers(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SOSetTargets(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetRenderTargets(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearDepthStencilView(ID3D12GraphicsCommandList4* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearRenderTargetView(ID3D12GraphicsCommandList4* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewUint(ID3D12GraphicsCommandList4* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewFloat(ID3D12GraphicsCommandList4* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12GraphicsCommandList4* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteIndirect(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT64(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetDepthBounds(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetSamplePositions(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresourceRegion(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetViewInstanceMask(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint Mask);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetProtectedResourceSession(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginRenderPass(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("UINT")] [In] uint NumRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_RENDER_TARGET_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_RENDER_PASS_RENDER_TARGET_DESC* pRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC *")] [Const] [In][Optional] D3D12_RENDER_PASS_DEPTH_STENCIL_DESC* pDepthStencil, D3D12_RENDER_PASS_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndRenderPass(ID3D12GraphicsCommandList4* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _InitializeMetaCommand(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pInitializationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr InitializationParametersDataSizeInBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteMetaCommand(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pExecutionParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr ExecutionParametersDataSizeInBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BuildRaytracingAccelerationStructure(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumPostbuildInfoDescs, [NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pPostbuildInfoDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EmitRaytracingAccelerationStructurePostbuildInfo(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumSourceAccelerationStructures, [NativeTypeName("const D3D12_GPU_VIRTUAL_ADDRESS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ulong* pSourceAccelerationStructureData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyRaytracingAccelerationStructure(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong DestAccelerationStructureData, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong SourceAccelerationStructureData, [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPipelineState1(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("ID3D12StateObject *")] [In] ID3D12StateObject* pStateObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DispatchRays(ID3D12GraphicsCommandList4* pThis, [NativeTypeName("const D3D12_DISPATCH_RAYS_DESC *")] [Const] [In] D3D12_DISPATCH_RAYS_DESC* pDesc);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator, pInitialState);
            }
        }

        public void ClearState([NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis, pPipelineState);
            }
        }

        public void DrawInstanced([NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawInstanced>((IntPtr)(lpVtbl[12]))(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }
        }

        public void DrawIndexedInstanced([NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawIndexedInstanced>((IntPtr)(lpVtbl[13]))(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }
        }

        public void Dispatch([NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_Dispatch>((IntPtr)(lpVtbl[14]))(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }
        }

        public void CopyBufferRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyBufferRegion>((IntPtr)(lpVtbl[15]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
            }
        }

        public void CopyTextureRegion([NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTextureRegion>((IntPtr)(lpVtbl[16]))(pThis, pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
            }
        }

        public void CopyResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyResource>((IntPtr)(lpVtbl[17]))(pThis, pDstResource, pSrcResource);
            }
        }

        public void CopyTiles([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTiles>((IntPtr)(lpVtbl[18]))(pThis, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
            }
        }

        public void ResolveSubresource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresource>((IntPtr)(lpVtbl[19]))(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }
        }

        public void IASetPrimitiveTopology([NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetPrimitiveTopology>((IntPtr)(lpVtbl[20]))(pThis, PrimitiveTopology);
            }
        }

        public void RSSetViewports([NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetViewports>((IntPtr)(lpVtbl[21]))(pThis, NumViewports, pViewports);
            }
        }

        public void RSSetScissorRects([NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetScissorRects>((IntPtr)(lpVtbl[22]))(pThis, NumRects, pRects);
            }
        }

        public void OMSetBlendFactor([NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetBlendFactor>((IntPtr)(lpVtbl[23]))(pThis, BlendFactor);
            }
        }

        public void OMSetStencilRef([NativeTypeName("UINT")] [In] uint StencilRef)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetStencilRef>((IntPtr)(lpVtbl[24]))(pThis, StencilRef);
            }
        }

        public void SetPipelineState([NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPipelineState>((IntPtr)(lpVtbl[25]))(pThis, pPipelineState);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[26]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void ExecuteBundle([NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteBundle>((IntPtr)(lpVtbl[27]))(pThis, pCommandList);
            }
        }

        public void SetDescriptorHeaps([NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetDescriptorHeaps>((IntPtr)(lpVtbl[28]))(pThis, NumDescriptorHeaps, ppDescriptorHeaps);
            }
        }

        public void SetComputeRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootSignature>((IntPtr)(lpVtbl[29]))(pThis, pRootSignature);
            }
        }

        public void SetGraphicsRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootSignature>((IntPtr)(lpVtbl[30]))(pThis, pRootSignature);
            }
        }

        public void SetComputeRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootDescriptorTable>((IntPtr)(lpVtbl[31]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetGraphicsRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootDescriptorTable>((IntPtr)(lpVtbl[32]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetComputeRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstant>((IntPtr)(lpVtbl[33]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstant>((IntPtr)(lpVtbl[34]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstants>((IntPtr)(lpVtbl[35]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstants>((IntPtr)(lpVtbl[36]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootConstantBufferView>((IntPtr)(lpVtbl[37]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootConstantBufferView>((IntPtr)(lpVtbl[38]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootShaderResourceView>((IntPtr)(lpVtbl[39]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootShaderResourceView>((IntPtr)(lpVtbl[40]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootUnorderedAccessView>((IntPtr)(lpVtbl[41]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootUnorderedAccessView>((IntPtr)(lpVtbl[42]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void IASetIndexBuffer([NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetIndexBuffer>((IntPtr)(lpVtbl[43]))(pThis, pView);
            }
        }

        public void IASetVertexBuffers([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetVertexBuffers>((IntPtr)(lpVtbl[44]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void SOSetTargets([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SOSetTargets>((IntPtr)(lpVtbl[45]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void OMSetRenderTargets([NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetRenderTargets>((IntPtr)(lpVtbl[46]))(pThis, NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
            }
        }

        public void ClearDepthStencilView([In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearDepthStencilView>((IntPtr)(lpVtbl[47]))(pThis, DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
            }
        }

        public void ClearRenderTargetView([In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearRenderTargetView>((IntPtr)(lpVtbl[48]))(pThis, RenderTargetView, ColorRGBA, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewUint([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewUint>((IntPtr)(lpVtbl[49]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewFloat([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewFloat>((IntPtr)(lpVtbl[50]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[51]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[52]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[53]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[54]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[55]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[56]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[57]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[58]))(pThis);
            }
        }

        public void ExecuteIndirect([NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteIndirect>((IntPtr)(lpVtbl[59]))(pThis, pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
            }
        }

        public void AtomicCopyBufferUINT([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT>((IntPtr)(lpVtbl[60]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void AtomicCopyBufferUINT64([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT64>((IntPtr)(lpVtbl[61]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void OMSetDepthBounds([NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetDepthBounds>((IntPtr)(lpVtbl[62]))(pThis, Min, Max);
            }
        }

        public void SetSamplePositions([NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetSamplePositions>((IntPtr)(lpVtbl[63]))(pThis, NumSamplesPerPixel, NumPixels, pSamplePositions);
            }
        }

        public void ResolveSubresourceRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresourceRegion>((IntPtr)(lpVtbl[64]))(pThis, pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
            }
        }

        public void SetViewInstanceMask([NativeTypeName("UINT")] [In] uint Mask)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetViewInstanceMask>((IntPtr)(lpVtbl[65]))(pThis, Mask);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[66]))(pThis, Count, pParams, pModes);
            }
        }

        public void SetProtectedResourceSession([NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetProtectedResourceSession>((IntPtr)(lpVtbl[67]))(pThis, pProtectedResourceSession);
            }
        }

        public void BeginRenderPass([NativeTypeName("UINT")] [In] uint NumRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_RENDER_TARGET_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_RENDER_PASS_RENDER_TARGET_DESC* pRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC *")] [Const] [In][Optional] D3D12_RENDER_PASS_DEPTH_STENCIL_DESC* pDepthStencil, D3D12_RENDER_PASS_FLAGS Flags)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginRenderPass>((IntPtr)(lpVtbl[68]))(pThis, NumRenderTargets, pRenderTargets, pDepthStencil, Flags);
            }
        }

        public void EndRenderPass()
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndRenderPass>((IntPtr)(lpVtbl[69]))(pThis);
            }
        }

        public void InitializeMetaCommand([NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pInitializationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr InitializationParametersDataSizeInBytes)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_InitializeMetaCommand>((IntPtr)(lpVtbl[70]))(pThis, pMetaCommand, pInitializationParametersData, InitializationParametersDataSizeInBytes);
            }
        }

        public void ExecuteMetaCommand([NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pExecutionParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr ExecutionParametersDataSizeInBytes)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteMetaCommand>((IntPtr)(lpVtbl[71]))(pThis, pMetaCommand, pExecutionParametersData, ExecutionParametersDataSizeInBytes);
            }
        }

        public void BuildRaytracingAccelerationStructure([NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumPostbuildInfoDescs, [NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pPostbuildInfoDescs)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BuildRaytracingAccelerationStructure>((IntPtr)(lpVtbl[72]))(pThis, pDesc, NumPostbuildInfoDescs, pPostbuildInfoDescs);
            }
        }

        public void EmitRaytracingAccelerationStructurePostbuildInfo([NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumSourceAccelerationStructures, [NativeTypeName("const D3D12_GPU_VIRTUAL_ADDRESS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ulong* pSourceAccelerationStructureData)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EmitRaytracingAccelerationStructurePostbuildInfo>((IntPtr)(lpVtbl[73]))(pThis, pDesc, NumSourceAccelerationStructures, pSourceAccelerationStructureData);
            }
        }

        public void CopyRaytracingAccelerationStructure([NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong DestAccelerationStructureData, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong SourceAccelerationStructureData, [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyRaytracingAccelerationStructure>((IntPtr)(lpVtbl[74]))(pThis, DestAccelerationStructureData, SourceAccelerationStructureData, Mode);
            }
        }

        public void SetPipelineState1([NativeTypeName("ID3D12StateObject *")] [In] ID3D12StateObject* pStateObject)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPipelineState1>((IntPtr)(lpVtbl[75]))(pThis, pStateObject);
            }
        }

        public void DispatchRays([NativeTypeName("const D3D12_DISPATCH_RAYS_DESC *")] [Const] [In] D3D12_DISPATCH_RAYS_DESC* pDesc)
        {
            fixed (ID3D12GraphicsCommandList4* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DispatchRays>((IntPtr)(lpVtbl[76]))(pThis, pDesc);
            }
        }
    }

    [Guid("7071E1F0-E84B-4B33-974F-12FA49DE65C5")]
    [NativeTypeName("struct ID3D12Tools : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12Tools
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Tools* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Tools* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Tools* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EnableShaderInstrumentation(ID3D12Tools* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int bEnable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public delegate int _ShaderInstrumentationEnabled(ID3D12Tools* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Tools* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Tools* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Tools* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        public void EnableShaderInstrumentation([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int bEnable)
        {
            fixed (ID3D12Tools* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EnableShaderInstrumentation>((IntPtr)(lpVtbl[3]))(pThis, bEnable);
            }
        }

        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public int ShaderInstrumentationEnabled()
        {
            fixed (ID3D12Tools* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_ShaderInstrumentationEnabled>((IntPtr)(lpVtbl[4]))(pThis);
            }
        }
    }

    public unsafe partial struct D3D12_SUBRESOURCE_DATA
    {
        [NativeTypeName("const void *")]
        [Const]
        public void* pData;

        [NativeTypeName("LONG_PTR")]
        public IntPtr RowPitch;

        [NativeTypeName("LONG_PTR")]
        public IntPtr SlicePitch;
    }

    public unsafe partial struct D3D12_MEMCPY_DEST
    {
        [NativeTypeName("void *")]
        public void* pData;

        [NativeTypeName("SIZE_T")]
        public UIntPtr RowPitch;

        [NativeTypeName("SIZE_T")]
        public UIntPtr SlicePitch;
    }

    [Guid("344488B7-6846-474B-B989-F027448245E0")]
    [NativeTypeName("struct ID3D12Debug : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12Debug
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Debug* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Debug* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Debug* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EnableDebugLayer(ID3D12Debug* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Debug* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Debug* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Debug* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        public void EnableDebugLayer()
        {
            fixed (ID3D12Debug* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EnableDebugLayer>((IntPtr)(lpVtbl[3]))(pThis);
            }
        }
    }

    public enum D3D12_GPU_BASED_VALIDATION_FLAGS
    {
        D3D12_GPU_BASED_VALIDATION_FLAGS_NONE = 0,
        D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING = 0x1,
    }

    [Guid("AFFAA4CA-63FE-4D8E-B8AD-159000AF4304")]
    [NativeTypeName("struct ID3D12Debug1 : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12Debug1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Debug1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Debug1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Debug1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EnableDebugLayer(ID3D12Debug1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetEnableGPUBasedValidation(ID3D12Debug1* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetEnableSynchronizedCommandQueueValidation(ID3D12Debug1* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Debug1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Debug1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Debug1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        public void EnableDebugLayer()
        {
            fixed (ID3D12Debug1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EnableDebugLayer>((IntPtr)(lpVtbl[3]))(pThis);
            }
        }

        public void SetEnableGPUBasedValidation([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Debug1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetEnableGPUBasedValidation>((IntPtr)(lpVtbl[4]))(pThis, Enable);
            }
        }

        public void SetEnableSynchronizedCommandQueueValidation([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Debug1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetEnableSynchronizedCommandQueueValidation>((IntPtr)(lpVtbl[5]))(pThis, Enable);
            }
        }
    }

    [Guid("93A665C4-A3B2-4E5D-B692-A26AE14E3374")]
    [NativeTypeName("struct ID3D12Debug2 : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12Debug2
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Debug2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Debug2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Debug2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGPUBasedValidationFlags(ID3D12Debug2* pThis, D3D12_GPU_BASED_VALIDATION_FLAGS Flags);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Debug2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Debug2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Debug2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        public void SetGPUBasedValidationFlags(D3D12_GPU_BASED_VALIDATION_FLAGS Flags)
        {
            fixed (ID3D12Debug2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGPUBasedValidationFlags>((IntPtr)(lpVtbl[3]))(pThis, Flags);
            }
        }
    }

    [Guid("5CF4E58F-F671-4FF1-A542-3686E3D153D1")]
    [NativeTypeName("struct ID3D12Debug3 : ID3D12Debug")]
    [NativeInheritance("ID3D12Debug")]
    public unsafe partial struct ID3D12Debug3
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12Debug3* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12Debug3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12Debug3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EnableDebugLayer(ID3D12Debug3* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetEnableGPUBasedValidation(ID3D12Debug3* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetEnableSynchronizedCommandQueueValidation(ID3D12Debug3* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGPUBasedValidationFlags(ID3D12Debug3* pThis, D3D12_GPU_BASED_VALIDATION_FLAGS Flags);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12Debug3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12Debug3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12Debug3* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        public void EnableDebugLayer()
        {
            fixed (ID3D12Debug3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EnableDebugLayer>((IntPtr)(lpVtbl[3]))(pThis);
            }
        }

        public void SetEnableGPUBasedValidation([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Debug3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetEnableGPUBasedValidation>((IntPtr)(lpVtbl[4]))(pThis, Enable);
            }
        }

        public void SetEnableSynchronizedCommandQueueValidation([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] int Enable)
        {
            fixed (ID3D12Debug3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetEnableSynchronizedCommandQueueValidation>((IntPtr)(lpVtbl[5]))(pThis, Enable);
            }
        }

        public void SetGPUBasedValidationFlags(D3D12_GPU_BASED_VALIDATION_FLAGS Flags)
        {
            fixed (ID3D12Debug3* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGPUBasedValidationFlags>((IntPtr)(lpVtbl[6]))(pThis, Flags);
            }
        }
    }

    public enum D3D12_RLDO_FLAGS
    {
        D3D12_RLDO_NONE = 0,
        D3D12_RLDO_SUMMARY = 0x1,
        D3D12_RLDO_DETAIL = 0x2,
        D3D12_RLDO_IGNORE_INTERNAL = 0x4,
    }

    public enum D3D12_DEBUG_DEVICE_PARAMETER_TYPE
    {
        D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS = 0,
        D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = (D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS + 1),
        D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR = (D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS + 1),
    }

    public enum D3D12_DEBUG_FEATURE
    {
        D3D12_DEBUG_FEATURE_NONE = 0,
        D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS = 0x1,
        D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING = 0x2,
        D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION = 0x4,
        D3D12_DEBUG_FEATURE_EMULATE_WINDOWS7 = 0x8,
    }

    public enum D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE
    {
        D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE = 0,
        D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY = (D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE + 1),
        D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION = (D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY + 1),
        D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION = (D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION + 1),
        NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES = (D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION + 1),
    }

    public enum D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS
    {
        D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE = 0,
        D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS = 0x1,
        D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS = 0x2,
        D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS = 0x4,
        D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK = 0x7,
    }

    public partial struct D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS
    {
        [NativeTypeName("UINT")]
        public uint MaxMessagesPerCommandList;

        public D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE DefaultShaderPatchMode;

        public D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS PipelineStateCreateFlags;
    }

    public partial struct D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR
    {
        [NativeTypeName("FLOAT")]
        public float SlowdownFactor;
    }

    [Guid("A9B71770-D099-4A65-A698-3DEE10020F88")]
    [NativeTypeName("struct ID3D12DebugDevice1 : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12DebugDevice1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DebugDevice1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DebugDevice1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DebugDevice1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetDebugParameter(ID3D12DebugDevice1* pThis, D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pData, [NativeTypeName("UINT")] uint DataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDebugParameter(ID3D12DebugDevice1* pThis, D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out] void* pData, [NativeTypeName("UINT")] uint DataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _ReportLiveDeviceObjects(ID3D12DebugDevice1* pThis, D3D12_RLDO_FLAGS Flags);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DebugDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DebugDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DebugDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetDebugParameter(D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pData, [NativeTypeName("UINT")] uint DataSize)
        {
            fixed (ID3D12DebugDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetDebugParameter>((IntPtr)(lpVtbl[3]))(pThis, Type, pData, DataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDebugParameter(D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out] void* pData, [NativeTypeName("UINT")] uint DataSize)
        {
            fixed (ID3D12DebugDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDebugParameter>((IntPtr)(lpVtbl[4]))(pThis, Type, pData, DataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int ReportLiveDeviceObjects(D3D12_RLDO_FLAGS Flags)
        {
            fixed (ID3D12DebugDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_ReportLiveDeviceObjects>((IntPtr)(lpVtbl[5]))(pThis, Flags);
            }
        }
    }

    [Guid("3FEBD6DD-4973-4787-8194-E45F9E28923E")]
    [NativeTypeName("struct ID3D12DebugDevice : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12DebugDevice
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DebugDevice* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DebugDevice* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DebugDevice* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetFeatureMask(ID3D12DebugDevice* pThis, D3D12_DEBUG_FEATURE Mask);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_DEBUG_FEATURE _GetFeatureMask(ID3D12DebugDevice* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _ReportLiveDeviceObjects(ID3D12DebugDevice* pThis, D3D12_RLDO_FLAGS Flags);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DebugDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DebugDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DebugDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetFeatureMask(D3D12_DEBUG_FEATURE Mask)
        {
            fixed (ID3D12DebugDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetFeatureMask>((IntPtr)(lpVtbl[3]))(pThis, Mask);
            }
        }

        public D3D12_DEBUG_FEATURE GetFeatureMask()
        {
            fixed (ID3D12DebugDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetFeatureMask>((IntPtr)(lpVtbl[4]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int ReportLiveDeviceObjects(D3D12_RLDO_FLAGS Flags)
        {
            fixed (ID3D12DebugDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_ReportLiveDeviceObjects>((IntPtr)(lpVtbl[5]))(pThis, Flags);
            }
        }
    }

    [Guid("60ECCBC1-378D-4DF1-894C-F8AC5CE4D7DD")]
    [NativeTypeName("struct ID3D12DebugDevice2 : ID3D12DebugDevice")]
    [NativeInheritance("ID3D12DebugDevice")]
    public unsafe partial struct ID3D12DebugDevice2
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DebugDevice2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DebugDevice2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DebugDevice2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetFeatureMask(ID3D12DebugDevice2* pThis, D3D12_DEBUG_FEATURE Mask);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_DEBUG_FEATURE _GetFeatureMask(ID3D12DebugDevice2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _ReportLiveDeviceObjects(ID3D12DebugDevice2* pThis, D3D12_RLDO_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetDebugParameter(ID3D12DebugDevice2* pThis, D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pData, [NativeTypeName("UINT")] uint DataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDebugParameter(ID3D12DebugDevice2* pThis, D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out] void* pData, [NativeTypeName("UINT")] uint DataSize);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DebugDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DebugDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DebugDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetFeatureMask(D3D12_DEBUG_FEATURE Mask)
        {
            fixed (ID3D12DebugDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetFeatureMask>((IntPtr)(lpVtbl[3]))(pThis, Mask);
            }
        }

        public D3D12_DEBUG_FEATURE GetFeatureMask()
        {
            fixed (ID3D12DebugDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetFeatureMask>((IntPtr)(lpVtbl[4]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int ReportLiveDeviceObjects(D3D12_RLDO_FLAGS Flags)
        {
            fixed (ID3D12DebugDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_ReportLiveDeviceObjects>((IntPtr)(lpVtbl[5]))(pThis, Flags);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetDebugParameter(D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pData, [NativeTypeName("UINT")] uint DataSize)
        {
            fixed (ID3D12DebugDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetDebugParameter>((IntPtr)(lpVtbl[6]))(pThis, Type, pData, DataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDebugParameter(D3D12_DEBUG_DEVICE_PARAMETER_TYPE Type, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out] void* pData, [NativeTypeName("UINT")] uint DataSize)
        {
            fixed (ID3D12DebugDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDebugParameter>((IntPtr)(lpVtbl[7]))(pThis, Type, pData, DataSize);
            }
        }
    }

    [Guid("09E0BF36-54AC-484F-8847-4BAEEAB6053A")]
    [NativeTypeName("struct ID3D12DebugCommandQueue : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12DebugCommandQueue
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DebugCommandQueue* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DebugCommandQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DebugCommandQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public delegate int _AssertResourceState(ID3D12DebugCommandQueue* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("UINT")] uint State);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DebugCommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DebugCommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DebugCommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public int AssertResourceState([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("UINT")] uint State)
        {
            fixed (ID3D12DebugCommandQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AssertResourceState>((IntPtr)(lpVtbl[3]))(pThis, pResource, Subresource, State);
            }
        }
    }

    public enum D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE
    {
        D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS = 0,
    }

    public partial struct D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS
    {
        public D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE ShaderPatchMode;
    }

    [Guid("102CA951-311B-4B01-B11F-ECB83E061B37")]
    [NativeTypeName("struct ID3D12DebugCommandList1 : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12DebugCommandList1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DebugCommandList1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DebugCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DebugCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public delegate int _AssertResourceState(ID3D12DebugCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("UINT")] uint State);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetDebugParameter(ID3D12DebugCommandList1* pThis, D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pData, [NativeTypeName("UINT")] uint DataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDebugParameter(ID3D12DebugCommandList1* pThis, D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out] void* pData, [NativeTypeName("UINT")] uint DataSize);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DebugCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DebugCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DebugCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public int AssertResourceState([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("UINT")] uint State)
        {
            fixed (ID3D12DebugCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AssertResourceState>((IntPtr)(lpVtbl[3]))(pThis, pResource, Subresource, State);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetDebugParameter(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pData, [NativeTypeName("UINT")] uint DataSize)
        {
            fixed (ID3D12DebugCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetDebugParameter>((IntPtr)(lpVtbl[4]))(pThis, Type, pData, DataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDebugParameter(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out] void* pData, [NativeTypeName("UINT")] uint DataSize)
        {
            fixed (ID3D12DebugCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDebugParameter>((IntPtr)(lpVtbl[5]))(pThis, Type, pData, DataSize);
            }
        }
    }

    [Guid("09E0BF36-54AC-484F-8847-4BAEEAB6053F")]
    [NativeTypeName("struct ID3D12DebugCommandList : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12DebugCommandList
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DebugCommandList* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DebugCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DebugCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public delegate int _AssertResourceState(ID3D12DebugCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("UINT")] uint State);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetFeatureMask(ID3D12DebugCommandList* pThis, D3D12_DEBUG_FEATURE Mask);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_DEBUG_FEATURE _GetFeatureMask(ID3D12DebugCommandList* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DebugCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DebugCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DebugCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public int AssertResourceState([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("UINT")] uint State)
        {
            fixed (ID3D12DebugCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AssertResourceState>((IntPtr)(lpVtbl[3]))(pThis, pResource, Subresource, State);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetFeatureMask(D3D12_DEBUG_FEATURE Mask)
        {
            fixed (ID3D12DebugCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetFeatureMask>((IntPtr)(lpVtbl[4]))(pThis, Mask);
            }
        }

        public D3D12_DEBUG_FEATURE GetFeatureMask()
        {
            fixed (ID3D12DebugCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetFeatureMask>((IntPtr)(lpVtbl[5]))(pThis);
            }
        }
    }

    [Guid("AEB575CF-4E06-48BE-BA3B-C450FC96652E")]
    [NativeTypeName("struct ID3D12DebugCommandList2 : ID3D12DebugCommandList")]
    [NativeInheritance("ID3D12DebugCommandList")]
    public unsafe partial struct ID3D12DebugCommandList2
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12DebugCommandList2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12DebugCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12DebugCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public delegate int _AssertResourceState(ID3D12DebugCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("UINT")] uint State);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetFeatureMask(ID3D12DebugCommandList2* pThis, D3D12_DEBUG_FEATURE Mask);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_DEBUG_FEATURE _GetFeatureMask(ID3D12DebugCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetDebugParameter(ID3D12DebugCommandList2* pThis, D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pData, [NativeTypeName("UINT")] uint DataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDebugParameter(ID3D12DebugCommandList2* pThis, D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out] void* pData, [NativeTypeName("UINT")] uint DataSize);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12DebugCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12DebugCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12DebugCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public int AssertResourceState([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("UINT")] uint State)
        {
            fixed (ID3D12DebugCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AssertResourceState>((IntPtr)(lpVtbl[3]))(pThis, pResource, Subresource, State);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetFeatureMask(D3D12_DEBUG_FEATURE Mask)
        {
            fixed (ID3D12DebugCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetFeatureMask>((IntPtr)(lpVtbl[4]))(pThis, Mask);
            }
        }

        public D3D12_DEBUG_FEATURE GetFeatureMask()
        {
            fixed (ID3D12DebugCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetFeatureMask>((IntPtr)(lpVtbl[5]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetDebugParameter(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pData, [NativeTypeName("UINT")] uint DataSize)
        {
            fixed (ID3D12DebugCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetDebugParameter>((IntPtr)(lpVtbl[6]))(pThis, Type, pData, DataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDebugParameter(D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE Type, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out] void* pData, [NativeTypeName("UINT")] uint DataSize)
        {
            fixed (ID3D12DebugCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDebugParameter>((IntPtr)(lpVtbl[7]))(pThis, Type, pData, DataSize);
            }
        }
    }

    [Guid("0ADF7D52-929C-4E61-ADDB-FFED30DE66EF")]
    [NativeTypeName("struct ID3D12SharingContract : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12SharingContract
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12SharingContract* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12SharingContract* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12SharingContract* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _Present(ID3D12SharingContract* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("HWND")] [In] IntPtr window);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SharedFenceSignal(ID3D12SharingContract* pThis, [NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFence, [NativeTypeName("UINT64")] ulong FenceValue);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginCapturableWork(ID3D12SharingContract* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndCapturableWork(ID3D12SharingContract* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12SharingContract* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12SharingContract* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12SharingContract* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        public void Present([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("UINT")] uint Subresource, [NativeTypeName("HWND")] [In] IntPtr window)
        {
            fixed (ID3D12SharingContract* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_Present>((IntPtr)(lpVtbl[3]))(pThis, pResource, Subresource, window);
            }
        }

        public void SharedFenceSignal([NativeTypeName("ID3D12Fence *")] [In] ID3D12Fence* pFence, [NativeTypeName("UINT64")] ulong FenceValue)
        {
            fixed (ID3D12SharingContract* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SharedFenceSignal>((IntPtr)(lpVtbl[4]))(pThis, pFence, FenceValue);
            }
        }

        public void BeginCapturableWork([NativeTypeName("const GUID &")] [Const] [In] Guid* guid)
        {
            fixed (ID3D12SharingContract* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginCapturableWork>((IntPtr)(lpVtbl[5]))(pThis, guid);
            }
        }

        public void EndCapturableWork([NativeTypeName("const GUID &")] [Const] [In] Guid* guid)
        {
            fixed (ID3D12SharingContract* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndCapturableWork>((IntPtr)(lpVtbl[6]))(pThis, guid);
            }
        }
    }

    public enum D3D12_MESSAGE_CATEGORY
    {
        D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED = 0,
        D3D12_MESSAGE_CATEGORY_MISCELLANEOUS = (D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED + 1),
        D3D12_MESSAGE_CATEGORY_INITIALIZATION = (D3D12_MESSAGE_CATEGORY_MISCELLANEOUS + 1),
        D3D12_MESSAGE_CATEGORY_CLEANUP = (D3D12_MESSAGE_CATEGORY_INITIALIZATION + 1),
        D3D12_MESSAGE_CATEGORY_COMPILATION = (D3D12_MESSAGE_CATEGORY_CLEANUP + 1),
        D3D12_MESSAGE_CATEGORY_STATE_CREATION = (D3D12_MESSAGE_CATEGORY_COMPILATION + 1),
        D3D12_MESSAGE_CATEGORY_STATE_SETTING = (D3D12_MESSAGE_CATEGORY_STATE_CREATION + 1),
        D3D12_MESSAGE_CATEGORY_STATE_GETTING = (D3D12_MESSAGE_CATEGORY_STATE_SETTING + 1),
        D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = (D3D12_MESSAGE_CATEGORY_STATE_GETTING + 1),
        D3D12_MESSAGE_CATEGORY_EXECUTION = (D3D12_MESSAGE_CATEGORY_RESOURCE_MANIPULATION + 1),
        D3D12_MESSAGE_CATEGORY_SHADER = (D3D12_MESSAGE_CATEGORY_EXECUTION + 1),
    }

    public enum D3D12_MESSAGE_SEVERITY
    {
        D3D12_MESSAGE_SEVERITY_CORRUPTION = 0,
        D3D12_MESSAGE_SEVERITY_ERROR = (D3D12_MESSAGE_SEVERITY_CORRUPTION + 1),
        D3D12_MESSAGE_SEVERITY_WARNING = (D3D12_MESSAGE_SEVERITY_ERROR + 1),
        D3D12_MESSAGE_SEVERITY_INFO = (D3D12_MESSAGE_SEVERITY_WARNING + 1),
        D3D12_MESSAGE_SEVERITY_MESSAGE = (D3D12_MESSAGE_SEVERITY_INFO + 1),
    }

    public enum D3D12_MESSAGE_ID
    {
        D3D12_MESSAGE_ID_UNKNOWN = 0,
        D3D12_MESSAGE_ID_STRING_FROM_APPLICATION = 1,
        D3D12_MESSAGE_ID_CORRUPTED_THIS = 2,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER1 = 3,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER2 = 4,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER3 = 5,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER4 = 6,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER5 = 7,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER6 = 8,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER7 = 9,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER8 = 10,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER9 = 11,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER10 = 12,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER11 = 13,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER12 = 14,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER13 = 15,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER14 = 16,
        D3D12_MESSAGE_ID_CORRUPTED_PARAMETER15 = 17,
        D3D12_MESSAGE_ID_CORRUPTED_MULTITHREADING = 18,
        D3D12_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = 19,
        D3D12_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = 20,
        D3D12_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = 21,
        D3D12_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = 24,
        D3D12_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = 25,
        D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 26,
        D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = 27,
        D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 28,
        D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANESLICE = 29,
        D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANESLICE = 30,
        D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 31,
        D3D12_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 32,
        D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 35,
        D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 36,
        D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = 37,
        D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = 38,
        D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANESLICE = 39,
        D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANESLICE = 40,
        D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 41,
        D3D12_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = 42,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 45,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = 46,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 47,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 48,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 49,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = 52,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = 53,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = 54,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 55,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = 56,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 57,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 58,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 59,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 60,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = 61,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 62,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 63,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = 64,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = 65,
        D3D12_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = 66,
        D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 67,
        D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = 68,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = 69,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 70,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 71,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 72,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 73,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 74,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 75,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 76,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 79,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 80,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 81,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 82,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 83,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 84,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 85,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 86,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 87,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 88,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 89,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 90,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 91,
        D3D12_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = 92,
        D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 93,
        D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = 94,
        D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = 95,
        D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = 96,
        D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 97,
        D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 98,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 100,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 101,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 102,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 103,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 104,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 105,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 106,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 107,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 108,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 109,
        D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = 111,
        D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = 112,
        D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = 113,
        D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 114,
        D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 115,
        D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 116,
        D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 117,
        D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = 135,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_NOT_SET = 200,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_ROOT_SIGNATURE_MISMATCH = 201,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_NOT_SET = 202,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 209,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_BUFFER_TOO_SMALL = 210,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_NOT_SET = 211,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_FORMAT_INVALID = 212,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_BUFFER_TOO_SMALL = 213,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INVALID_PRIMITIVETOPOLOGY = 219,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_VERTEX_STRIDE_UNALIGNED = 221,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_INDEX_OFFSET_UNALIGNED = 222,
        D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = 232,
        D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 233,
        D3D12_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 234,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 239,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 240,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = 245,
        D3D12_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = 253,
        D3D12_MESSAGE_ID_LIVE_OBJECT_SUMMARY = 255,
        D3D12_MESSAGE_ID_LIVE_DEVICE = 274,
        D3D12_MESSAGE_ID_LIVE_SWAPCHAIN = 275,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 276,
        D3D12_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 277,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 278,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 280,
        D3D12_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 283,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 284,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 285,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 286,
        D3D12_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 287,
        D3D12_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = 289,
        D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = 290,
        D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = 291,
        D3D12_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = 292,
        D3D12_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = 294,
        D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 295,
        D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = 296,
        D3D12_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 297,
        D3D12_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = 310,
        D3D12_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 318,
        D3D12_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = 321,
        D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 322,
        D3D12_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 323,
        D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 331,
        D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 332,
        D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 333,
        D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 334,
        D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 335,
        D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 336,
        D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 337,
        D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 340,
        D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 341,
        D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 342,
        D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANESLICE = 343,
        D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANESLICE = 344,
        D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 345,
        D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 346,
        D3D12_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 354,
        D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 401,
        D3D12_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = 403,
        D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 410,
        D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 412,
        D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 414,
        D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 416,
        D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 418,
        D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 420,
        D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 422,
        D3D12_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 425,
        D3D12_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 426,
        D3D12_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 427,
        D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 428,
        D3D12_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 429,
        D3D12_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 430,
        D3D12_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 431,
        D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = 447,
        D3D12_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = 448,
        D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = 493,
        D3D12_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = 494,
        D3D12_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = 506,
        D3D12_MESSAGE_ID_CREATEDEVICE_WARNING = 507,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_TYPE = 519,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_NULL_POINTER = 520,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SUBRESOURCE = 521,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_RESERVED_BITS = 522,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISSING_BIND_FLAGS = 523,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_MISC_FLAGS = 524,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_MATCHING_STATES = 525,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINATION = 526,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_BEFORE_AFTER_MISMATCH = 527,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_RESOURCE = 528,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_SAMPLE_COUNT = 529,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS = 530,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMBINED_FLAGS = 531,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAGS_FOR_FORMAT = 532,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_SPLIT_BARRIER = 533,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_END = 534,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_UNMATCHED_BEGIN = 535,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_FLAG = 536,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_COMMAND_LIST_TYPE = 537,
        D3D12_MESSAGE_ID_INVALID_SUBRESOURCE_STATE = 538,
        D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CONTENTION = 540,
        D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET = 541,
        D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_RESET_BUNDLE = 542,
        D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_CANNOT_RESET = 543,
        D3D12_MESSAGE_ID_COMMAND_LIST_OPEN = 544,
        D3D12_MESSAGE_ID_INVALID_BUNDLE_API = 546,
        D3D12_MESSAGE_ID_COMMAND_LIST_CLOSED = 547,
        D3D12_MESSAGE_ID_WRONG_COMMAND_ALLOCATOR_TYPE = 549,
        D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_SYNC = 552,
        D3D12_MESSAGE_ID_COMMAND_LIST_SYNC = 553,
        D3D12_MESSAGE_ID_SET_DESCRIPTOR_HEAP_INVALID = 554,
        D3D12_MESSAGE_ID_CREATE_COMMANDQUEUE = 557,
        D3D12_MESSAGE_ID_CREATE_COMMANDALLOCATOR = 558,
        D3D12_MESSAGE_ID_CREATE_PIPELINESTATE = 559,
        D3D12_MESSAGE_ID_CREATE_COMMANDLIST12 = 560,
        D3D12_MESSAGE_ID_CREATE_RESOURCE = 562,
        D3D12_MESSAGE_ID_CREATE_DESCRIPTORHEAP = 563,
        D3D12_MESSAGE_ID_CREATE_ROOTSIGNATURE = 564,
        D3D12_MESSAGE_ID_CREATE_LIBRARY = 565,
        D3D12_MESSAGE_ID_CREATE_HEAP = 566,
        D3D12_MESSAGE_ID_CREATE_MONITOREDFENCE = 567,
        D3D12_MESSAGE_ID_CREATE_QUERYHEAP = 568,
        D3D12_MESSAGE_ID_CREATE_COMMANDSIGNATURE = 569,
        D3D12_MESSAGE_ID_LIVE_COMMANDQUEUE = 570,
        D3D12_MESSAGE_ID_LIVE_COMMANDALLOCATOR = 571,
        D3D12_MESSAGE_ID_LIVE_PIPELINESTATE = 572,
        D3D12_MESSAGE_ID_LIVE_COMMANDLIST12 = 573,
        D3D12_MESSAGE_ID_LIVE_RESOURCE = 575,
        D3D12_MESSAGE_ID_LIVE_DESCRIPTORHEAP = 576,
        D3D12_MESSAGE_ID_LIVE_ROOTSIGNATURE = 577,
        D3D12_MESSAGE_ID_LIVE_LIBRARY = 578,
        D3D12_MESSAGE_ID_LIVE_HEAP = 579,
        D3D12_MESSAGE_ID_LIVE_MONITOREDFENCE = 580,
        D3D12_MESSAGE_ID_LIVE_QUERYHEAP = 581,
        D3D12_MESSAGE_ID_LIVE_COMMANDSIGNATURE = 582,
        D3D12_MESSAGE_ID_DESTROY_COMMANDQUEUE = 583,
        D3D12_MESSAGE_ID_DESTROY_COMMANDALLOCATOR = 584,
        D3D12_MESSAGE_ID_DESTROY_PIPELINESTATE = 585,
        D3D12_MESSAGE_ID_DESTROY_COMMANDLIST12 = 586,
        D3D12_MESSAGE_ID_DESTROY_RESOURCE = 588,
        D3D12_MESSAGE_ID_DESTROY_DESCRIPTORHEAP = 589,
        D3D12_MESSAGE_ID_DESTROY_ROOTSIGNATURE = 590,
        D3D12_MESSAGE_ID_DESTROY_LIBRARY = 591,
        D3D12_MESSAGE_ID_DESTROY_HEAP = 592,
        D3D12_MESSAGE_ID_DESTROY_MONITOREDFENCE = 593,
        D3D12_MESSAGE_ID_DESTROY_QUERYHEAP = 594,
        D3D12_MESSAGE_ID_DESTROY_COMMANDSIGNATURE = 595,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONS = 597,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMISCFLAGS = 599,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDARG_RETURN = 602,
        D3D12_MESSAGE_ID_CREATERESOURCE_OUTOFMEMORY_RETURN = 603,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDESC = 604,
        D3D12_MESSAGE_ID_POSSIBLY_INVALID_SUBRESOURCE_STATE = 607,
        D3D12_MESSAGE_ID_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 608,
        D3D12_MESSAGE_ID_POSSIBLE_INVALID_USE_OF_NON_RESIDENT_RESOURCE = 609,
        D3D12_MESSAGE_ID_BUNDLE_PIPELINE_STATE_MISMATCH = 610,
        D3D12_MESSAGE_ID_PRIMITIVE_TOPOLOGY_MISMATCH_PIPELINE_STATE = 611,
        D3D12_MESSAGE_ID_RENDER_TARGET_FORMAT_MISMATCH_PIPELINE_STATE = 613,
        D3D12_MESSAGE_ID_RENDER_TARGET_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 614,
        D3D12_MESSAGE_ID_DEPTH_STENCIL_FORMAT_MISMATCH_PIPELINE_STATE = 615,
        D3D12_MESSAGE_ID_DEPTH_STENCIL_SAMPLE_DESC_MISMATCH_PIPELINE_STATE = 616,
        D3D12_MESSAGE_ID_CREATESHADER_INVALIDBYTECODE = 622,
        D3D12_MESSAGE_ID_CREATEHEAP_NULLDESC = 623,
        D3D12_MESSAGE_ID_CREATEHEAP_INVALIDSIZE = 624,
        D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDHEAPTYPE = 625,
        D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 626,
        D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMEMORYPOOL = 627,
        D3D12_MESSAGE_ID_CREATEHEAP_INVALIDPROPERTIES = 628,
        D3D12_MESSAGE_ID_CREATEHEAP_INVALIDALIGNMENT = 629,
        D3D12_MESSAGE_ID_CREATEHEAP_UNRECOGNIZEDMISCFLAGS = 630,
        D3D12_MESSAGE_ID_CREATEHEAP_INVALIDMISCFLAGS = 631,
        D3D12_MESSAGE_ID_CREATEHEAP_INVALIDARG_RETURN = 632,
        D3D12_MESSAGE_ID_CREATEHEAP_OUTOFMEMORY_RETURN = 633,
        D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAPPROPERTIES = 634,
        D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPTYPE = 635,
        D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDCPUPAGEPROPERTIES = 636,
        D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDMEMORYPOOL = 637,
        D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPPROPERTIES = 638,
        D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_UNRECOGNIZEDHEAPMISCFLAGS = 639,
        D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDHEAPMISCFLAGS = 640,
        D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_INVALIDARG_RETURN = 641,
        D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_OUTOFMEMORY_RETURN = 642,
        D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_UNRECOGNIZEDHEAPTYPE = 643,
        D3D12_MESSAGE_ID_GETCUSTOMHEAPPROPERTIES_INVALIDHEAPTYPE = 644,
        D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_INVALID_DESC = 645,
        D3D12_MESSAGE_ID_INVALID_DESCRIPTOR_HANDLE = 646,
        D3D12_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 647,
        D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_RESOURCE = 649,
        D3D12_MESSAGE_ID_CREATE_CONSTANT_BUFFER_VIEW_INVALID_DESC = 650,
        D3D12_MESSAGE_ID_CREATE_UNORDEREDACCESS_VIEW_INVALID_COUNTER_USAGE = 652,
        D3D12_MESSAGE_ID_COPY_DESCRIPTORS_INVALID_RANGES = 653,
        D3D12_MESSAGE_ID_COPY_DESCRIPTORS_WRITE_ONLY_DESCRIPTOR = 654,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RTV_FORMAT_NOT_UNKNOWN = 655,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_RENDER_TARGET_COUNT = 656,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VERTEX_SHADER_NOT_SET = 657,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_NOT_SET = 658,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_HS_DS_SIGNATURE_MISMATCH = 659,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERINDEX = 660,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_COMPONENTTYPE = 661,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_REGISTERMASK = 662,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SYSTEMVALUE = 663,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 664,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_MINPRECISION = 665,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 666,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_XOR_DS_MISMATCH = 667,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 668,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 669,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 670,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 671,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 672,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_PRIMITIVETOPOLOGY = 673,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SYSTEMVALUE = 674,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 675,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 676,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_TYPE_MISMATCH = 677,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 678,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RENDERTARGETVIEW_NOT_SET = 679,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DEPTHSTENCILVIEW_NOT_SET = 680,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_INPUT_PRIMITIVE_MISMATCH = 681,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_POSITION_NOT_PRESENT = 682,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE_FLAGS = 683,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_INDEX_BUFFER_PROPERTIES = 684,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INVALID_SAMPLE_DESC = 685,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_HS_ROOT_SIGNATURE_MISMATCH = 686,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_DS_ROOT_SIGNATURE_MISMATCH = 687,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VS_ROOT_SIGNATURE_MISMATCH = 688,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_GS_ROOT_SIGNATURE_MISMATCH = 689,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_ROOT_SIGNATURE_MISMATCH = 690,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MISSING_ROOT_SIGNATURE = 691,
        D3D12_MESSAGE_ID_EXECUTE_BUNDLE_OPEN_BUNDLE = 692,
        D3D12_MESSAGE_ID_EXECUTE_BUNDLE_DESCRIPTOR_HEAP_MISMATCH = 693,
        D3D12_MESSAGE_ID_EXECUTE_BUNDLE_TYPE = 694,
        D3D12_MESSAGE_ID_DRAW_EMPTY_SCISSOR_RECTANGLE = 695,
        D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_BLOB_NOT_FOUND = 696,
        D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_DESERIALIZE_FAILED = 697,
        D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_INVALID_CONFIGURATION = 698,
        D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_SUPPORTED_ON_DEVICE = 699,
        D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLRESOURCEPROPERTIES = 700,
        D3D12_MESSAGE_ID_CREATERESOURCEANDHEAP_NULLHEAP = 701,
        D3D12_MESSAGE_ID_GETRESOURCEALLOCATIONINFO_INVALIDRDESCS = 702,
        D3D12_MESSAGE_ID_MAKERESIDENT_NULLOBJECTARRAY = 703,
        D3D12_MESSAGE_ID_EVICT_NULLOBJECTARRAY = 705,
        D3D12_MESSAGE_ID_SET_DESCRIPTOR_TABLE_INVALID = 708,
        D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_INVALID = 709,
        D3D12_MESSAGE_ID_SET_ROOT_CONSTANT_BUFFER_VIEW_INVALID = 710,
        D3D12_MESSAGE_ID_SET_ROOT_SHADER_RESOURCE_VIEW_INVALID = 711,
        D3D12_MESSAGE_ID_SET_ROOT_UNORDERED_ACCESS_VIEW_INVALID = 712,
        D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID_DESC = 713,
        D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID_DESC = 715,
        D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID_DESC = 717,
        D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDDIMENSIONALITY = 718,
        D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDLAYOUT = 719,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDDIMENSIONALITY = 720,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDALIGNMENT = 721,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDMIPLEVELS = 722,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDSAMPLEDESC = 723,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDLAYOUT = 724,
        D3D12_MESSAGE_ID_SET_INDEX_BUFFER_INVALID = 725,
        D3D12_MESSAGE_ID_SET_VERTEX_BUFFERS_INVALID = 726,
        D3D12_MESSAGE_ID_SET_STREAM_OUTPUT_BUFFERS_INVALID = 727,
        D3D12_MESSAGE_ID_SET_RENDER_TARGETS_INVALID = 728,
        D3D12_MESSAGE_ID_CREATEQUERY_HEAP_INVALID_PARAMETERS = 729,
        D3D12_MESSAGE_ID_BEGIN_END_QUERY_INVALID_PARAMETERS = 731,
        D3D12_MESSAGE_ID_CLOSE_COMMAND_LIST_OPEN_QUERY = 732,
        D3D12_MESSAGE_ID_RESOLVE_QUERY_DATA_INVALID_PARAMETERS = 733,
        D3D12_MESSAGE_ID_SET_PREDICATION_INVALID_PARAMETERS = 734,
        D3D12_MESSAGE_ID_TIMESTAMPS_NOT_SUPPORTED = 735,
        D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDFORMAT = 737,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDFORMAT = 738,
        D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDSUBRESOURCERANGE = 739,
        D3D12_MESSAGE_ID_GETCOPYABLEFOOTPRINTS_INVALIDBASEOFFSET = 740,
        D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDSUBRESOURCERANGE = 739,
        D3D12_MESSAGE_ID_GETCOPYABLELAYOUT_INVALIDBASEOFFSET = 740,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_INVALID_HEAP = 741,
        D3D12_MESSAGE_ID_CREATE_SAMPLER_INVALID = 742,
        D3D12_MESSAGE_ID_CREATECOMMANDSIGNATURE_INVALID = 743,
        D3D12_MESSAGE_ID_EXECUTE_INDIRECT_INVALID_PARAMETERS = 744,
        D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_RESOURCE_DIMENSION = 745,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUE = 815,
        D3D12_MESSAGE_ID_CREATERESOURCE_UNRECOGNIZEDCLEARVALUEFORMAT = 816,
        D3D12_MESSAGE_ID_CREATERESOURCE_INVALIDCLEARVALUEFORMAT = 817,
        D3D12_MESSAGE_ID_CREATERESOURCE_CLEARVALUEDENORMFLUSH = 818,
        D3D12_MESSAGE_ID_CLEARRENDERTARGETVIEW_MISMATCHINGCLEARVALUE = 820,
        D3D12_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_MISMATCHINGCLEARVALUE = 821,
        D3D12_MESSAGE_ID_MAP_INVALIDHEAP = 822,
        D3D12_MESSAGE_ID_UNMAP_INVALIDHEAP = 823,
        D3D12_MESSAGE_ID_MAP_INVALIDRESOURCE = 824,
        D3D12_MESSAGE_ID_UNMAP_INVALIDRESOURCE = 825,
        D3D12_MESSAGE_ID_MAP_INVALIDSUBRESOURCE = 826,
        D3D12_MESSAGE_ID_UNMAP_INVALIDSUBRESOURCE = 827,
        D3D12_MESSAGE_ID_MAP_INVALIDRANGE = 828,
        D3D12_MESSAGE_ID_UNMAP_INVALIDRANGE = 829,
        D3D12_MESSAGE_ID_MAP_INVALIDDATAPOINTER = 832,
        D3D12_MESSAGE_ID_MAP_INVALIDARG_RETURN = 833,
        D3D12_MESSAGE_ID_MAP_OUTOFMEMORY_RETURN = 834,
        D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_BUNDLENOTSUPPORTED = 835,
        D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_COMMANDLISTMISMATCH = 836,
        D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_OPENCOMMANDLIST = 837,
        D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_FAILEDCOMMANDLIST = 838,
        D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLDST = 839,
        D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDDSTRESOURCEDIMENSION = 840,
        D3D12_MESSAGE_ID_COPYBUFFERREGION_DSTRANGEOUTOFBOUNDS = 841,
        D3D12_MESSAGE_ID_COPYBUFFERREGION_NULLSRC = 842,
        D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDSRCRESOURCEDIMENSION = 843,
        D3D12_MESSAGE_ID_COPYBUFFERREGION_SRCRANGEOUTOFBOUNDS = 844,
        D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALIDCOPYFLAGS = 845,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLDST = 846,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTTYPE = 847,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCEDIMENSION = 848,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTRESOURCE = 849,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTSUBRESOURCE = 850,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTOFFSET = 851,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDDSTFORMAT = 852,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTFORMAT = 853,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDIMENSIONS = 854,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTROWPITCH = 855,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTPLACEMENT = 856,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTDSPLACEDFOOTPRINTFORMAT = 857,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_DSTREGIONOUTOFBOUNDS = 858,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_NULLSRC = 859,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCTYPE = 860,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCEDIMENSION = 861,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCRESOURCE = 862,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCSUBRESOURCE = 863,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCOFFSET = 864,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_UNRECOGNIZEDSRCFORMAT = 865,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCFORMAT = 866,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDIMENSIONS = 867,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCROWPITCH = 868,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCPLACEMENT = 869,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCDSPLACEDFOOTPRINTFORMAT = 870,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_SRCREGIONOUTOFBOUNDS = 871,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDDSTCOORDINATES = 872,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDSRCBOX = 873,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_FORMATMISMATCH = 874,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_EMPTYBOX = 875,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_INVALIDCOPYFLAGS = 876,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SUBRESOURCE_INDEX = 877,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_FORMAT = 878,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_MISMATCH = 879,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALID_SAMPLE_COUNT = 880,
        D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_INVALID_SHADER = 881,
        D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_CS_ROOT_SIGNATURE_MISMATCH = 882,
        D3D12_MESSAGE_ID_CREATECOMPUTEPIPELINESTATE_MISSING_ROOT_SIGNATURE = 883,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALIDCACHEDBLOB = 884,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBADAPTERMISMATCH = 885,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDRIVERVERSIONMISMATCH = 886,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBDESCMISMATCH = 887,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CACHEDBLOBIGNORED = 888,
        D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDHEAP = 889,
        D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDRESOURCE = 890,
        D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDBOX = 891,
        D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_INVALIDSUBRESOURCE = 892,
        D3D12_MESSAGE_ID_WRITETOSUBRESOURCE_EMPTYBOX = 893,
        D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDHEAP = 894,
        D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDRESOURCE = 895,
        D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDBOX = 896,
        D3D12_MESSAGE_ID_READFROMSUBRESOURCE_INVALIDSUBRESOURCE = 897,
        D3D12_MESSAGE_ID_READFROMSUBRESOURCE_EMPTYBOX = 898,
        D3D12_MESSAGE_ID_TOO_MANY_NODES_SPECIFIED = 899,
        D3D12_MESSAGE_ID_INVALID_NODE_INDEX = 900,
        D3D12_MESSAGE_ID_GETHEAPPROPERTIES_INVALIDRESOURCE = 901,
        D3D12_MESSAGE_ID_NODE_MASK_MISMATCH = 902,
        D3D12_MESSAGE_ID_COMMAND_LIST_OUTOFMEMORY = 903,
        D3D12_MESSAGE_ID_COMMAND_LIST_MULTIPLE_SWAPCHAIN_BUFFER_REFERENCES = 904,
        D3D12_MESSAGE_ID_COMMAND_LIST_TOO_MANY_SWAPCHAIN_REFERENCES = 905,
        D3D12_MESSAGE_ID_COMMAND_QUEUE_TOO_MANY_SWAPCHAIN_REFERENCES = 906,
        D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_WRONGSWAPCHAINBUFFERREFERENCE = 907,
        D3D12_MESSAGE_ID_COMMAND_LIST_SETRENDERTARGETS_INVALIDNUMRENDERTARGETS = 908,
        D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_TYPE = 909,
        D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_FLAGS = 910,
        D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFLAGS = 911,
        D3D12_MESSAGE_ID_CREATESHAREDRESOURCE_INVALIDFORMAT = 912,
        D3D12_MESSAGE_ID_CREATESHAREDHEAP_INVALIDFLAGS = 913,
        D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_UNRECOGNIZEDPROPERTIES = 914,
        D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDSIZE = 915,
        D3D12_MESSAGE_ID_REFLECTSHAREDPROPERTIES_INVALIDOBJECT = 916,
        D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDOBJECT = 917,
        D3D12_MESSAGE_ID_KEYEDMUTEX_INVALIDKEY = 918,
        D3D12_MESSAGE_ID_KEYEDMUTEX_WRONGSTATE = 919,
        D3D12_MESSAGE_ID_CREATE_QUEUE_INVALID_PRIORITY = 920,
        D3D12_MESSAGE_ID_OBJECT_DELETED_WHILE_STILL_IN_USE = 921,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_FLAGS = 922,
        D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_HAS_NO_RESOURCE = 923,
        D3D12_MESSAGE_ID_COMMAND_LIST_DRAW_RENDER_TARGET_DELETED = 924,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_ALL_RENDER_TARGETS_HAVE_UNKNOWN_FORMAT = 925,
        D3D12_MESSAGE_ID_HEAP_ADDRESS_RANGE_INTERSECTS_MULTIPLE_BUFFERS = 926,
        D3D12_MESSAGE_ID_EXECUTECOMMANDLISTS_GPU_WRITTEN_READBACK_RESOURCE_MAPPED = 927,
        D3D12_MESSAGE_ID_UNMAP_RANGE_NOT_EMPTY = 929,
        D3D12_MESSAGE_ID_MAP_INVALID_NULLRANGE = 930,
        D3D12_MESSAGE_ID_UNMAP_INVALID_NULLRANGE = 931,
        D3D12_MESSAGE_ID_NO_GRAPHICS_API_SUPPORT = 932,
        D3D12_MESSAGE_ID_NO_COMPUTE_API_SUPPORT = 933,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_RESOURCE_FLAGS_NOT_SUPPORTED = 934,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_ARGUMENT_UNINITIALIZED = 935,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_HEAP_INDEX_OUT_OF_BOUNDS = 936,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TABLE_REGISTER_INDEX_OUT_OF_BOUNDS = 937,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_UNINITIALIZED = 938,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_DESCRIPTOR_TYPE_MISMATCH = 939,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SRV_RESOURCE_DIMENSION_MISMATCH = 940,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UAV_RESOURCE_DIMENSION_MISMATCH = 941,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INCOMPATIBLE_RESOURCE_STATE = 942,
        D3D12_MESSAGE_ID_COPYRESOURCE_NULLDST = 943,
        D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDDSTRESOURCE = 944,
        D3D12_MESSAGE_ID_COPYRESOURCE_NULLSRC = 945,
        D3D12_MESSAGE_ID_COPYRESOURCE_INVALIDSRCRESOURCE = 946,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLDST = 947,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDDSTRESOURCE = 948,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_NULLSRC = 949,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_INVALIDSRCRESOURCE = 950,
        D3D12_MESSAGE_ID_PIPELINE_STATE_TYPE_MISMATCH = 951,
        D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_NOT_SET = 952,
        D3D12_MESSAGE_ID_COMMAND_LIST_DISPATCH_ROOT_SIGNATURE_MISMATCH = 953,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_ZERO_BARRIERS = 954,
        D3D12_MESSAGE_ID_BEGIN_END_EVENT_MISMATCH = 955,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_POSSIBLE_BEFORE_AFTER_MISMATCH = 956,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_BEGIN_END = 957,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_INVALID_RESOURCE = 958,
        D3D12_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = 959,
        D3D12_MESSAGE_ID_OBJECT_EVICTED_WHILE_STILL_IN_USE = 960,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_ROOT_DESCRIPTOR_ACCESS_OUT_OF_BOUNDS = 961,
        D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_INVALIDLIBRARYBLOB = 962,
        D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_DRIVERVERSIONMISMATCH = 963,
        D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_ADAPTERVERSIONMISMATCH = 964,
        D3D12_MESSAGE_ID_CREATEPIPELINELIBRARY_UNSUPPORTED = 965,
        D3D12_MESSAGE_ID_CREATE_PIPELINELIBRARY = 966,
        D3D12_MESSAGE_ID_LIVE_PIPELINELIBRARY = 967,
        D3D12_MESSAGE_ID_DESTROY_PIPELINELIBRARY = 968,
        D3D12_MESSAGE_ID_STOREPIPELINE_NONAME = 969,
        D3D12_MESSAGE_ID_STOREPIPELINE_DUPLICATENAME = 970,
        D3D12_MESSAGE_ID_LOADPIPELINE_NAMENOTFOUND = 971,
        D3D12_MESSAGE_ID_LOADPIPELINE_INVALIDDESC = 972,
        D3D12_MESSAGE_ID_PIPELINELIBRARY_SERIALIZE_NOTENOUGHMEMORY = 973,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_PS_OUTPUT_RT_OUTPUT_MISMATCH = 974,
        D3D12_MESSAGE_ID_SETEVENTONMULTIPLEFENCECOMPLETION_INVALIDFLAGS = 975,
        D3D12_MESSAGE_ID_CREATE_QUEUE_VIDEO_NOT_SUPPORTED = 976,
        D3D12_MESSAGE_ID_CREATE_COMMAND_ALLOCATOR_VIDEO_NOT_SUPPORTED = 977,
        D3D12_MESSAGE_ID_CREATEQUERY_HEAP_VIDEO_DECODE_STATISTICS_NOT_SUPPORTED = 978,
        D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDLIST = 979,
        D3D12_MESSAGE_ID_CREATE_VIDEODECODER = 980,
        D3D12_MESSAGE_ID_CREATE_VIDEODECODESTREAM = 981,
        D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDLIST = 982,
        D3D12_MESSAGE_ID_LIVE_VIDEODECODER = 983,
        D3D12_MESSAGE_ID_LIVE_VIDEODECODESTREAM = 984,
        D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDLIST = 985,
        D3D12_MESSAGE_ID_DESTROY_VIDEODECODER = 986,
        D3D12_MESSAGE_ID_DESTROY_VIDEODECODESTREAM = 987,
        D3D12_MESSAGE_ID_DECODE_FRAME_INVALID_PARAMETERS = 988,
        D3D12_MESSAGE_ID_DEPRECATED_API = 989,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_MISMATCHING_COMMAND_LIST_TYPE = 990,
        D3D12_MESSAGE_ID_COMMAND_LIST_DESCRIPTOR_TABLE_NOT_SET = 991,
        D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_CONSTANT_BUFFER_VIEW_NOT_SET = 992,
        D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_SHADER_RESOURCE_VIEW_NOT_SET = 993,
        D3D12_MESSAGE_ID_COMMAND_LIST_ROOT_UNORDERED_ACCESS_VIEW_NOT_SET = 994,
        D3D12_MESSAGE_ID_DISCARD_INVALID_SUBRESOURCE_RANGE = 995,
        D3D12_MESSAGE_ID_DISCARD_ONE_SUBRESOURCE_FOR_MIPS_WITH_RECTS = 996,
        D3D12_MESSAGE_ID_DISCARD_NO_RECTS_FOR_NON_TEXTURE2D = 997,
        D3D12_MESSAGE_ID_COPY_ON_SAME_SUBRESOURCE = 998,
        D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PAGEABLE = 999,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_UNSUPPORTED = 1000,
        D3D12_MESSAGE_ID_STATIC_DESCRIPTOR_INVALID_DESCRIPTOR_CHANGE = 1001,
        D3D12_MESSAGE_ID_DATA_STATIC_DESCRIPTOR_INVALID_DATA_CHANGE = 1002,
        D3D12_MESSAGE_ID_DATA_STATIC_WHILE_SET_AT_EXECUTE_DESCRIPTOR_INVALID_DATA_CHANGE = 1003,
        D3D12_MESSAGE_ID_EXECUTE_BUNDLE_STATIC_DESCRIPTOR_DATA_STATIC_NOT_SET = 1004,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_ACCESS_OUT_OF_BOUNDS = 1005,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_SAMPLER_MODE_MISMATCH = 1006,
        D3D12_MESSAGE_ID_CREATE_FENCE_INVALID_FLAGS = 1007,
        D3D12_MESSAGE_ID_RESOURCE_BARRIER_DUPLICATE_SUBRESOURCE_TRANSITIONS = 1008,
        D3D12_MESSAGE_ID_SETRESIDENCYPRIORITY_INVALID_PRIORITY = 1009,
        D3D12_MESSAGE_ID_CREATE_DESCRIPTOR_HEAP_LARGE_NUM_DESCRIPTORS = 1013,
        D3D12_MESSAGE_ID_BEGIN_EVENT = 1014,
        D3D12_MESSAGE_ID_END_EVENT = 1015,
        D3D12_MESSAGE_ID_CREATEDEVICE_DEBUG_LAYER_STARTUP_OPTIONS = 1016,
        D3D12_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_DEPTHBOUNDSTEST_UNSUPPORTED = 1017,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_DUPLICATE_SUBOBJECT = 1018,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_UNKNOWN_SUBOBJECT = 1019,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_ZERO_SIZE_STREAM = 1020,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_INVALID_STREAM = 1021,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_CANNOT_DEDUCE_TYPE = 1022,
        D3D12_MESSAGE_ID_COMMAND_LIST_STATIC_DESCRIPTOR_RESOURCE_DIMENSION_MISMATCH = 1023,
        D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_PRIVILEGE_FOR_GLOBAL_REALTIME = 1024,
        D3D12_MESSAGE_ID_CREATE_COMMAND_QUEUE_INSUFFICIENT_HARDWARE_SUPPORT_FOR_GLOBAL_REALTIME = 1025,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_ARCHITECTURE = 1026,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DST = 1027,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE_DIMENSION = 1028,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DST_RANGE_OUT_OF_BOUNDS = 1029,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_SRC = 1030,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE_DIMENSION = 1031,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_SRC_RANGE_OUT_OF_BOUNDS = 1032,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_OFFSET_ALIGNMENT = 1033,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_RESOURCES = 1034,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_NULL_DEPENDENT_SUBRESOURCE_RANGES = 1035,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_RESOURCE = 1036,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DEPENDENT_SUBRESOURCE_RANGE = 1037,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_SUBRESOURCE_OUT_OF_BOUNDS = 1038,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_DEPENDENT_RANGE_OUT_OF_BOUNDS = 1039,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_ZERO_DEPENDENCIES = 1040,
        D3D12_MESSAGE_ID_DEVICE_CREATE_SHARED_HANDLE_INVALIDARG = 1041,
        D3D12_MESSAGE_ID_DESCRIPTOR_HANDLE_WITH_INVALID_RESOURCE = 1042,
        D3D12_MESSAGE_ID_SETDEPTHBOUNDS_INVALIDARGS = 1043,
        D3D12_MESSAGE_ID_GPU_BASED_VALIDATION_RESOURCE_STATE_IMPRECISE = 1044,
        D3D12_MESSAGE_ID_COMMAND_LIST_PIPELINE_STATE_NOT_SET = 1045,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_SHADER_MODEL_MISMATCH = 1046,
        D3D12_MESSAGE_ID_OBJECT_ACCESSED_WHILE_STILL_IN_USE = 1047,
        D3D12_MESSAGE_ID_PROGRAMMABLE_MSAA_UNSUPPORTED = 1048,
        D3D12_MESSAGE_ID_SETSAMPLEPOSITIONS_INVALIDARGS = 1049,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCEREGION_INVALID_RECT = 1050,
        D3D12_MESSAGE_ID_CREATE_VIDEODECODECOMMANDQUEUE = 1051,
        D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDLIST = 1052,
        D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSCOMMANDQUEUE = 1053,
        D3D12_MESSAGE_ID_LIVE_VIDEODECODECOMMANDQUEUE = 1054,
        D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDLIST = 1055,
        D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSCOMMANDQUEUE = 1056,
        D3D12_MESSAGE_ID_DESTROY_VIDEODECODECOMMANDQUEUE = 1057,
        D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDLIST = 1058,
        D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSCOMMANDQUEUE = 1059,
        D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSOR = 1060,
        D3D12_MESSAGE_ID_CREATE_VIDEOPROCESSSTREAM = 1061,
        D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSOR = 1062,
        D3D12_MESSAGE_ID_LIVE_VIDEOPROCESSSTREAM = 1063,
        D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = 1064,
        D3D12_MESSAGE_ID_DESTROY_VIDEOPROCESSSTREAM = 1065,
        D3D12_MESSAGE_ID_PROCESS_FRAME_INVALID_PARAMETERS = 1066,
        D3D12_MESSAGE_ID_COPY_INVALIDLAYOUT = 1067,
        D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION = 1068,
        D3D12_MESSAGE_ID_CREATE_CRYPTO_SESSION_POLICY = 1069,
        D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION = 1070,
        D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION = 1071,
        D3D12_MESSAGE_ID_LIVE_CRYPTO_SESSION_POLICY = 1072,
        D3D12_MESSAGE_ID_LIVE_PROTECTED_RESOURCE_SESSION = 1073,
        D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION = 1074,
        D3D12_MESSAGE_ID_DESTROY_CRYPTO_SESSION_POLICY = 1075,
        D3D12_MESSAGE_ID_DESTROY_PROTECTED_RESOURCE_SESSION = 1076,
        D3D12_MESSAGE_ID_PROTECTED_RESOURCE_SESSION_UNSUPPORTED = 1077,
        D3D12_MESSAGE_ID_FENCE_INVALIDOPERATION = 1078,
        D3D12_MESSAGE_ID_CREATEQUERY_HEAP_COPY_QUEUE_TIMESTAMPS_NOT_SUPPORTED = 1079,
        D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_DEFERRED = 1080,
        D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMFIRSTUSE = 1081,
        D3D12_MESSAGE_ID_SAMPLEPOSITIONS_MISMATCH_RECORDTIME_ASSUMEDFROMCLEAR = 1082,
        D3D12_MESSAGE_ID_CREATE_VIDEODECODERHEAP = 1083,
        D3D12_MESSAGE_ID_LIVE_VIDEODECODERHEAP = 1084,
        D3D12_MESSAGE_ID_DESTROY_VIDEODECODERHEAP = 1085,
        D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDARG_RETURN = 1086,
        D3D12_MESSAGE_ID_OPENEXISTINGHEAP_OUTOFMEMORY_RETURN = 1087,
        D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDADDRESS = 1088,
        D3D12_MESSAGE_ID_OPENEXISTINGHEAP_INVALIDHANDLE = 1089,
        D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_DEST = 1090,
        D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_MODE = 1091,
        D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_INVALID_ALIGNMENT = 1092,
        D3D12_MESSAGE_ID_WRITEBUFFERIMMEDIATE_NOT_SUPPORTED = 1093,
        D3D12_MESSAGE_ID_SETVIEWINSTANCEMASK_INVALIDARGS = 1094,
        D3D12_MESSAGE_ID_VIEW_INSTANCING_UNSUPPORTED = 1095,
        D3D12_MESSAGE_ID_VIEW_INSTANCING_INVALIDARGS = 1096,
        D3D12_MESSAGE_ID_COPYTEXTUREREGION_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1097,
        D3D12_MESSAGE_ID_COPYRESOURCE_MISMATCH_DECODE_REFERENCE_ONLY_FLAG = 1098,
        D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_FAILURE = 1099,
        D3D12_MESSAGE_ID_CREATE_VIDEO_DECODE_HEAP_CAPS_UNSUPPORTED = 1100,
        D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_INVALID_INPUT = 1101,
        D3D12_MESSAGE_ID_CREATE_VIDEO_DECODER_UNSUPPORTED = 1102,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_METADATA_ERROR = 1103,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_VIEW_INSTANCING_VERTEX_SIZE_EXCEEDED = 1104,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_RUNTIME_INTERNAL_ERROR = 1105,
        D3D12_MESSAGE_ID_NO_VIDEO_API_SUPPORT = 1106,
        D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_INVALID_INPUT = 1107,
        D3D12_MESSAGE_ID_CREATE_VIDEO_PROCESSOR_CAPS_FAILURE = 1108,
        D3D12_MESSAGE_ID_VIDEO_PROCESS_SUPPORT_UNSUPPORTED_FORMAT = 1109,
        D3D12_MESSAGE_ID_VIDEO_DECODE_FRAME_INVALID_ARGUMENT = 1110,
        D3D12_MESSAGE_ID_ENQUEUE_MAKE_RESIDENT_INVALID_FLAGS = 1111,
        D3D12_MESSAGE_ID_OPENEXISTINGHEAP_UNSUPPORTED = 1112,
        D3D12_MESSAGE_ID_VIDEO_PROCESS_FRAMES_INVALID_ARGUMENT = 1113,
        D3D12_MESSAGE_ID_VIDEO_DECODE_SUPPORT_UNSUPPORTED = 1114,
        D3D12_MESSAGE_ID_CREATE_COMMANDRECORDER = 1115,
        D3D12_MESSAGE_ID_LIVE_COMMANDRECORDER = 1116,
        D3D12_MESSAGE_ID_DESTROY_COMMANDRECORDER = 1117,
        D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_VIDEO_NOT_SUPPORTED = 1118,
        D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_SUPPORT_FLAGS = 1119,
        D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_INVALID_FLAGS = 1120,
        D3D12_MESSAGE_ID_CREATE_COMMAND_RECORDER_MORE_RECORDERS_THAN_LOGICAL_PROCESSORS = 1121,
        D3D12_MESSAGE_ID_CREATE_COMMANDPOOL = 1122,
        D3D12_MESSAGE_ID_LIVE_COMMANDPOOL = 1123,
        D3D12_MESSAGE_ID_DESTROY_COMMANDPOOL = 1124,
        D3D12_MESSAGE_ID_CREATE_COMMAND_POOL_INVALID_FLAGS = 1125,
        D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_VIDEO_NOT_SUPPORTED = 1126,
        D3D12_MESSAGE_ID_COMMAND_RECORDER_SUPPORT_FLAGS_MISMATCH = 1127,
        D3D12_MESSAGE_ID_COMMAND_RECORDER_CONTENTION = 1128,
        D3D12_MESSAGE_ID_COMMAND_RECORDER_USAGE_WITH_CREATECOMMANDLIST_COMMAND_LIST = 1129,
        D3D12_MESSAGE_ID_COMMAND_ALLOCATOR_USAGE_WITH_CREATECOMMANDLIST1_COMMAND_LIST = 1130,
        D3D12_MESSAGE_ID_CANNOT_EXECUTE_EMPTY_COMMAND_LIST = 1131,
        D3D12_MESSAGE_ID_CANNOT_RESET_COMMAND_POOL_WITH_OPEN_COMMAND_LISTS = 1132,
        D3D12_MESSAGE_ID_CANNOT_USE_COMMAND_RECORDER_WITHOUT_CURRENT_TARGET = 1133,
        D3D12_MESSAGE_ID_CANNOT_CHANGE_COMMAND_RECORDER_TARGET_WHILE_RECORDING = 1134,
        D3D12_MESSAGE_ID_COMMAND_POOL_SYNC = 1135,
        D3D12_MESSAGE_ID_EVICT_UNDERFLOW = 1136,
        D3D12_MESSAGE_ID_CREATE_META_COMMAND = 1137,
        D3D12_MESSAGE_ID_LIVE_META_COMMAND = 1138,
        D3D12_MESSAGE_ID_DESTROY_META_COMMAND = 1139,
        D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_DST_RESOURCE = 1140,
        D3D12_MESSAGE_ID_COPYBUFFERREGION_INVALID_SRC_RESOURCE = 1141,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_DST_RESOURCE = 1142,
        D3D12_MESSAGE_ID_ATOMICCOPYBUFFER_INVALID_SRC_RESOURCE = 1143,
        D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_BUFFER = 1144,
        D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_NULL_RESOURCE_DESC = 1145,
        D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_UNSUPPORTED = 1146,
        D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_DIMENSION = 1147,
        D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_FLAGS = 1148,
        D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_BUFFER_OFFSET = 1149,
        D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_DIMENSION = 1150,
        D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_INVALID_RESOURCE_FLAGS = 1151,
        D3D12_MESSAGE_ID_CREATEPLACEDRESOURCEONBUFFER_OUTOFMEMORY_RETURN = 1152,
        D3D12_MESSAGE_ID_CANNOT_CREATE_GRAPHICS_AND_VIDEO_COMMAND_RECORDER = 1153,
        D3D12_MESSAGE_ID_UPDATETILEMAPPINGS_POSSIBLY_MISMATCHING_PROPERTIES = 1154,
        D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE = 1155,
        D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INCOMPATIBLE_WITH_STRUCTURED_BUFFERS = 1156,
        D3D12_MESSAGE_ID_COMPUTE_ONLY_DEVICE_OPERATION_UNSUPPORTED = 1157,
        D3D12_MESSAGE_ID_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1158,
        D3D12_MESSAGE_ID_EMIT_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_INVALID = 1159,
        D3D12_MESSAGE_ID_COPY_RAYTRACING_ACCELERATION_STRUCTURE_INVALID = 1160,
        D3D12_MESSAGE_ID_DISPATCH_RAYS_INVALID = 1161,
        D3D12_MESSAGE_ID_GET_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO_INVALID = 1162,
        D3D12_MESSAGE_ID_CREATE_LIFETIMETRACKER = 1163,
        D3D12_MESSAGE_ID_LIVE_LIFETIMETRACKER = 1164,
        D3D12_MESSAGE_ID_DESTROY_LIFETIMETRACKER = 1165,
        D3D12_MESSAGE_ID_DESTROYOWNEDOBJECT_OBJECTNOTOWNED = 1166,
        D3D12_MESSAGE_ID_CREATE_TRACKEDWORKLOAD = 1167,
        D3D12_MESSAGE_ID_LIVE_TRACKEDWORKLOAD = 1168,
        D3D12_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = 1169,
        D3D12_MESSAGE_ID_RENDER_PASS_ERROR = 1170,
        D3D12_MESSAGE_ID_META_COMMAND_ID_INVALID = 1171,
        D3D12_MESSAGE_ID_META_COMMAND_UNSUPPORTED_PARAMS = 1172,
        D3D12_MESSAGE_ID_META_COMMAND_FAILED_ENUMERATION = 1173,
        D3D12_MESSAGE_ID_META_COMMAND_PARAMETER_SIZE_MISMATCH = 1174,
        D3D12_MESSAGE_ID_UNINITIALIZED_META_COMMAND = 1175,
        D3D12_MESSAGE_ID_META_COMMAND_INVALID_GPU_VIRTUAL_ADDRESS = 1176,
        D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDLIST = 1177,
        D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDLIST = 1178,
        D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDLIST = 1179,
        D3D12_MESSAGE_ID_CREATE_VIDEOENCODECOMMANDQUEUE = 1180,
        D3D12_MESSAGE_ID_LIVE_VIDEOENCODECOMMANDQUEUE = 1181,
        D3D12_MESSAGE_ID_DESTROY_VIDEOENCODECOMMANDQUEUE = 1182,
        D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONESTIMATOR = 1183,
        D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONESTIMATOR = 1184,
        D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONESTIMATOR = 1185,
        D3D12_MESSAGE_ID_CREATE_VIDEOMOTIONVECTORHEAP = 1186,
        D3D12_MESSAGE_ID_LIVE_VIDEOMOTIONVECTORHEAP = 1187,
        D3D12_MESSAGE_ID_DESTROY_VIDEOMOTIONVECTORHEAP = 1188,
        D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = 1189,
        D3D12_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = 1190,
        D3D12_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 1191,
        D3D12_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = 1192,
        D3D12_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = 1193,
        D3D12_MESSAGE_ID_CREATE_STATE_OBJECT_ERROR = 1194,
        D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_ERROR = 1195,
        D3D12_MESSAGE_ID_GET_SHADER_STACK_SIZE_ERROR = 1196,
        D3D12_MESSAGE_ID_GET_PIPELINE_STACK_SIZE_ERROR = 1197,
        D3D12_MESSAGE_ID_SET_PIPELINE_STACK_SIZE_ERROR = 1198,
        D3D12_MESSAGE_ID_GET_SHADER_IDENTIFIER_SIZE_INVALID = 1199,
        D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_INVALID = 1200,
        D3D12_MESSAGE_ID_CHECK_DRIVER_MATCHING_IDENTIFIER_DRIVER_REPORTED_ISSUE = 1201,
        D3D12_MESSAGE_ID_RENDER_PASS_INVALID_RESOURCE_BARRIER = 1202,
        D3D12_MESSAGE_ID_RENDER_PASS_DISALLOWED_API_CALLED = 1203,
        D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_NEST_RENDER_PASSES = 1204,
        D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_END_WITHOUT_BEGIN = 1205,
        D3D12_MESSAGE_ID_RENDER_PASS_CANNOT_CLOSE_COMMAND_LIST = 1206,
        D3D12_MESSAGE_ID_RENDER_PASS_GPU_WORK_WHILE_SUSPENDED = 1207,
        D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_SUSPEND_RESUME = 1208,
        D3D12_MESSAGE_ID_RENDER_PASS_NO_PRIOR_SUSPEND_WITHIN_EXECUTECOMMANDLISTS = 1209,
        D3D12_MESSAGE_ID_RENDER_PASS_NO_SUBSEQUENT_RESUME_WITHIN_EXECUTECOMMANDLISTS = 1210,
        D3D12_MESSAGE_ID_TRACKED_WORKLOAD_COMMAND_QUEUE_MISMATCH = 1211,
        D3D12_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = 1212,
        D3D12_MESSAGE_ID_RENDER_PASS_MISMATCHING_NO_ACCESS = 1213,
        D3D12_MESSAGE_ID_RENDER_PASS_UNSUPPORTED_RESOLVE = 1214,
        D3D12_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_INVALID_RESOURCE_PTR = 1215,
        D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_SIGNAL = 1216,
        D3D12_MESSAGE_ID_WINDOWS7_FENCE_OUTOFORDER_WAIT = 1217,
        D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_ESTIMATOR_INVALID_ARGUMENT = 1218,
        D3D12_MESSAGE_ID_VIDEO_CREATE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1219,
        D3D12_MESSAGE_ID_ESTIMATE_MOTION_INVALID_ARGUMENT = 1220,
        D3D12_MESSAGE_ID_RESOLVE_MOTION_VECTOR_HEAP_INVALID_ARGUMENT = 1221,
        D3D12_MESSAGE_ID_GETGPUVIRTUALADDRESS_INVALID_HEAP_TYPE = 1222,
        D3D12_MESSAGE_ID_SET_BACKGROUND_PROCESSING_MODE_INVALID_ARGUMENT = 1223,
        D3D12_MESSAGE_ID_CREATE_COMMAND_LIST_INVALID_COMMAND_LIST_TYPE_FOR_FEATURE_LEVEL = 1224,
        D3D12_MESSAGE_ID_CREATE_VIDEOEXTENSIONCOMMAND = 1225,
        D3D12_MESSAGE_ID_LIVE_VIDEOEXTENSIONCOMMAND = 1226,
        D3D12_MESSAGE_ID_DESTROY_VIDEOEXTENSIONCOMMAND = 1227,
        D3D12_MESSAGE_ID_INVALID_VIDEO_EXTENSION_COMMAND_ID = 1228,
        D3D12_MESSAGE_ID_VIDEO_EXTENSION_COMMAND_INVALID_ARGUMENT = 1229,
        D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_NOT_UNIQUE_IN_DXIL_LIBRARY = 1230,
        D3D12_MESSAGE_ID_VARIABLE_SHADING_RATE_NOT_ALLOWED_WITH_TIR = 1231,
        D3D12_MESSAGE_ID_GEOMETRY_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1232,
        D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_SHADING_RATE = 1233,
        D3D12_MESSAGE_ID_RSSETSHADING_RATE_SHADING_RATE_NOT_PERMITTED_BY_CAP = 1234,
        D3D12_MESSAGE_ID_RSSETSHADING_RATE_INVALID_COMBINER = 1235,
        D3D12_MESSAGE_ID_RSSETSHADINGRATEIMAGE_REQUIRES_TIER_2 = 1236,
        D3D12_MESSAGE_ID_RSSETSHADINGRATE_REQUIRES_TIER_1 = 1237,
        D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_FORMAT = 1238,
        D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_ARRAY_SIZE = 1239,
        D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_MIP_LEVEL = 1240,
        D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_COUNT = 1241,
        D3D12_MESSAGE_ID_SHADING_RATE_IMAGE_INCORRECT_SAMPLE_QUALITY = 1242,
        D3D12_MESSAGE_ID_NON_RETAIL_SHADER_MODEL_WONT_VALIDATE = 1243,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_ROOT_SIGNATURE_MISMATCH = 1244,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_ROOT_SIGNATURE_MISMATCH = 1245,
        D3D12_MESSAGE_ID_ADD_TO_STATE_OBJECT_ERROR = 1246,
        D3D12_MESSAGE_ID_CREATE_PROTECTED_RESOURCE_SESSION_INVALID_ARGUMENT = 1247,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_PSO_DESC_MISMATCH = 1248,
        D3D12_MESSAGE_ID_CREATEPIPELINESTATE_MS_INCOMPLETE_TYPE = 1249,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_AS_NOT_MS_MISMATCH = 1250,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_MS_NOT_PS_MISMATCH = 1251,
        D3D12_MESSAGE_ID_NONZERO_SAMPLER_FEEDBACK_MIP_REGION_WITH_INCOMPATIBLE_FORMAT = 1252,
        D3D12_MESSAGE_ID_CREATEGRAPHICSPIPELINESTATE_INPUTLAYOUT_SHADER_MISMATCH = 1253,
        D3D12_MESSAGE_ID_EMPTY_DISPATCH = 1254,
        D3D12_MESSAGE_ID_RESOURCE_FORMAT_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1255,
        D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_MIP_REGION = 1256,
        D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_DIMENSION = 1257,
        D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_COUNT = 1258,
        D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_SAMPLE_QUALITY = 1259,
        D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_INVALID_LAYOUT = 1260,
        D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_MAP_REQUIRES_UNORDERED_ACCESS_FLAG = 1261,
        D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_NULL_ARGUMENTS = 1262,
        D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_UAV_REQUIRES_SAMPLER_FEEDBACK_CAPABILITY = 1263,
        D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_REQUIRES_FEEDBACK_MAP_FORMAT = 1264,
        D3D12_MESSAGE_ID_CREATEMESHSHADER_INVALIDSHADERBYTECODE = 1265,
        D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTOFMEMORY = 1266,
        D3D12_MESSAGE_ID_CREATEMESHSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 1267,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_INVALID_FORMAT = 1268,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_INVALID_MIP_LEVEL_COUNT = 1269,
        D3D12_MESSAGE_ID_RESOLVESUBRESOURCE_SAMPLER_FEEDBACK_TRANSCODE_ARRAY_SIZE_MISMATCH = 1270,
        D3D12_MESSAGE_ID_SAMPLER_FEEDBACK_CREATE_UAV_MISMATCHING_TARGETED_RESOURCE = 1271,
        D3D12_MESSAGE_ID_CREATEMESHSHADER_OUTPUTEXCEEDSMAXSIZE = 1272,
        D3D12_MESSAGE_ID_CREATEMESHSHADER_GROUPSHAREDEXCEEDSMAXSIZE = 1273,
        D3D12_MESSAGE_ID_VERTEX_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1274,
        D3D12_MESSAGE_ID_MESH_SHADER_OUTPUTTING_BOTH_VIEWPORT_ARRAY_INDEX_AND_SHADING_RATE_NOT_SUPPORTED_ON_DEVICE = 1275,
        D3D12_MESSAGE_ID_CREATEMESHSHADER_MISMATCHEDASMSPAYLOADSIZE = 1276,
        D3D12_MESSAGE_ID_CREATE_ROOT_SIGNATURE_UNBOUNDED_STATIC_DESCRIPTORS = 1277,
        D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_INVALIDSHADERBYTECODE = 1278,
        D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY = 1279,
        D3D12_MESSAGE_ID_D3D12_MESSAGES_END = (D3D12_MESSAGE_ID_CREATEAMPLIFICATIONSHADER_OUTOFMEMORY + 1),
    }

    public unsafe partial struct D3D12_MESSAGE
    {
        public D3D12_MESSAGE_CATEGORY Category;

        public D3D12_MESSAGE_SEVERITY Severity;

        public D3D12_MESSAGE_ID ID;

        [NativeTypeName("const char *")]
        [Const]
        public sbyte* pDescription;

        [NativeTypeName("SIZE_T")]
        public UIntPtr DescriptionByteLength;
    }

    public unsafe partial struct D3D12_INFO_QUEUE_FILTER_DESC
    {
        [NativeTypeName("UINT")]
        public uint NumCategories;

        [NativeTypeName("D3D12_MESSAGE_CATEGORY *")]
        public D3D12_MESSAGE_CATEGORY* pCategoryList;

        [NativeTypeName("UINT")]
        public uint NumSeverities;

        [NativeTypeName("D3D12_MESSAGE_SEVERITY *")]
        public D3D12_MESSAGE_SEVERITY* pSeverityList;

        [NativeTypeName("UINT")]
        public uint NumIDs;

        [NativeTypeName("D3D12_MESSAGE_ID *")]
        public D3D12_MESSAGE_ID* pIDList;
    }

    public partial struct D3D12_INFO_QUEUE_FILTER
    {
        public D3D12_INFO_QUEUE_FILTER_DESC AllowList;

        public D3D12_INFO_QUEUE_FILTER_DESC DenyList;
    }

    [Guid("0742A90B-C387-483F-B946-30A7E4E61458")]
    [NativeTypeName("struct ID3D12InfoQueue : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12InfoQueue
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12InfoQueue* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetMessageCountLimit(ID3D12InfoQueue* pThis, [NativeTypeName("UINT64")] [In] ulong MessageCountLimit);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearStoredMessages(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetMessageA(ID3D12InfoQueue* pThis, [NativeTypeName("UINT64")] [In] ulong MessageIndex, [NativeTypeName("D3D12_MESSAGE *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_MESSAGE* pMessage, [NativeTypeName("SIZE_T *")] [In][Out] UIntPtr* pMessageByteLength);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetNumMessagesAllowedByStorageFilter(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetNumMessagesDeniedByStorageFilter(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetNumStoredMessages(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetNumStoredMessagesAllowedByRetrievalFilter(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetNumMessagesDiscardedByMessageCountLimit(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetMessageCountLimit(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _AddStorageFilterEntries(ID3D12InfoQueue* pThis, [NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [In] D3D12_INFO_QUEUE_FILTER* pFilter);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetStorageFilter(ID3D12InfoQueue* pThis, [NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_INFO_QUEUE_FILTER* pFilter, [NativeTypeName("SIZE_T *")] [In][Out] UIntPtr* pFilterByteLength);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearStorageFilter(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _PushEmptyStorageFilter(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _PushCopyOfStorageFilter(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _PushStorageFilter(ID3D12InfoQueue* pThis, [NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [In] D3D12_INFO_QUEUE_FILTER* pFilter);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _PopStorageFilter(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetStorageFilterStackSize(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _AddRetrievalFilterEntries(ID3D12InfoQueue* pThis, [NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [In] D3D12_INFO_QUEUE_FILTER* pFilter);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetRetrievalFilter(ID3D12InfoQueue* pThis, [NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_INFO_QUEUE_FILTER* pFilter, [NativeTypeName("SIZE_T *")] [In][Out] UIntPtr* pFilterByteLength);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearRetrievalFilter(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _PushEmptyRetrievalFilter(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _PushCopyOfRetrievalFilter(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _PushRetrievalFilter(ID3D12InfoQueue* pThis, [NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [In] D3D12_INFO_QUEUE_FILTER* pFilter);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _PopRetrievalFilter(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetRetrievalFilterStackSize(ID3D12InfoQueue* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _AddMessage(ID3D12InfoQueue* pThis, [In] D3D12_MESSAGE_CATEGORY Category, [In] D3D12_MESSAGE_SEVERITY Severity, [In] D3D12_MESSAGE_ID ID, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* pDescription);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _AddApplicationMessage(ID3D12InfoQueue* pThis, [In] D3D12_MESSAGE_SEVERITY Severity, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* pDescription);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetBreakOnCategory(ID3D12InfoQueue* pThis, [In] D3D12_MESSAGE_CATEGORY Category, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int bEnable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetBreakOnSeverity(ID3D12InfoQueue* pThis, [In] D3D12_MESSAGE_SEVERITY Severity, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int bEnable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetBreakOnID(ID3D12InfoQueue* pThis, [In] D3D12_MESSAGE_ID ID, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int bEnable);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public delegate int _GetBreakOnCategory(ID3D12InfoQueue* pThis, [In] D3D12_MESSAGE_CATEGORY Category);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public delegate int _GetBreakOnSeverity(ID3D12InfoQueue* pThis, [In] D3D12_MESSAGE_SEVERITY Severity);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public delegate int _GetBreakOnID(ID3D12InfoQueue* pThis, [In] D3D12_MESSAGE_ID ID);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMuteDebugOutput(ID3D12InfoQueue* pThis, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int bMute);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public delegate int _GetMuteDebugOutput(ID3D12InfoQueue* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetMessageCountLimit([NativeTypeName("UINT64")] [In] ulong MessageCountLimit)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetMessageCountLimit>((IntPtr)(lpVtbl[3]))(pThis, MessageCountLimit);
            }
        }

        public void ClearStoredMessages()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearStoredMessages>((IntPtr)(lpVtbl[4]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetMessageA([NativeTypeName("UINT64")] [In] ulong MessageIndex, [NativeTypeName("D3D12_MESSAGE *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][Out][Optional] D3D12_MESSAGE* pMessage, [NativeTypeName("SIZE_T *")] [In][Out] UIntPtr* pMessageByteLength)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetMessageA>((IntPtr)(lpVtbl[5]))(pThis, MessageIndex, pMessage, pMessageByteLength);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetNumMessagesAllowedByStorageFilter()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNumMessagesAllowedByStorageFilter>((IntPtr)(lpVtbl[6]))(pThis);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetNumMessagesDeniedByStorageFilter()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNumMessagesDeniedByStorageFilter>((IntPtr)(lpVtbl[7]))(pThis);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetNumStoredMessages()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNumStoredMessages>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetNumStoredMessagesAllowedByRetrievalFilter()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNumStoredMessagesAllowedByRetrievalFilter>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetNumMessagesDiscardedByMessageCountLimit()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNumMessagesDiscardedByMessageCountLimit>((IntPtr)(lpVtbl[10]))(pThis);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetMessageCountLimit()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetMessageCountLimit>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int AddStorageFilterEntries([NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [In] D3D12_INFO_QUEUE_FILTER* pFilter)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddStorageFilterEntries>((IntPtr)(lpVtbl[12]))(pThis, pFilter);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetStorageFilter([NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_INFO_QUEUE_FILTER* pFilter, [NativeTypeName("SIZE_T *")] [In][Out] UIntPtr* pFilterByteLength)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetStorageFilter>((IntPtr)(lpVtbl[13]))(pThis, pFilter, pFilterByteLength);
            }
        }

        public void ClearStorageFilter()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearStorageFilter>((IntPtr)(lpVtbl[14]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int PushEmptyStorageFilter()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_PushEmptyStorageFilter>((IntPtr)(lpVtbl[15]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int PushCopyOfStorageFilter()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_PushCopyOfStorageFilter>((IntPtr)(lpVtbl[16]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int PushStorageFilter([NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [In] D3D12_INFO_QUEUE_FILTER* pFilter)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_PushStorageFilter>((IntPtr)(lpVtbl[17]))(pThis, pFilter);
            }
        }

        public void PopStorageFilter()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_PopStorageFilter>((IntPtr)(lpVtbl[18]))(pThis);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetStorageFilterStackSize()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetStorageFilterStackSize>((IntPtr)(lpVtbl[19]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int AddRetrievalFilterEntries([NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [In] D3D12_INFO_QUEUE_FILTER* pFilter)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRetrievalFilterEntries>((IntPtr)(lpVtbl[20]))(pThis, pFilter);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetRetrievalFilter([NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] D3D12_INFO_QUEUE_FILTER* pFilter, [NativeTypeName("SIZE_T *")] [In][Out] UIntPtr* pFilterByteLength)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetRetrievalFilter>((IntPtr)(lpVtbl[21]))(pThis, pFilter, pFilterByteLength);
            }
        }

        public void ClearRetrievalFilter()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearRetrievalFilter>((IntPtr)(lpVtbl[22]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int PushEmptyRetrievalFilter()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_PushEmptyRetrievalFilter>((IntPtr)(lpVtbl[23]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int PushCopyOfRetrievalFilter()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_PushCopyOfRetrievalFilter>((IntPtr)(lpVtbl[24]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int PushRetrievalFilter([NativeTypeName("D3D12_INFO_QUEUE_FILTER *")] [In] D3D12_INFO_QUEUE_FILTER* pFilter)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_PushRetrievalFilter>((IntPtr)(lpVtbl[25]))(pThis, pFilter);
            }
        }

        public void PopRetrievalFilter()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_PopRetrievalFilter>((IntPtr)(lpVtbl[26]))(pThis);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetRetrievalFilterStackSize()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetRetrievalFilterStackSize>((IntPtr)(lpVtbl[27]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int AddMessage([In] D3D12_MESSAGE_CATEGORY Category, [In] D3D12_MESSAGE_SEVERITY Severity, [In] D3D12_MESSAGE_ID ID, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* pDescription)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddMessage>((IntPtr)(lpVtbl[28]))(pThis, Category, Severity, ID, pDescription);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int AddApplicationMessage([In] D3D12_MESSAGE_SEVERITY Severity, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* pDescription)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddApplicationMessage>((IntPtr)(lpVtbl[29]))(pThis, Severity, pDescription);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetBreakOnCategory([In] D3D12_MESSAGE_CATEGORY Category, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int bEnable)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetBreakOnCategory>((IntPtr)(lpVtbl[30]))(pThis, Category, bEnable);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetBreakOnSeverity([In] D3D12_MESSAGE_SEVERITY Severity, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int bEnable)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetBreakOnSeverity>((IntPtr)(lpVtbl[31]))(pThis, Severity, bEnable);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetBreakOnID([In] D3D12_MESSAGE_ID ID, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int bEnable)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetBreakOnID>((IntPtr)(lpVtbl[32]))(pThis, ID, bEnable);
            }
        }

        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public int GetBreakOnCategory([In] D3D12_MESSAGE_CATEGORY Category)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetBreakOnCategory>((IntPtr)(lpVtbl[33]))(pThis, Category);
            }
        }

        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public int GetBreakOnSeverity([In] D3D12_MESSAGE_SEVERITY Severity)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetBreakOnSeverity>((IntPtr)(lpVtbl[34]))(pThis, Severity);
            }
        }

        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public int GetBreakOnID([In] D3D12_MESSAGE_ID ID)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetBreakOnID>((IntPtr)(lpVtbl[35]))(pThis, ID);
            }
        }

        public void SetMuteDebugOutput([NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int bMute)
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMuteDebugOutput>((IntPtr)(lpVtbl[36]))(pThis, bMute);
            }
        }

        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public int GetMuteDebugOutput()
        {
            fixed (ID3D12InfoQueue* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetMuteDebugOutput>((IntPtr)(lpVtbl[37]))(pThis);
            }
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Winapi)]
    [return: NativeTypeName("HRESULT")]
    public unsafe delegate int PFN_D3D12_CREATE_DEVICE([NativeTypeName("IUnknown *")] [In][Optional] IUnknown* param0, D3D_FEATURE_LEVEL param1, [NativeTypeName("const IID &")] [Const] [In] Guid* param2, [NativeTypeName("void **")] [ComOutPtr][Optional] void** param3);

    [UnmanagedFunctionPointer(CallingConvention.Winapi)]
    [return: NativeTypeName("HRESULT")]
    public unsafe delegate int PFN_D3D12_GET_DEBUG_INTERFACE([NativeTypeName("const IID &")] [Const] [In] Guid* param0, [NativeTypeName("void **")] [ComOutPtr][Optional] void** param1);

    public enum D3D12_AXIS_SHADING_RATE
    {
        D3D12_AXIS_SHADING_RATE_1X = 0,
        D3D12_AXIS_SHADING_RATE_2X = 0x1,
        D3D12_AXIS_SHADING_RATE_4X = 0x2,
    }

    public enum D3D12_SHADING_RATE
    {
        D3D12_SHADING_RATE_1X1 = 0,
        D3D12_SHADING_RATE_1X2 = 0x1,
        D3D12_SHADING_RATE_2X1 = 0x4,
        D3D12_SHADING_RATE_2X2 = 0x5,
        D3D12_SHADING_RATE_2X4 = 0x6,
        D3D12_SHADING_RATE_4X2 = 0x9,
        D3D12_SHADING_RATE_4X4 = 0xa,
    }

    public enum D3D12_SHADING_RATE_COMBINER
    {
        D3D12_SHADING_RATE_COMBINER_PASSTHROUGH = 0,
        D3D12_SHADING_RATE_COMBINER_OVERRIDE = 1,
        D3D12_SHADING_RATE_COMBINER_MIN = 2,
        D3D12_SHADING_RATE_COMBINER_MAX = 3,
        D3D12_SHADING_RATE_COMBINER_SUM = 4,
    }

    [Guid("55050859-4024-474C-87F5-6472EAEE44EA")]
    [NativeTypeName("struct ID3D12GraphicsCommandList5 : ID3D12GraphicsCommandList4")]
    [NativeInheritance("ID3D12GraphicsCommandList4")]
    public unsafe partial struct ID3D12GraphicsCommandList5
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12GraphicsCommandList5* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12GraphicsCommandList5* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12GraphicsCommandList5* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12GraphicsCommandList5* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawInstanced(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawIndexedInstanced(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _Dispatch(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyBufferRegion(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTextureRegion(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyResource(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTiles(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresource(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetPrimitiveTopology(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetViewports(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetScissorRects(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetBlendFactor(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetStencilRef(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint StencilRef);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPipelineState(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteBundle(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetDescriptorHeaps(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootSignature(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootSignature(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootDescriptorTable(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootDescriptorTable(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstant(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstant(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstants(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstants(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootConstantBufferView(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootConstantBufferView(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootShaderResourceView(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootShaderResourceView(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootUnorderedAccessView(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootUnorderedAccessView(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetIndexBuffer(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetVertexBuffers(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SOSetTargets(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetRenderTargets(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearDepthStencilView(ID3D12GraphicsCommandList5* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearRenderTargetView(ID3D12GraphicsCommandList5* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewUint(ID3D12GraphicsCommandList5* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewFloat(ID3D12GraphicsCommandList5* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12GraphicsCommandList5* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteIndirect(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT64(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetDepthBounds(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetSamplePositions(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresourceRegion(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetViewInstanceMask(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint Mask);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetProtectedResourceSession(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginRenderPass(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("UINT")] [In] uint NumRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_RENDER_TARGET_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_RENDER_PASS_RENDER_TARGET_DESC* pRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC *")] [Const] [In][Optional] D3D12_RENDER_PASS_DEPTH_STENCIL_DESC* pDepthStencil, D3D12_RENDER_PASS_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndRenderPass(ID3D12GraphicsCommandList5* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _InitializeMetaCommand(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pInitializationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr InitializationParametersDataSizeInBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteMetaCommand(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pExecutionParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr ExecutionParametersDataSizeInBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BuildRaytracingAccelerationStructure(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumPostbuildInfoDescs, [NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pPostbuildInfoDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EmitRaytracingAccelerationStructurePostbuildInfo(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumSourceAccelerationStructures, [NativeTypeName("const D3D12_GPU_VIRTUAL_ADDRESS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ulong* pSourceAccelerationStructureData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyRaytracingAccelerationStructure(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong DestAccelerationStructureData, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong SourceAccelerationStructureData, [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPipelineState1(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12StateObject *")] [In] ID3D12StateObject* pStateObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DispatchRays(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("const D3D12_DISPATCH_RAYS_DESC *")] [Const] [In] D3D12_DISPATCH_RAYS_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetShadingRate(ID3D12GraphicsCommandList5* pThis, [In] D3D12_SHADING_RATE baseShadingRate, [NativeTypeName("const D3D12_SHADING_RATE_COMBINER *")] [Const] [In][Optional] D3D12_SHADING_RATE_COMBINER* combiners);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetShadingRateImage(ID3D12GraphicsCommandList5* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* shadingRateImage);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator, pInitialState);
            }
        }

        public void ClearState([NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis, pPipelineState);
            }
        }

        public void DrawInstanced([NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawInstanced>((IntPtr)(lpVtbl[12]))(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }
        }

        public void DrawIndexedInstanced([NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawIndexedInstanced>((IntPtr)(lpVtbl[13]))(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }
        }

        public void Dispatch([NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_Dispatch>((IntPtr)(lpVtbl[14]))(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }
        }

        public void CopyBufferRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyBufferRegion>((IntPtr)(lpVtbl[15]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
            }
        }

        public void CopyTextureRegion([NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTextureRegion>((IntPtr)(lpVtbl[16]))(pThis, pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
            }
        }

        public void CopyResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyResource>((IntPtr)(lpVtbl[17]))(pThis, pDstResource, pSrcResource);
            }
        }

        public void CopyTiles([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTiles>((IntPtr)(lpVtbl[18]))(pThis, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
            }
        }

        public void ResolveSubresource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresource>((IntPtr)(lpVtbl[19]))(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }
        }

        public void IASetPrimitiveTopology([NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetPrimitiveTopology>((IntPtr)(lpVtbl[20]))(pThis, PrimitiveTopology);
            }
        }

        public void RSSetViewports([NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetViewports>((IntPtr)(lpVtbl[21]))(pThis, NumViewports, pViewports);
            }
        }

        public void RSSetScissorRects([NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetScissorRects>((IntPtr)(lpVtbl[22]))(pThis, NumRects, pRects);
            }
        }

        public void OMSetBlendFactor([NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetBlendFactor>((IntPtr)(lpVtbl[23]))(pThis, BlendFactor);
            }
        }

        public void OMSetStencilRef([NativeTypeName("UINT")] [In] uint StencilRef)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetStencilRef>((IntPtr)(lpVtbl[24]))(pThis, StencilRef);
            }
        }

        public void SetPipelineState([NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPipelineState>((IntPtr)(lpVtbl[25]))(pThis, pPipelineState);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[26]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void ExecuteBundle([NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteBundle>((IntPtr)(lpVtbl[27]))(pThis, pCommandList);
            }
        }

        public void SetDescriptorHeaps([NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetDescriptorHeaps>((IntPtr)(lpVtbl[28]))(pThis, NumDescriptorHeaps, ppDescriptorHeaps);
            }
        }

        public void SetComputeRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootSignature>((IntPtr)(lpVtbl[29]))(pThis, pRootSignature);
            }
        }

        public void SetGraphicsRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootSignature>((IntPtr)(lpVtbl[30]))(pThis, pRootSignature);
            }
        }

        public void SetComputeRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootDescriptorTable>((IntPtr)(lpVtbl[31]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetGraphicsRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootDescriptorTable>((IntPtr)(lpVtbl[32]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetComputeRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstant>((IntPtr)(lpVtbl[33]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstant>((IntPtr)(lpVtbl[34]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstants>((IntPtr)(lpVtbl[35]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstants>((IntPtr)(lpVtbl[36]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootConstantBufferView>((IntPtr)(lpVtbl[37]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootConstantBufferView>((IntPtr)(lpVtbl[38]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootShaderResourceView>((IntPtr)(lpVtbl[39]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootShaderResourceView>((IntPtr)(lpVtbl[40]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootUnorderedAccessView>((IntPtr)(lpVtbl[41]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootUnorderedAccessView>((IntPtr)(lpVtbl[42]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void IASetIndexBuffer([NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetIndexBuffer>((IntPtr)(lpVtbl[43]))(pThis, pView);
            }
        }

        public void IASetVertexBuffers([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetVertexBuffers>((IntPtr)(lpVtbl[44]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void SOSetTargets([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SOSetTargets>((IntPtr)(lpVtbl[45]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void OMSetRenderTargets([NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetRenderTargets>((IntPtr)(lpVtbl[46]))(pThis, NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
            }
        }

        public void ClearDepthStencilView([In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearDepthStencilView>((IntPtr)(lpVtbl[47]))(pThis, DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
            }
        }

        public void ClearRenderTargetView([In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearRenderTargetView>((IntPtr)(lpVtbl[48]))(pThis, RenderTargetView, ColorRGBA, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewUint([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewUint>((IntPtr)(lpVtbl[49]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewFloat([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewFloat>((IntPtr)(lpVtbl[50]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[51]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[52]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[53]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[54]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[55]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[56]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[57]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[58]))(pThis);
            }
        }

        public void ExecuteIndirect([NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteIndirect>((IntPtr)(lpVtbl[59]))(pThis, pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
            }
        }

        public void AtomicCopyBufferUINT([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT>((IntPtr)(lpVtbl[60]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void AtomicCopyBufferUINT64([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT64>((IntPtr)(lpVtbl[61]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void OMSetDepthBounds([NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetDepthBounds>((IntPtr)(lpVtbl[62]))(pThis, Min, Max);
            }
        }

        public void SetSamplePositions([NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetSamplePositions>((IntPtr)(lpVtbl[63]))(pThis, NumSamplesPerPixel, NumPixels, pSamplePositions);
            }
        }

        public void ResolveSubresourceRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresourceRegion>((IntPtr)(lpVtbl[64]))(pThis, pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
            }
        }

        public void SetViewInstanceMask([NativeTypeName("UINT")] [In] uint Mask)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetViewInstanceMask>((IntPtr)(lpVtbl[65]))(pThis, Mask);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[66]))(pThis, Count, pParams, pModes);
            }
        }

        public void SetProtectedResourceSession([NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetProtectedResourceSession>((IntPtr)(lpVtbl[67]))(pThis, pProtectedResourceSession);
            }
        }

        public void BeginRenderPass([NativeTypeName("UINT")] [In] uint NumRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_RENDER_TARGET_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_RENDER_PASS_RENDER_TARGET_DESC* pRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC *")] [Const] [In][Optional] D3D12_RENDER_PASS_DEPTH_STENCIL_DESC* pDepthStencil, D3D12_RENDER_PASS_FLAGS Flags)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginRenderPass>((IntPtr)(lpVtbl[68]))(pThis, NumRenderTargets, pRenderTargets, pDepthStencil, Flags);
            }
        }

        public void EndRenderPass()
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndRenderPass>((IntPtr)(lpVtbl[69]))(pThis);
            }
        }

        public void InitializeMetaCommand([NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pInitializationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr InitializationParametersDataSizeInBytes)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_InitializeMetaCommand>((IntPtr)(lpVtbl[70]))(pThis, pMetaCommand, pInitializationParametersData, InitializationParametersDataSizeInBytes);
            }
        }

        public void ExecuteMetaCommand([NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pExecutionParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr ExecutionParametersDataSizeInBytes)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteMetaCommand>((IntPtr)(lpVtbl[71]))(pThis, pMetaCommand, pExecutionParametersData, ExecutionParametersDataSizeInBytes);
            }
        }

        public void BuildRaytracingAccelerationStructure([NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumPostbuildInfoDescs, [NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pPostbuildInfoDescs)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BuildRaytracingAccelerationStructure>((IntPtr)(lpVtbl[72]))(pThis, pDesc, NumPostbuildInfoDescs, pPostbuildInfoDescs);
            }
        }

        public void EmitRaytracingAccelerationStructurePostbuildInfo([NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumSourceAccelerationStructures, [NativeTypeName("const D3D12_GPU_VIRTUAL_ADDRESS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ulong* pSourceAccelerationStructureData)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EmitRaytracingAccelerationStructurePostbuildInfo>((IntPtr)(lpVtbl[73]))(pThis, pDesc, NumSourceAccelerationStructures, pSourceAccelerationStructureData);
            }
        }

        public void CopyRaytracingAccelerationStructure([NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong DestAccelerationStructureData, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong SourceAccelerationStructureData, [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyRaytracingAccelerationStructure>((IntPtr)(lpVtbl[74]))(pThis, DestAccelerationStructureData, SourceAccelerationStructureData, Mode);
            }
        }

        public void SetPipelineState1([NativeTypeName("ID3D12StateObject *")] [In] ID3D12StateObject* pStateObject)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPipelineState1>((IntPtr)(lpVtbl[75]))(pThis, pStateObject);
            }
        }

        public void DispatchRays([NativeTypeName("const D3D12_DISPATCH_RAYS_DESC *")] [Const] [In] D3D12_DISPATCH_RAYS_DESC* pDesc)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DispatchRays>((IntPtr)(lpVtbl[76]))(pThis, pDesc);
            }
        }

        public void RSSetShadingRate([In] D3D12_SHADING_RATE baseShadingRate, [NativeTypeName("const D3D12_SHADING_RATE_COMBINER *")] [Const] [In][Optional] D3D12_SHADING_RATE_COMBINER* combiners)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetShadingRate>((IntPtr)(lpVtbl[77]))(pThis, baseShadingRate, combiners);
            }
        }

        public void RSSetShadingRateImage([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* shadingRateImage)
        {
            fixed (ID3D12GraphicsCommandList5* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetShadingRateImage>((IntPtr)(lpVtbl[78]))(pThis, shadingRateImage);
            }
        }
    }

    public partial struct D3D12_DISPATCH_MESH_ARGUMENTS
    {
        [NativeTypeName("UINT")]
        public uint ThreadGroupCountX;

        [NativeTypeName("UINT")]
        public uint ThreadGroupCountY;

        [NativeTypeName("UINT")]
        public uint ThreadGroupCountZ;
    }

    [Guid("C3827890-E548-4CFA-96CF-5689A9370F80")]
    [NativeTypeName("struct ID3D12GraphicsCommandList6 : ID3D12GraphicsCommandList5")]
    [NativeInheritance("ID3D12GraphicsCommandList5")]
    public unsafe partial struct ID3D12GraphicsCommandList6
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12GraphicsCommandList6* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12GraphicsCommandList6* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12GraphicsCommandList6* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12GraphicsCommandList6* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawInstanced(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DrawIndexedInstanced(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _Dispatch(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyBufferRegion(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTextureRegion(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyResource(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyTiles(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresource(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetPrimitiveTopology(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetViewports(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetScissorRects(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetBlendFactor(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetStencilRef(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint StencilRef);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPipelineState(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteBundle(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetDescriptorHeaps(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootSignature(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootSignature(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootDescriptorTable(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootDescriptorTable(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstant(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstant(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRoot32BitConstants(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRoot32BitConstants(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootConstantBufferView(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootConstantBufferView(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootShaderResourceView(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootShaderResourceView(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetComputeRootUnorderedAccessView(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetGraphicsRootUnorderedAccessView(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetIndexBuffer(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _IASetVertexBuffers(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SOSetTargets(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetRenderTargets(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearDepthStencilView(ID3D12GraphicsCommandList6* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearRenderTargetView(ID3D12GraphicsCommandList6* pThis, [In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewUint(ID3D12GraphicsCommandList6* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearUnorderedAccessViewFloat(ID3D12GraphicsCommandList6* pThis, [In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12GraphicsCommandList6* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteIndirect(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AtomicCopyBufferUINT64(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _OMSetDepthBounds(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetSamplePositions(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveSubresourceRegion(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetViewInstanceMask(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint Mask);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetProtectedResourceSession(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginRenderPass(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint NumRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_RENDER_TARGET_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_RENDER_PASS_RENDER_TARGET_DESC* pRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC *")] [Const] [In][Optional] D3D12_RENDER_PASS_DEPTH_STENCIL_DESC* pDepthStencil, D3D12_RENDER_PASS_FLAGS Flags);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndRenderPass(ID3D12GraphicsCommandList6* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _InitializeMetaCommand(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pInitializationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr InitializationParametersDataSizeInBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteMetaCommand(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pExecutionParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr ExecutionParametersDataSizeInBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BuildRaytracingAccelerationStructure(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumPostbuildInfoDescs, [NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pPostbuildInfoDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EmitRaytracingAccelerationStructurePostbuildInfo(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumSourceAccelerationStructures, [NativeTypeName("const D3D12_GPU_VIRTUAL_ADDRESS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ulong* pSourceAccelerationStructureData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _CopyRaytracingAccelerationStructure(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong DestAccelerationStructureData, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong SourceAccelerationStructureData, [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPipelineState1(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12StateObject *")] [In] ID3D12StateObject* pStateObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DispatchRays(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("const D3D12_DISPATCH_RAYS_DESC *")] [Const] [In] D3D12_DISPATCH_RAYS_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetShadingRate(ID3D12GraphicsCommandList6* pThis, [In] D3D12_SHADING_RATE baseShadingRate, [NativeTypeName("const D3D12_SHADING_RATE_COMBINER *")] [Const] [In][Optional] D3D12_SHADING_RATE_COMBINER* combiners);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _RSSetShadingRateImage(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* shadingRateImage);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DispatchMesh(ID3D12GraphicsCommandList6* pThis, [NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator, [NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pInitialState)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator, pInitialState);
            }
        }

        public void ClearState([NativeTypeName("ID3D12PipelineState *")] [In][Optional] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis, pPipelineState);
            }
        }

        public void DrawInstanced([NativeTypeName("UINT")] [In] uint VertexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawInstanced>((IntPtr)(lpVtbl[12]))(pThis, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
            }
        }

        public void DrawIndexedInstanced([NativeTypeName("UINT")] [In] uint IndexCountPerInstance, [NativeTypeName("UINT")] [In] uint InstanceCount, [NativeTypeName("UINT")] [In] uint StartIndexLocation, [NativeTypeName("INT")] [In] int BaseVertexLocation, [NativeTypeName("UINT")] [In] uint StartInstanceLocation)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DrawIndexedInstanced>((IntPtr)(lpVtbl[13]))(pThis, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
            }
        }

        public void Dispatch([NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_Dispatch>((IntPtr)(lpVtbl[14]))(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }
        }

        public void CopyBufferRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT64")] ulong NumBytes)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyBufferRegion>((IntPtr)(lpVtbl[15]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, NumBytes);
            }
        }

        public void CopyTextureRegion([NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pDst, [NativeTypeName("UINT")] uint DstX, [NativeTypeName("UINT")] uint DstY, [NativeTypeName("UINT")] uint DstZ, [NativeTypeName("const D3D12_TEXTURE_COPY_LOCATION *")] [Const] [In] D3D12_TEXTURE_COPY_LOCATION* pSrc, [NativeTypeName("const D3D12_BOX *")] [Const] [In][Optional] D3D12_BOX* pSrcBox)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTextureRegion>((IntPtr)(lpVtbl[16]))(pThis, pDst, DstX, DstY, DstZ, pSrc, pSrcBox);
            }
        }

        public void CopyResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyResource>((IntPtr)(lpVtbl[17]))(pThis, pDstResource, pSrcResource);
            }
        }

        public void CopyTiles([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pTiledResource, [NativeTypeName("const D3D12_TILED_RESOURCE_COORDINATE *")] [Const] [In] D3D12_TILED_RESOURCE_COORDINATE* pTileRegionStartCoordinate, [NativeTypeName("const D3D12_TILE_REGION_SIZE *")] [Const] [In] D3D12_TILE_REGION_SIZE* pTileRegionSize, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyTiles>((IntPtr)(lpVtbl[18]))(pThis, pTiledResource, pTileRegionStartCoordinate, pTileRegionSize, pBuffer, BufferStartOffsetInBytes, Flags);
            }
        }

        public void ResolveSubresource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [In] DXGI_FORMAT Format)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresource>((IntPtr)(lpVtbl[19]))(pThis, pDstResource, DstSubresource, pSrcResource, SrcSubresource, Format);
            }
        }

        public void IASetPrimitiveTopology([NativeTypeName("D3D12_PRIMITIVE_TOPOLOGY")] [In] D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetPrimitiveTopology>((IntPtr)(lpVtbl[20]))(pThis, PrimitiveTopology);
            }
        }

        public void RSSetViewports([NativeTypeName("UINT")] uint NumViewports, [NativeTypeName("const D3D12_VIEWPORT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_VIEWPORT* pViewports)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetViewports>((IntPtr)(lpVtbl[21]))(pThis, NumViewports, pViewports);
            }
        }

        public void RSSetScissorRects([NativeTypeName("UINT")] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetScissorRects>((IntPtr)(lpVtbl[22]))(pThis, NumRects, pRects);
            }
        }

        public void OMSetBlendFactor([NativeTypeName("const FLOAT [4]")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeConst = 4)][In][Optional] float* BlendFactor)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetBlendFactor>((IntPtr)(lpVtbl[23]))(pThis, BlendFactor);
            }
        }

        public void OMSetStencilRef([NativeTypeName("UINT")] [In] uint StencilRef)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetStencilRef>((IntPtr)(lpVtbl[24]))(pThis, StencilRef);
            }
        }

        public void SetPipelineState([NativeTypeName("ID3D12PipelineState *")] [In] ID3D12PipelineState* pPipelineState)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPipelineState>((IntPtr)(lpVtbl[25]))(pThis, pPipelineState);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[26]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void ExecuteBundle([NativeTypeName("ID3D12GraphicsCommandList *")] [In] ID3D12GraphicsCommandList* pCommandList)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteBundle>((IntPtr)(lpVtbl[27]))(pThis, pCommandList);
            }
        }

        public void SetDescriptorHeaps([NativeTypeName("UINT")] [In] uint NumDescriptorHeaps, [NativeTypeName("ID3D12DescriptorHeap *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] ID3D12DescriptorHeap** ppDescriptorHeaps)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetDescriptorHeaps>((IntPtr)(lpVtbl[28]))(pThis, NumDescriptorHeaps, ppDescriptorHeaps);
            }
        }

        public void SetComputeRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootSignature>((IntPtr)(lpVtbl[29]))(pThis, pRootSignature);
            }
        }

        public void SetGraphicsRootSignature([NativeTypeName("ID3D12RootSignature *")] [In][Optional] ID3D12RootSignature* pRootSignature)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootSignature>((IntPtr)(lpVtbl[30]))(pThis, pRootSignature);
            }
        }

        public void SetComputeRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootDescriptorTable>((IntPtr)(lpVtbl[31]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetGraphicsRootDescriptorTable([NativeTypeName("UINT")] [In] uint RootParameterIndex, [In] D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootDescriptorTable>((IntPtr)(lpVtbl[32]))(pThis, RootParameterIndex, BaseDescriptor);
            }
        }

        public void SetComputeRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstant>((IntPtr)(lpVtbl[33]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstant([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint SrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstant>((IntPtr)(lpVtbl[34]))(pThis, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRoot32BitConstants>((IntPtr)(lpVtbl[35]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetGraphicsRoot32BitConstants([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("UINT")] [In] uint Num32BitValuesToSet, [NativeTypeName("const void *")] [Const] [In] void* pSrcData, [NativeTypeName("UINT")] [In] uint DestOffsetIn32BitValues)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRoot32BitConstants>((IntPtr)(lpVtbl[36]))(pThis, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
            }
        }

        public void SetComputeRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootConstantBufferView>((IntPtr)(lpVtbl[37]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootConstantBufferView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootConstantBufferView>((IntPtr)(lpVtbl[38]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootShaderResourceView>((IntPtr)(lpVtbl[39]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootShaderResourceView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootShaderResourceView>((IntPtr)(lpVtbl[40]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetComputeRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetComputeRootUnorderedAccessView>((IntPtr)(lpVtbl[41]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void SetGraphicsRootUnorderedAccessView([NativeTypeName("UINT")] [In] uint RootParameterIndex, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong BufferLocation)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetGraphicsRootUnorderedAccessView>((IntPtr)(lpVtbl[42]))(pThis, RootParameterIndex, BufferLocation);
            }
        }

        public void IASetIndexBuffer([NativeTypeName("const D3D12_INDEX_BUFFER_VIEW *")] [Const] [In][Optional] D3D12_INDEX_BUFFER_VIEW* pView)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetIndexBuffer>((IntPtr)(lpVtbl[43]))(pThis, pView);
            }
        }

        public void IASetVertexBuffers([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_VERTEX_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_VERTEX_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_IASetVertexBuffers>((IntPtr)(lpVtbl[44]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void SOSetTargets([NativeTypeName("UINT")] [In] uint StartSlot, [NativeTypeName("UINT")] [In] uint NumViews, [NativeTypeName("const D3D12_STREAM_OUTPUT_BUFFER_VIEW *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_STREAM_OUTPUT_BUFFER_VIEW* pViews)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SOSetTargets>((IntPtr)(lpVtbl[45]))(pThis, StartSlot, NumViews, pViews);
            }
        }

        public void OMSetRenderTargets([NativeTypeName("UINT")] [In] uint NumRenderTargetDescriptors, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, [NativeTypeName("BOOL")] [NativeTypeInfo(UnmanagedType.Bool)] [In] int RTsSingleHandleToDescriptorRange, [NativeTypeName("const D3D12_CPU_DESCRIPTOR_HANDLE *")] [Const] [In][Optional] D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetRenderTargets>((IntPtr)(lpVtbl[46]))(pThis, NumRenderTargetDescriptors, pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, pDepthStencilDescriptor);
            }
        }

        public void ClearDepthStencilView([In] D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, [In] D3D12_CLEAR_FLAGS ClearFlags, [NativeTypeName("FLOAT")] [In] float Depth, [NativeTypeName("UINT8")] [In] byte Stencil, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearDepthStencilView>((IntPtr)(lpVtbl[47]))(pThis, DepthStencilView, ClearFlags, Depth, Stencil, NumRects, pRects);
            }
        }

        public void ClearRenderTargetView([In] D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* ColorRGBA, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearRenderTargetView>((IntPtr)(lpVtbl[48]))(pThis, RenderTargetView, ColorRGBA, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewUint([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const UINT [4]")] [Const] [In] uint* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewUint>((IntPtr)(lpVtbl[49]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void ClearUnorderedAccessViewFloat([In] D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, [In] D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const FLOAT [4]")] [Const] [In] float* Values, [NativeTypeName("UINT")] [In] uint NumRects, [NativeTypeName("const D3D12_RECT *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] RECT* pRects)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearUnorderedAccessViewFloat>((IntPtr)(lpVtbl[50]))(pThis, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource, Values, NumRects, pRects);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[51]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[52]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[53]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[54]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[55]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[56]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[57]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[58]))(pThis);
            }
        }

        public void ExecuteIndirect([NativeTypeName("ID3D12CommandSignature *")] [In] ID3D12CommandSignature* pCommandSignature, [NativeTypeName("UINT")] [In] uint MaxCommandCount, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pArgumentBuffer, [NativeTypeName("UINT64")] [In] ulong ArgumentBufferOffset, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pCountBuffer, [NativeTypeName("UINT64")] [In] ulong CountBufferOffset)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteIndirect>((IntPtr)(lpVtbl[59]))(pThis, pCommandSignature, MaxCommandCount, pArgumentBuffer, ArgumentBufferOffset, pCountBuffer, CountBufferOffset);
            }
        }

        public void AtomicCopyBufferUINT([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT>((IntPtr)(lpVtbl[60]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void AtomicCopyBufferUINT64([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstBuffer, [NativeTypeName("UINT64")] ulong DstOffset, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcBuffer, [NativeTypeName("UINT64")] ulong SrcOffset, [NativeTypeName("UINT")] uint Dependencies, [NativeTypeName("ID3D12Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] ID3D12Resource** ppDependentResources, [NativeTypeName("const D3D12_SUBRESOURCE_RANGE_UINT64 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][In] D3D12_SUBRESOURCE_RANGE_UINT64* pDependentSubresourceRanges)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AtomicCopyBufferUINT64>((IntPtr)(lpVtbl[61]))(pThis, pDstBuffer, DstOffset, pSrcBuffer, SrcOffset, Dependencies, ppDependentResources, pDependentSubresourceRanges);
            }
        }

        public void OMSetDepthBounds([NativeTypeName("FLOAT")] [In] float Min, [NativeTypeName("FLOAT")] [In] float Max)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_OMSetDepthBounds>((IntPtr)(lpVtbl[62]))(pThis, Min, Max);
            }
        }

        public void SetSamplePositions([NativeTypeName("UINT")] [In] uint NumSamplesPerPixel, [NativeTypeName("UINT")] [In] uint NumPixels, [NativeTypeName("D3D12_SAMPLE_POSITION *")] [In] D3D12_SAMPLE_POSITION* pSamplePositions)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetSamplePositions>((IntPtr)(lpVtbl[63]))(pThis, NumSamplesPerPixel, NumPixels, pSamplePositions);
            }
        }

        public void ResolveSubresourceRegion([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDstResource, [NativeTypeName("UINT")] [In] uint DstSubresource, [NativeTypeName("UINT")] [In] uint DstX, [NativeTypeName("UINT")] [In] uint DstY, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pSrcResource, [NativeTypeName("UINT")] [In] uint SrcSubresource, [NativeTypeName("D3D12_RECT *")] [In][Optional] RECT* pSrcRect, [In] DXGI_FORMAT Format, [In] D3D12_RESOLVE_MODE ResolveMode)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveSubresourceRegion>((IntPtr)(lpVtbl[64]))(pThis, pDstResource, DstSubresource, DstX, DstY, pSrcResource, SrcSubresource, pSrcRect, Format, ResolveMode);
            }
        }

        public void SetViewInstanceMask([NativeTypeName("UINT")] [In] uint Mask)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetViewInstanceMask>((IntPtr)(lpVtbl[65]))(pThis, Mask);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[66]))(pThis, Count, pParams, pModes);
            }
        }

        public void SetProtectedResourceSession([NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetProtectedResourceSession>((IntPtr)(lpVtbl[67]))(pThis, pProtectedResourceSession);
            }
        }

        public void BeginRenderPass([NativeTypeName("UINT")] [In] uint NumRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_RENDER_TARGET_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_RENDER_PASS_RENDER_TARGET_DESC* pRenderTargets, [NativeTypeName("const D3D12_RENDER_PASS_DEPTH_STENCIL_DESC *")] [Const] [In][Optional] D3D12_RENDER_PASS_DEPTH_STENCIL_DESC* pDepthStencil, D3D12_RENDER_PASS_FLAGS Flags)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginRenderPass>((IntPtr)(lpVtbl[68]))(pThis, NumRenderTargets, pRenderTargets, pDepthStencil, Flags);
            }
        }

        public void EndRenderPass()
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndRenderPass>((IntPtr)(lpVtbl[69]))(pThis);
            }
        }

        public void InitializeMetaCommand([NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pInitializationParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr InitializationParametersDataSizeInBytes)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_InitializeMetaCommand>((IntPtr)(lpVtbl[70]))(pThis, pMetaCommand, pInitializationParametersData, InitializationParametersDataSizeInBytes);
            }
        }

        public void ExecuteMetaCommand([NativeTypeName("ID3D12MetaCommand *")] [In] ID3D12MetaCommand* pMetaCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pExecutionParametersData, [NativeTypeName("SIZE_T")] [In] UIntPtr ExecutionParametersDataSizeInBytes)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteMetaCommand>((IntPtr)(lpVtbl[71]))(pThis, pMetaCommand, pExecutionParametersData, ExecutionParametersDataSizeInBytes);
            }
        }

        public void BuildRaytracingAccelerationStructure([NativeTypeName("const D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC *")] [Const] [In] D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumPostbuildInfoDescs, [NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pPostbuildInfoDescs)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BuildRaytracingAccelerationStructure>((IntPtr)(lpVtbl[72]))(pThis, pDesc, NumPostbuildInfoDescs, pPostbuildInfoDescs);
            }
        }

        public void EmitRaytracingAccelerationStructurePostbuildInfo([NativeTypeName("const D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC *")] [Const] [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC* pDesc, [NativeTypeName("UINT")] [In] uint NumSourceAccelerationStructures, [NativeTypeName("const D3D12_GPU_VIRTUAL_ADDRESS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ulong* pSourceAccelerationStructureData)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EmitRaytracingAccelerationStructurePostbuildInfo>((IntPtr)(lpVtbl[73]))(pThis, pDesc, NumSourceAccelerationStructures, pSourceAccelerationStructureData);
            }
        }

        public void CopyRaytracingAccelerationStructure([NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong DestAccelerationStructureData, [NativeTypeName("D3D12_GPU_VIRTUAL_ADDRESS")] [In] ulong SourceAccelerationStructureData, [In] D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE Mode)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_CopyRaytracingAccelerationStructure>((IntPtr)(lpVtbl[74]))(pThis, DestAccelerationStructureData, SourceAccelerationStructureData, Mode);
            }
        }

        public void SetPipelineState1([NativeTypeName("ID3D12StateObject *")] [In] ID3D12StateObject* pStateObject)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPipelineState1>((IntPtr)(lpVtbl[75]))(pThis, pStateObject);
            }
        }

        public void DispatchRays([NativeTypeName("const D3D12_DISPATCH_RAYS_DESC *")] [Const] [In] D3D12_DISPATCH_RAYS_DESC* pDesc)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DispatchRays>((IntPtr)(lpVtbl[76]))(pThis, pDesc);
            }
        }

        public void RSSetShadingRate([In] D3D12_SHADING_RATE baseShadingRate, [NativeTypeName("const D3D12_SHADING_RATE_COMBINER *")] [Const] [In][Optional] D3D12_SHADING_RATE_COMBINER* combiners)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetShadingRate>((IntPtr)(lpVtbl[77]))(pThis, baseShadingRate, combiners);
            }
        }

        public void RSSetShadingRateImage([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* shadingRateImage)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_RSSetShadingRateImage>((IntPtr)(lpVtbl[78]))(pThis, shadingRateImage);
            }
        }

        public void DispatchMesh([NativeTypeName("UINT")] [In] uint ThreadGroupCountX, [NativeTypeName("UINT")] [In] uint ThreadGroupCountY, [NativeTypeName("UINT")] [In] uint ThreadGroupCountZ)
        {
            fixed (ID3D12GraphicsCommandList6* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DispatchMesh>((IntPtr)(lpVtbl[79]))(pThis, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
            }
        }
    }

    public enum D3D12_SHADER_VERSION_TYPE
    {
        D3D12_SHVER_PIXEL_SHADER = 0,
        D3D12_SHVER_VERTEX_SHADER = 1,
        D3D12_SHVER_GEOMETRY_SHADER = 2,
        D3D12_SHVER_HULL_SHADER = 3,
        D3D12_SHVER_DOMAIN_SHADER = 4,
        D3D12_SHVER_COMPUTE_SHADER = 5,
        D3D12_SHVER_RESERVED0 = 0xFFF0,
    }

    public unsafe partial struct D3D12_SIGNATURE_PARAMETER_DESC
    {
        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* SemanticName;

        [NativeTypeName("UINT")]
        public uint SemanticIndex;

        [NativeTypeName("UINT")]
        public uint Register;

        public D3D_NAME SystemValueType;

        public D3D_REGISTER_COMPONENT_TYPE ComponentType;

        [NativeTypeName("BYTE")]
        public byte Mask;

        [NativeTypeName("BYTE")]
        public byte ReadWriteMask;

        [NativeTypeName("UINT")]
        public uint Stream;

        public D3D_MIN_PRECISION MinPrecision;
    }

    public unsafe partial struct D3D12_SHADER_BUFFER_DESC
    {
        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* Name;

        public D3D_CBUFFER_TYPE Type;

        [NativeTypeName("UINT")]
        public uint Variables;

        [NativeTypeName("UINT")]
        public uint Size;

        [NativeTypeName("UINT")]
        public uint uFlags;
    }

    public unsafe partial struct D3D12_SHADER_VARIABLE_DESC
    {
        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* Name;

        [NativeTypeName("UINT")]
        public uint StartOffset;

        [NativeTypeName("UINT")]
        public uint Size;

        [NativeTypeName("UINT")]
        public uint uFlags;

        [NativeTypeName("LPVOID")]
        public void* DefaultValue;

        [NativeTypeName("UINT")]
        public uint StartTexture;

        [NativeTypeName("UINT")]
        public uint TextureSize;

        [NativeTypeName("UINT")]
        public uint StartSampler;

        [NativeTypeName("UINT")]
        public uint SamplerSize;
    }

    public unsafe partial struct D3D12_SHADER_TYPE_DESC
    {
        public D3D_SHADER_VARIABLE_CLASS Class;

        public D3D_SHADER_VARIABLE_TYPE Type;

        [NativeTypeName("UINT")]
        public uint Rows;

        [NativeTypeName("UINT")]
        public uint Columns;

        [NativeTypeName("UINT")]
        public uint Elements;

        [NativeTypeName("UINT")]
        public uint Members;

        [NativeTypeName("UINT")]
        public uint Offset;

        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* Name;
    }

    public unsafe partial struct D3D12_SHADER_DESC
    {
        [NativeTypeName("UINT")]
        public uint Version;

        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* Creator;

        [NativeTypeName("UINT")]
        public uint Flags;

        [NativeTypeName("UINT")]
        public uint ConstantBuffers;

        [NativeTypeName("UINT")]
        public uint BoundResources;

        [NativeTypeName("UINT")]
        public uint InputParameters;

        [NativeTypeName("UINT")]
        public uint OutputParameters;

        [NativeTypeName("UINT")]
        public uint InstructionCount;

        [NativeTypeName("UINT")]
        public uint TempRegisterCount;

        [NativeTypeName("UINT")]
        public uint TempArrayCount;

        [NativeTypeName("UINT")]
        public uint DefCount;

        [NativeTypeName("UINT")]
        public uint DclCount;

        [NativeTypeName("UINT")]
        public uint TextureNormalInstructions;

        [NativeTypeName("UINT")]
        public uint TextureLoadInstructions;

        [NativeTypeName("UINT")]
        public uint TextureCompInstructions;

        [NativeTypeName("UINT")]
        public uint TextureBiasInstructions;

        [NativeTypeName("UINT")]
        public uint TextureGradientInstructions;

        [NativeTypeName("UINT")]
        public uint FloatInstructionCount;

        [NativeTypeName("UINT")]
        public uint IntInstructionCount;

        [NativeTypeName("UINT")]
        public uint UintInstructionCount;

        [NativeTypeName("UINT")]
        public uint StaticFlowControlCount;

        [NativeTypeName("UINT")]
        public uint DynamicFlowControlCount;

        [NativeTypeName("UINT")]
        public uint MacroInstructionCount;

        [NativeTypeName("UINT")]
        public uint ArrayInstructionCount;

        [NativeTypeName("UINT")]
        public uint CutInstructionCount;

        [NativeTypeName("UINT")]
        public uint EmitInstructionCount;

        public D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;

        [NativeTypeName("UINT")]
        public uint GSMaxOutputVertexCount;

        public D3D_PRIMITIVE InputPrimitive;

        [NativeTypeName("UINT")]
        public uint PatchConstantParameters;

        [NativeTypeName("UINT")]
        public uint cGSInstanceCount;

        [NativeTypeName("UINT")]
        public uint cControlPoints;

        public D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;

        public D3D_TESSELLATOR_PARTITIONING HSPartitioning;

        public D3D_TESSELLATOR_DOMAIN TessellatorDomain;

        [NativeTypeName("UINT")]
        public uint cBarrierInstructions;

        [NativeTypeName("UINT")]
        public uint cInterlockedInstructions;

        [NativeTypeName("UINT")]
        public uint cTextureStoreInstructions;
    }

    public unsafe partial struct D3D12_SHADER_INPUT_BIND_DESC
    {
        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* Name;

        public D3D_SHADER_INPUT_TYPE Type;

        [NativeTypeName("UINT")]
        public uint BindPoint;

        [NativeTypeName("UINT")]
        public uint BindCount;

        [NativeTypeName("UINT")]
        public uint uFlags;

        public D3D_RESOURCE_RETURN_TYPE ReturnType;

        public D3D_SRV_DIMENSION Dimension;

        [NativeTypeName("UINT")]
        public uint NumSamples;

        [NativeTypeName("UINT")]
        public uint Space;

        [NativeTypeName("UINT")]
        public uint uID;
    }

    public unsafe partial struct D3D12_LIBRARY_DESC
    {
        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* Creator;

        [NativeTypeName("UINT")]
        public uint Flags;

        [NativeTypeName("UINT")]
        public uint FunctionCount;
    }

    public unsafe partial struct D3D12_FUNCTION_DESC
    {
        [NativeTypeName("UINT")]
        public uint Version;

        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* Creator;

        [NativeTypeName("UINT")]
        public uint Flags;

        [NativeTypeName("UINT")]
        public uint ConstantBuffers;

        [NativeTypeName("UINT")]
        public uint BoundResources;

        [NativeTypeName("UINT")]
        public uint InstructionCount;

        [NativeTypeName("UINT")]
        public uint TempRegisterCount;

        [NativeTypeName("UINT")]
        public uint TempArrayCount;

        [NativeTypeName("UINT")]
        public uint DefCount;

        [NativeTypeName("UINT")]
        public uint DclCount;

        [NativeTypeName("UINT")]
        public uint TextureNormalInstructions;

        [NativeTypeName("UINT")]
        public uint TextureLoadInstructions;

        [NativeTypeName("UINT")]
        public uint TextureCompInstructions;

        [NativeTypeName("UINT")]
        public uint TextureBiasInstructions;

        [NativeTypeName("UINT")]
        public uint TextureGradientInstructions;

        [NativeTypeName("UINT")]
        public uint FloatInstructionCount;

        [NativeTypeName("UINT")]
        public uint IntInstructionCount;

        [NativeTypeName("UINT")]
        public uint UintInstructionCount;

        [NativeTypeName("UINT")]
        public uint StaticFlowControlCount;

        [NativeTypeName("UINT")]
        public uint DynamicFlowControlCount;

        [NativeTypeName("UINT")]
        public uint MacroInstructionCount;

        [NativeTypeName("UINT")]
        public uint ArrayInstructionCount;

        [NativeTypeName("UINT")]
        public uint MovInstructionCount;

        [NativeTypeName("UINT")]
        public uint MovcInstructionCount;

        [NativeTypeName("UINT")]
        public uint ConversionInstructionCount;

        [NativeTypeName("UINT")]
        public uint BitwiseInstructionCount;

        public D3D_FEATURE_LEVEL MinFeatureLevel;

        [NativeTypeName("UINT64")]
        public ulong RequiredFeatureFlags;

        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* Name;

        [NativeTypeName("INT")]
        public int FunctionParameterCount;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int HasReturn;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Has10Level9VertexShader;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Has10Level9PixelShader;
    }

    public unsafe partial struct D3D12_PARAMETER_DESC
    {
        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* Name;

        [NativeTypeName("LPCSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* SemanticName;

        public D3D_SHADER_VARIABLE_TYPE Type;

        public D3D_SHADER_VARIABLE_CLASS Class;

        [NativeTypeName("UINT")]
        public uint Rows;

        [NativeTypeName("UINT")]
        public uint Columns;

        public D3D_INTERPOLATION_MODE InterpolationMode;

        public D3D_PARAMETER_FLAGS Flags;

        [NativeTypeName("UINT")]
        public uint FirstInRegister;

        [NativeTypeName("UINT")]
        public uint FirstInComponent;

        [NativeTypeName("UINT")]
        public uint FirstOutRegister;

        [NativeTypeName("UINT")]
        public uint FirstOutComponent;
    }

    [Guid("E913C351-783D-48CA-A1D1-4F306284AD56")]
    public unsafe partial struct ID3D12ShaderReflectionType
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDesc(ID3D12ShaderReflectionType* pThis, [NativeTypeName("D3D12_SHADER_TYPE_DESC *")] [Out] D3D12_SHADER_TYPE_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public delegate ID3D12ShaderReflectionType* _GetMemberTypeByIndex(ID3D12ShaderReflectionType* pThis, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public delegate ID3D12ShaderReflectionType* _GetMemberTypeByName(ID3D12ShaderReflectionType* pThis, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("LPCSTR")]
        [return: Const]
        [return: NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public delegate sbyte* _GetMemberTypeName(ID3D12ShaderReflectionType* pThis, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _IsEqual(ID3D12ShaderReflectionType* pThis, [NativeTypeName("ID3D12ShaderReflectionType *")] [In] ID3D12ShaderReflectionType* pType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public delegate ID3D12ShaderReflectionType* _GetSubType(ID3D12ShaderReflectionType* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public delegate ID3D12ShaderReflectionType* _GetBaseClass(ID3D12ShaderReflectionType* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNumInterfaces(ID3D12ShaderReflectionType* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public delegate ID3D12ShaderReflectionType* _GetInterfaceByIndex(ID3D12ShaderReflectionType* pThis, [NativeTypeName("UINT")] [In] uint uIndex);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _IsOfType(ID3D12ShaderReflectionType* pThis, [NativeTypeName("ID3D12ShaderReflectionType *")] [In] ID3D12ShaderReflectionType* pType);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _ImplementsInterface(ID3D12ShaderReflectionType* pThis, [NativeTypeName("ID3D12ShaderReflectionType *")] [In] ID3D12ShaderReflectionType* pBase);

        [return: NativeTypeName("HRESULT")]
        public int GetDesc([NativeTypeName("D3D12_SHADER_TYPE_DESC *")] [Out] D3D12_SHADER_TYPE_DESC* pDesc)
        {
            fixed (ID3D12ShaderReflectionType* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[0]))(pThis, pDesc);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public ID3D12ShaderReflectionType* GetMemberTypeByIndex([NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12ShaderReflectionType* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetMemberTypeByIndex>((IntPtr)(lpVtbl[1]))(pThis, Index);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public ID3D12ShaderReflectionType* GetMemberTypeByName([NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name)
        {
            fixed (ID3D12ShaderReflectionType* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetMemberTypeByName>((IntPtr)(lpVtbl[2]))(pThis, Name);
            }
        }

        [return: NativeTypeName("LPCSTR")]
        [return: Const]
        [return: NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)]
        public sbyte* GetMemberTypeName([NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12ShaderReflectionType* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetMemberTypeName>((IntPtr)(lpVtbl[3]))(pThis, Index);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int IsEqual([NativeTypeName("ID3D12ShaderReflectionType *")] [In] ID3D12ShaderReflectionType* pType)
        {
            fixed (ID3D12ShaderReflectionType* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_IsEqual>((IntPtr)(lpVtbl[4]))(pThis, pType);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public ID3D12ShaderReflectionType* GetSubType()
        {
            fixed (ID3D12ShaderReflectionType* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetSubType>((IntPtr)(lpVtbl[5]))(pThis);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public ID3D12ShaderReflectionType* GetBaseClass()
        {
            fixed (ID3D12ShaderReflectionType* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetBaseClass>((IntPtr)(lpVtbl[6]))(pThis);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNumInterfaces()
        {
            fixed (ID3D12ShaderReflectionType* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNumInterfaces>((IntPtr)(lpVtbl[7]))(pThis);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public ID3D12ShaderReflectionType* GetInterfaceByIndex([NativeTypeName("UINT")] [In] uint uIndex)
        {
            fixed (ID3D12ShaderReflectionType* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetInterfaceByIndex>((IntPtr)(lpVtbl[8]))(pThis, uIndex);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int IsOfType([NativeTypeName("ID3D12ShaderReflectionType *")] [In] ID3D12ShaderReflectionType* pType)
        {
            fixed (ID3D12ShaderReflectionType* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_IsOfType>((IntPtr)(lpVtbl[9]))(pThis, pType);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int ImplementsInterface([NativeTypeName("ID3D12ShaderReflectionType *")] [In] ID3D12ShaderReflectionType* pBase)
        {
            fixed (ID3D12ShaderReflectionType* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_ImplementsInterface>((IntPtr)(lpVtbl[10]))(pThis, pBase);
            }
        }
    }

    [Guid("8337A8A6-A216-444A-B2F4-314733A73AEA")]
    public unsafe partial struct ID3D12ShaderReflectionVariable
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDesc(ID3D12ShaderReflectionVariable* pThis, [NativeTypeName("D3D12_SHADER_VARIABLE_DESC *")] [Out] D3D12_SHADER_VARIABLE_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public delegate ID3D12ShaderReflectionType* _GetType(ID3D12ShaderReflectionVariable* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionConstantBuffer *")]
        public delegate ID3D12ShaderReflectionConstantBuffer* _GetBuffer(ID3D12ShaderReflectionVariable* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetInterfaceSlot(ID3D12ShaderReflectionVariable* pThis, [NativeTypeName("UINT")] [In] uint uArrayIndex);

        [return: NativeTypeName("HRESULT")]
        public int GetDesc([NativeTypeName("D3D12_SHADER_VARIABLE_DESC *")] [Out] D3D12_SHADER_VARIABLE_DESC* pDesc)
        {
            fixed (ID3D12ShaderReflectionVariable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[0]))(pThis, pDesc);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionType *")]
        public new ID3D12ShaderReflectionType* GetType()
        {
            fixed (ID3D12ShaderReflectionVariable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionConstantBuffer *")]
        public ID3D12ShaderReflectionConstantBuffer* GetBuffer()
        {
            fixed (ID3D12ShaderReflectionVariable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetBuffer>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetInterfaceSlot([NativeTypeName("UINT")] [In] uint uArrayIndex)
        {
            fixed (ID3D12ShaderReflectionVariable* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetInterfaceSlot>((IntPtr)(lpVtbl[3]))(pThis, uArrayIndex);
            }
        }
    }

    [Guid("C59598B4-48B3-4869-B9B1-B1618B14A8B7")]
    public unsafe partial struct ID3D12ShaderReflectionConstantBuffer
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDesc(ID3D12ShaderReflectionConstantBuffer* pThis, [NativeTypeName("D3D12_SHADER_BUFFER_DESC *")] D3D12_SHADER_BUFFER_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionVariable *")]
        public delegate ID3D12ShaderReflectionVariable* _GetVariableByIndex(ID3D12ShaderReflectionConstantBuffer* pThis, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionVariable *")]
        public delegate ID3D12ShaderReflectionVariable* _GetVariableByName(ID3D12ShaderReflectionConstantBuffer* pThis, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name);

        [return: NativeTypeName("HRESULT")]
        public int GetDesc([NativeTypeName("D3D12_SHADER_BUFFER_DESC *")] D3D12_SHADER_BUFFER_DESC* pDesc)
        {
            fixed (ID3D12ShaderReflectionConstantBuffer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[0]))(pThis, pDesc);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionVariable *")]
        public ID3D12ShaderReflectionVariable* GetVariableByIndex([NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12ShaderReflectionConstantBuffer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetVariableByIndex>((IntPtr)(lpVtbl[1]))(pThis, Index);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionVariable *")]
        public ID3D12ShaderReflectionVariable* GetVariableByName([NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name)
        {
            fixed (ID3D12ShaderReflectionConstantBuffer* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetVariableByName>((IntPtr)(lpVtbl[2]))(pThis, Name);
            }
        }
    }

    [Guid("5A58797D-A72C-478D-8BA2-EFC6B0EFE88E")]
    [NativeTypeName("struct ID3D12ShaderReflection : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12ShaderReflection
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12ShaderReflection* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12ShaderReflection* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12ShaderReflection* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDesc(ID3D12ShaderReflection* pThis, [NativeTypeName("D3D12_SHADER_DESC *")] [Out] D3D12_SHADER_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionConstantBuffer *")]
        public delegate ID3D12ShaderReflectionConstantBuffer* _GetConstantBufferByIndex(ID3D12ShaderReflection* pThis, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionConstantBuffer *")]
        public delegate ID3D12ShaderReflectionConstantBuffer* _GetConstantBufferByName(ID3D12ShaderReflection* pThis, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetResourceBindingDesc(ID3D12ShaderReflection* pThis, [NativeTypeName("UINT")] [In] uint ResourceIndex, [NativeTypeName("D3D12_SHADER_INPUT_BIND_DESC *")] [Out] D3D12_SHADER_INPUT_BIND_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetInputParameterDesc(ID3D12ShaderReflection* pThis, [NativeTypeName("UINT")] [In] uint ParameterIndex, [NativeTypeName("D3D12_SIGNATURE_PARAMETER_DESC *")] [Out] D3D12_SIGNATURE_PARAMETER_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetOutputParameterDesc(ID3D12ShaderReflection* pThis, [NativeTypeName("UINT")] [In] uint ParameterIndex, [NativeTypeName("D3D12_SIGNATURE_PARAMETER_DESC *")] [Out] D3D12_SIGNATURE_PARAMETER_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPatchConstantParameterDesc(ID3D12ShaderReflection* pThis, [NativeTypeName("UINT")] [In] uint ParameterIndex, [NativeTypeName("D3D12_SIGNATURE_PARAMETER_DESC *")] [Out] D3D12_SIGNATURE_PARAMETER_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionVariable *")]
        public delegate ID3D12ShaderReflectionVariable* _GetVariableByName(ID3D12ShaderReflection* pThis, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetResourceBindingDescByName(ID3D12ShaderReflection* pThis, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name, [NativeTypeName("D3D12_SHADER_INPUT_BIND_DESC *")] [Out] D3D12_SHADER_INPUT_BIND_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetMovInstructionCount(ID3D12ShaderReflection* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetMovcInstructionCount(ID3D12ShaderReflection* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetConversionInstructionCount(ID3D12ShaderReflection* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetBitwiseInstructionCount(ID3D12ShaderReflection* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D_PRIMITIVE _GetGSInputPrimitive(ID3D12ShaderReflection* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public delegate int _IsSampleFrequencyShader(ID3D12ShaderReflection* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNumInterfaceSlots(ID3D12ShaderReflection* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetMinFeatureLevel(ID3D12ShaderReflection* pThis, [NativeTypeName("enum D3D_FEATURE_LEVEL *")] [Out] D3D_FEATURE_LEVEL* pLevel);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetThreadGroupSize(ID3D12ShaderReflection* pThis, [NativeTypeName("UINT *")] [Out][Optional] uint* pSizeX, [NativeTypeName("UINT *")] [Out][Optional] uint* pSizeY, [NativeTypeName("UINT *")] [Out][Optional] uint* pSizeZ);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT64")]
        public delegate ulong _GetRequiresFlags(ID3D12ShaderReflection* pThis);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDesc([NativeTypeName("D3D12_SHADER_DESC *")] [Out] D3D12_SHADER_DESC* pDesc)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[3]))(pThis, pDesc);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionConstantBuffer *")]
        public ID3D12ShaderReflectionConstantBuffer* GetConstantBufferByIndex([NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetConstantBufferByIndex>((IntPtr)(lpVtbl[4]))(pThis, Index);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionConstantBuffer *")]
        public ID3D12ShaderReflectionConstantBuffer* GetConstantBufferByName([NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetConstantBufferByName>((IntPtr)(lpVtbl[5]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetResourceBindingDesc([NativeTypeName("UINT")] [In] uint ResourceIndex, [NativeTypeName("D3D12_SHADER_INPUT_BIND_DESC *")] [Out] D3D12_SHADER_INPUT_BIND_DESC* pDesc)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetResourceBindingDesc>((IntPtr)(lpVtbl[6]))(pThis, ResourceIndex, pDesc);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetInputParameterDesc([NativeTypeName("UINT")] [In] uint ParameterIndex, [NativeTypeName("D3D12_SIGNATURE_PARAMETER_DESC *")] [Out] D3D12_SIGNATURE_PARAMETER_DESC* pDesc)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetInputParameterDesc>((IntPtr)(lpVtbl[7]))(pThis, ParameterIndex, pDesc);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetOutputParameterDesc([NativeTypeName("UINT")] [In] uint ParameterIndex, [NativeTypeName("D3D12_SIGNATURE_PARAMETER_DESC *")] [Out] D3D12_SIGNATURE_PARAMETER_DESC* pDesc)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetOutputParameterDesc>((IntPtr)(lpVtbl[8]))(pThis, ParameterIndex, pDesc);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPatchConstantParameterDesc([NativeTypeName("UINT")] [In] uint ParameterIndex, [NativeTypeName("D3D12_SIGNATURE_PARAMETER_DESC *")] [Out] D3D12_SIGNATURE_PARAMETER_DESC* pDesc)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPatchConstantParameterDesc>((IntPtr)(lpVtbl[9]))(pThis, ParameterIndex, pDesc);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionVariable *")]
        public ID3D12ShaderReflectionVariable* GetVariableByName([NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetVariableByName>((IntPtr)(lpVtbl[10]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetResourceBindingDescByName([NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name, [NativeTypeName("D3D12_SHADER_INPUT_BIND_DESC *")] [Out] D3D12_SHADER_INPUT_BIND_DESC* pDesc)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetResourceBindingDescByName>((IntPtr)(lpVtbl[11]))(pThis, Name, pDesc);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetMovInstructionCount()
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetMovInstructionCount>((IntPtr)(lpVtbl[12]))(pThis);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetMovcInstructionCount()
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetMovcInstructionCount>((IntPtr)(lpVtbl[13]))(pThis);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetConversionInstructionCount()
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetConversionInstructionCount>((IntPtr)(lpVtbl[14]))(pThis);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetBitwiseInstructionCount()
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetBitwiseInstructionCount>((IntPtr)(lpVtbl[15]))(pThis);
            }
        }

        public D3D_PRIMITIVE GetGSInputPrimitive()
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetGSInputPrimitive>((IntPtr)(lpVtbl[16]))(pThis);
            }
        }

        [return: NativeTypeName("BOOL")]
        [return: NativeTypeInfo(UnmanagedType.Bool)]
        public int IsSampleFrequencyShader()
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_IsSampleFrequencyShader>((IntPtr)(lpVtbl[17]))(pThis);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNumInterfaceSlots()
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNumInterfaceSlots>((IntPtr)(lpVtbl[18]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetMinFeatureLevel([NativeTypeName("enum D3D_FEATURE_LEVEL *")] [Out] D3D_FEATURE_LEVEL* pLevel)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetMinFeatureLevel>((IntPtr)(lpVtbl[19]))(pThis, pLevel);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetThreadGroupSize([NativeTypeName("UINT *")] [Out][Optional] uint* pSizeX, [NativeTypeName("UINT *")] [Out][Optional] uint* pSizeY, [NativeTypeName("UINT *")] [Out][Optional] uint* pSizeZ)
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetThreadGroupSize>((IntPtr)(lpVtbl[20]))(pThis, pSizeX, pSizeY, pSizeZ);
            }
        }

        [return: NativeTypeName("UINT64")]
        public ulong GetRequiresFlags()
        {
            fixed (ID3D12ShaderReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetRequiresFlags>((IntPtr)(lpVtbl[21]))(pThis);
            }
        }
    }

    [Guid("8E349D19-54DB-4A56-9DC9-119D87BDB804")]
    [NativeTypeName("struct ID3D12LibraryReflection : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12LibraryReflection
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12LibraryReflection* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12LibraryReflection* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12LibraryReflection* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDesc(ID3D12LibraryReflection* pThis, [NativeTypeName("D3D12_LIBRARY_DESC *")] [Out] D3D12_LIBRARY_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12FunctionReflection *")]
        public delegate ID3D12FunctionReflection* _GetFunctionByIndex(ID3D12LibraryReflection* pThis, [NativeTypeName("INT")] [In] int FunctionIndex);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12LibraryReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12LibraryReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12LibraryReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDesc([NativeTypeName("D3D12_LIBRARY_DESC *")] [Out] D3D12_LIBRARY_DESC* pDesc)
        {
            fixed (ID3D12LibraryReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[3]))(pThis, pDesc);
            }
        }

        [return: NativeTypeName("ID3D12FunctionReflection *")]
        public ID3D12FunctionReflection* GetFunctionByIndex([NativeTypeName("INT")] [In] int FunctionIndex)
        {
            fixed (ID3D12LibraryReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetFunctionByIndex>((IntPtr)(lpVtbl[4]))(pThis, FunctionIndex);
            }
        }
    }

    [Guid("1108795C-2772-4BA9-B2A8-D464DC7E2799")]
    public unsafe partial struct ID3D12FunctionReflection
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDesc(ID3D12FunctionReflection* pThis, [NativeTypeName("D3D12_FUNCTION_DESC *")] [Out] D3D12_FUNCTION_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionConstantBuffer *")]
        public delegate ID3D12ShaderReflectionConstantBuffer* _GetConstantBufferByIndex(ID3D12FunctionReflection* pThis, [NativeTypeName("UINT")] [In] uint BufferIndex);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionConstantBuffer *")]
        public delegate ID3D12ShaderReflectionConstantBuffer* _GetConstantBufferByName(ID3D12FunctionReflection* pThis, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetResourceBindingDesc(ID3D12FunctionReflection* pThis, [NativeTypeName("UINT")] [In] uint ResourceIndex, [NativeTypeName("D3D12_SHADER_INPUT_BIND_DESC *")] [Out] D3D12_SHADER_INPUT_BIND_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12ShaderReflectionVariable *")]
        public delegate ID3D12ShaderReflectionVariable* _GetVariableByName(ID3D12FunctionReflection* pThis, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetResourceBindingDescByName(ID3D12FunctionReflection* pThis, [NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name, [NativeTypeName("D3D12_SHADER_INPUT_BIND_DESC *")] [Out] D3D12_SHADER_INPUT_BIND_DESC* pDesc);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ID3D12FunctionParameterReflection *")]
        public delegate ID3D12FunctionParameterReflection* _GetFunctionParameter(ID3D12FunctionReflection* pThis, [NativeTypeName("INT")] [In] int ParameterIndex);

        [return: NativeTypeName("HRESULT")]
        public int GetDesc([NativeTypeName("D3D12_FUNCTION_DESC *")] [Out] D3D12_FUNCTION_DESC* pDesc)
        {
            fixed (ID3D12FunctionReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[0]))(pThis, pDesc);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionConstantBuffer *")]
        public ID3D12ShaderReflectionConstantBuffer* GetConstantBufferByIndex([NativeTypeName("UINT")] [In] uint BufferIndex)
        {
            fixed (ID3D12FunctionReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetConstantBufferByIndex>((IntPtr)(lpVtbl[1]))(pThis, BufferIndex);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionConstantBuffer *")]
        public ID3D12ShaderReflectionConstantBuffer* GetConstantBufferByName([NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name)
        {
            fixed (ID3D12FunctionReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetConstantBufferByName>((IntPtr)(lpVtbl[2]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetResourceBindingDesc([NativeTypeName("UINT")] [In] uint ResourceIndex, [NativeTypeName("D3D12_SHADER_INPUT_BIND_DESC *")] [Out] D3D12_SHADER_INPUT_BIND_DESC* pDesc)
        {
            fixed (ID3D12FunctionReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetResourceBindingDesc>((IntPtr)(lpVtbl[3]))(pThis, ResourceIndex, pDesc);
            }
        }

        [return: NativeTypeName("ID3D12ShaderReflectionVariable *")]
        public ID3D12ShaderReflectionVariable* GetVariableByName([NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name)
        {
            fixed (ID3D12FunctionReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetVariableByName>((IntPtr)(lpVtbl[4]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetResourceBindingDescByName([NativeTypeName("LPCSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPStr, IsNullTerminated = true)] [In] sbyte* Name, [NativeTypeName("D3D12_SHADER_INPUT_BIND_DESC *")] [Out] D3D12_SHADER_INPUT_BIND_DESC* pDesc)
        {
            fixed (ID3D12FunctionReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetResourceBindingDescByName>((IntPtr)(lpVtbl[5]))(pThis, Name, pDesc);
            }
        }

        [return: NativeTypeName("ID3D12FunctionParameterReflection *")]
        public ID3D12FunctionParameterReflection* GetFunctionParameter([NativeTypeName("INT")] [In] int ParameterIndex)
        {
            fixed (ID3D12FunctionReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetFunctionParameter>((IntPtr)(lpVtbl[6]))(pThis, ParameterIndex);
            }
        }
    }

    [Guid("EC25F42D-7006-4F2B-B33E-02CC3375733F")]
    public unsafe partial struct ID3D12FunctionParameterReflection
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDesc(ID3D12FunctionParameterReflection* pThis, [NativeTypeName("D3D12_PARAMETER_DESC *")] [Out] D3D12_PARAMETER_DESC* pDesc);

        [return: NativeTypeName("HRESULT")]
        public int GetDesc([NativeTypeName("D3D12_PARAMETER_DESC *")] [Out] D3D12_PARAMETER_DESC* pDesc)
        {
            fixed (ID3D12FunctionParameterReflection* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[0]))(pThis, pDesc);
            }
        }
    }

    public enum D3D12_VIDEO_FIELD_TYPE
    {
        D3D12_VIDEO_FIELD_TYPE_NONE = 0,
        D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST = 1,
        D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST = 2,
    }

    public enum D3D12_VIDEO_FRAME_STEREO_FORMAT
    {
        D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE = 0,
        D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO = 1,
        D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL = 2,
        D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL = 3,
        D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE = 4,
    }

    public partial struct D3D12_VIDEO_FORMAT
    {
        public DXGI_FORMAT Format;

        public DXGI_COLOR_SPACE_TYPE ColorSpace;
    }

    public partial struct D3D12_VIDEO_SAMPLE
    {
        [NativeTypeName("UINT")]
        public uint Width;

        [NativeTypeName("UINT")]
        public uint Height;

        public D3D12_VIDEO_FORMAT Format;
    }

    public enum D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE
    {
        D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE = 0,
        D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED = 1,
    }

    public enum D3D12_FEATURE_VIDEO
    {
        D3D12_FEATURE_VIDEO_DECODE_SUPPORT = 0,
        D3D12_FEATURE_VIDEO_DECODE_PROFILES = 1,
        D3D12_FEATURE_VIDEO_DECODE_FORMATS = 2,
        D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT = 3,
        D3D12_FEATURE_VIDEO_PROCESS_SUPPORT = 5,
        D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS = 6,
        D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO = 7,
        D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE = 8,
        D3D12_FEATURE_VIDEO_PROCESSOR_SIZE = 9,
        D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT = 10,
        D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT = 11,
        D3D12_FEATURE_VIDEO_ARCHITECTURE = 17,
        D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM = 18,
        D3D12_FEATURE_VIDEO_FEATURE_AREA_SUPPORT = 19,
        D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR = 20,
        D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE = 21,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT = 22,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS = 23,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT = 24,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS = 25,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT = 26,
        D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE = 27,
        D3D12_FEATURE_VIDEO_DECODE_PROTECTED_RESOURCES = 28,
        D3D12_FEATURE_VIDEO_PROCESS_PROTECTED_RESOURCES = 29,
        D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES = 30,
        D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE1 = 31,
        D3D12_FEATURE_VIDEO_PROCESSOR_SIZE1 = 32,
    }

    public enum D3D12_BITSTREAM_ENCRYPTION_TYPE
    {
        D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE = 0,
    }

    public partial struct D3D12_VIDEO_DECODE_CONFIGURATION
    {
        [NativeTypeName("GUID")]
        public Guid DecodeProfile;

        public D3D12_BITSTREAM_ENCRYPTION_TYPE BitstreamEncryption;

        public D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE InterlaceType;
    }

    public partial struct D3D12_VIDEO_DECODER_DESC
    {
        [NativeTypeName("UINT")]
        public uint NodeMask;

        public D3D12_VIDEO_DECODE_CONFIGURATION Configuration;
    }

    public partial struct D3D12_VIDEO_DECODER_HEAP_DESC
    {
        [NativeTypeName("UINT")]
        public uint NodeMask;

        public D3D12_VIDEO_DECODE_CONFIGURATION Configuration;

        [NativeTypeName("UINT")]
        public uint DecodeWidth;

        [NativeTypeName("UINT")]
        public uint DecodeHeight;

        public DXGI_FORMAT Format;

        public DXGI_RATIONAL FrameRate;

        [NativeTypeName("UINT")]
        public uint BitRate;

        [NativeTypeName("UINT")]
        public uint MaxDecodePictureBufferCount;
    }

    public partial struct D3D12_VIDEO_SIZE_RANGE
    {
        [NativeTypeName("UINT")]
        public uint MaxWidth;

        [NativeTypeName("UINT")]
        public uint MaxHeight;

        [NativeTypeName("UINT")]
        public uint MinWidth;

        [NativeTypeName("UINT")]
        public uint MinHeight;
    }

    public enum D3D12_VIDEO_PROCESS_FILTER
    {
        D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS = 0,
        D3D12_VIDEO_PROCESS_FILTER_CONTRAST = 1,
        D3D12_VIDEO_PROCESS_FILTER_HUE = 2,
        D3D12_VIDEO_PROCESS_FILTER_SATURATION = 3,
        D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION = 4,
        D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT = 5,
        D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING = 6,
        D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT = 7,
    }

    public enum D3D12_VIDEO_PROCESS_FILTER_FLAGS
    {
        D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE = 0,
        D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS = (1 << D3D12_VIDEO_PROCESS_FILTER_BRIGHTNESS),
        D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST = (1 << D3D12_VIDEO_PROCESS_FILTER_CONTRAST),
        D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE = (1 << D3D12_VIDEO_PROCESS_FILTER_HUE),
        D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION = (1 << D3D12_VIDEO_PROCESS_FILTER_SATURATION),
        D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION = (1 << D3D12_VIDEO_PROCESS_FILTER_NOISE_REDUCTION),
        D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT = (1 << D3D12_VIDEO_PROCESS_FILTER_EDGE_ENHANCEMENT),
        D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING = (1 << D3D12_VIDEO_PROCESS_FILTER_ANAMORPHIC_SCALING),
        D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT = (1 << D3D12_VIDEO_PROCESS_FILTER_STEREO_ADJUSTMENT),
    }

    public enum D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS
    {
        D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE = 0,
        D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB = 0x1,
        D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM = unchecked((int)(0x80000000)),
    }

    public partial struct D3D12_VIDEO_PROCESS_ALPHA_BLENDING
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Enable;

        [NativeTypeName("FLOAT")]
        public float Alpha;
    }

    public partial struct D3D12_VIDEO_PROCESS_LUMA_KEY
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Enable;

        [NativeTypeName("FLOAT")]
        public float Lower;

        [NativeTypeName("FLOAT")]
        public float Upper;
    }

    public partial struct D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC
    {
        public DXGI_FORMAT Format;

        public DXGI_COLOR_SPACE_TYPE ColorSpace;

        public DXGI_RATIONAL SourceAspectRatio;

        public DXGI_RATIONAL DestinationAspectRatio;

        public DXGI_RATIONAL FrameRate;

        public D3D12_VIDEO_SIZE_RANGE SourceSizeRange;

        public D3D12_VIDEO_SIZE_RANGE DestinationSizeRange;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int EnableOrientation;

        public D3D12_VIDEO_PROCESS_FILTER_FLAGS FilterFlags;

        public D3D12_VIDEO_FRAME_STEREO_FORMAT StereoFormat;

        public D3D12_VIDEO_FIELD_TYPE FieldType;

        public D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS DeinterlaceMode;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int EnableAlphaBlending;

        public D3D12_VIDEO_PROCESS_LUMA_KEY LumaKey;

        [NativeTypeName("UINT")]
        public uint NumPastFrames;

        [NativeTypeName("UINT")]
        public uint NumFutureFrames;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int EnableAutoProcessing;
    }

    public enum D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE
    {
        D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE = 0,
        D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND = 1,
        D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION = 2,
        D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM = 3,
    }

    public unsafe partial struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC
    {
        public DXGI_FORMAT Format;

        public DXGI_COLOR_SPACE_TYPE ColorSpace;

        public D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE AlphaFillMode;

        [NativeTypeName("UINT")]
        public uint AlphaFillModeSourceStreamIndex;

        [NativeTypeName("FLOAT [4]")]
        public fixed float BackgroundColor[4];

        public DXGI_RATIONAL FrameRate;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int EnableStereo;
    }

    [Guid("0946B7C9-EBF6-4047-BB73-8683E27DBB1F")]
    [NativeTypeName("struct ID3D12VideoDecoderHeap : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12VideoDecoderHeap
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoDecoderHeap* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoDecoderHeap* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoDecoderHeap* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoDecoderHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoDecoderHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoDecoderHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoDecoderHeap* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoDecoderHeap* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_VIDEO_DECODER_HEAP_DESC* _GetDesc(ID3D12VideoDecoderHeap* pThis, D3D12_VIDEO_DECODER_HEAP_DESC* _result);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoDecoderHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoDecoderHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoDecoderHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoDecoderHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoDecoderHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoDecoderHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoDecoderHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoDecoderHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public D3D12_VIDEO_DECODER_HEAP_DESC GetDesc()
        {
            fixed (ID3D12VideoDecoderHeap* pThis = &this)
            {
                D3D12_VIDEO_DECODER_HEAP_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[8]))(pThis, &result);
            }
        }
    }

    [Guid("1F052807-0B46-4ACC-8A89-364F793718A4")]
    [NativeTypeName("struct ID3D12VideoDevice : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D12VideoDevice
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoDevice* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoDevice* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoDevice* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12VideoDevice* pThis, D3D12_FEATURE_VIDEO FeatureVideo, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoDecoder(ID3D12VideoDevice* pThis, [NativeTypeName("const D3D12_VIDEO_DECODER_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoder);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoDecoderHeap(ID3D12VideoDevice* pThis, [NativeTypeName("const D3D12_VIDEO_DECODER_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_HEAP_DESC* pVideoDecoderHeapDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoderHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoProcessor(ID3D12VideoDevice* pThis, [NativeTypeName("UINT")] uint NodeMask, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc, [NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoProcessor);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE_VIDEO FeatureVideo, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12VideoDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[3]))(pThis, FeatureVideo, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoDecoder([NativeTypeName("const D3D12_VIDEO_DECODER_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoder)
        {
            fixed (ID3D12VideoDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoDecoder>((IntPtr)(lpVtbl[4]))(pThis, pDesc, riid, ppVideoDecoder);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoDecoderHeap([NativeTypeName("const D3D12_VIDEO_DECODER_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_HEAP_DESC* pVideoDecoderHeapDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoderHeap)
        {
            fixed (ID3D12VideoDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoDecoderHeap>((IntPtr)(lpVtbl[5]))(pThis, pVideoDecoderHeapDesc, riid, ppVideoDecoderHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoProcessor([NativeTypeName("UINT")] uint NodeMask, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc, [NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoProcessor)
        {
            fixed (ID3D12VideoDevice* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoProcessor>((IntPtr)(lpVtbl[6]))(pThis, NodeMask, pOutputStreamDesc, NumInputStreamDescs, pInputStreamDescs, riid, ppVideoProcessor);
            }
        }
    }

    [Guid("C59B6BDC-7720-4074-A136-17A156037470")]
    [NativeTypeName("struct ID3D12VideoDecoder : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12VideoDecoder
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoDecoder* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoDecoder* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoDecoder* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoDecoder* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoDecoder* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoDecoder* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoDecoder* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoDecoder* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_VIDEO_DECODER_DESC* _GetDesc(ID3D12VideoDecoder* pThis, D3D12_VIDEO_DECODER_DESC* _result);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoDecoder* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoDecoder* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoDecoder* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoDecoder* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoDecoder* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoDecoder* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoDecoder* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoDecoder* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public D3D12_VIDEO_DECODER_DESC GetDesc()
        {
            fixed (ID3D12VideoDecoder* pThis = &this)
            {
                D3D12_VIDEO_DECODER_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[8]))(pThis, &result);
            }
        }
    }

    public enum D3D12_VIDEO_DECODE_TIER
    {
        D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED = 0,
        D3D12_VIDEO_DECODE_TIER_1 = 1,
        D3D12_VIDEO_DECODE_TIER_2 = 2,
        D3D12_VIDEO_DECODE_TIER_3 = 3,
    }

    public enum D3D12_VIDEO_DECODE_SUPPORT_FLAGS
    {
        D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE = 0,
        D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED = 0x1,
    }

    public enum D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS
    {
        D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE = 0,
        D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED = 0x1,
        D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED = 0x2,
        D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED = 0x4,
        D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME = 0x8,
    }

    public enum D3D12_VIDEO_DECODE_STATUS
    {
        D3D12_VIDEO_DECODE_STATUS_OK = 0,
        D3D12_VIDEO_DECODE_STATUS_CONTINUE = 1,
        D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY = 2,
        D3D12_VIDEO_DECODE_STATUS_RESTART = 3,
        D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED = 4,
    }

    public enum D3D12_VIDEO_DECODE_ARGUMENT_TYPE
    {
        D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS = 0,
        D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX = 1,
        D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL = 2,
        D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID = 3,
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public D3D12_VIDEO_DECODE_CONFIGURATION Configuration;

        [NativeTypeName("UINT")]
        public uint Width;

        [NativeTypeName("UINT")]
        public uint Height;

        public DXGI_FORMAT DecodeFormat;

        public DXGI_RATIONAL FrameRate;

        [NativeTypeName("UINT")]
        public uint BitRate;

        public D3D12_VIDEO_DECODE_SUPPORT_FLAGS SupportFlags;

        public D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS ConfigurationFlags;

        public D3D12_VIDEO_DECODE_TIER DecodeTier;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILE_COUNT
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("UINT")]
        public uint ProfileCount;
    }

    public unsafe partial struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("UINT")]
        public uint ProfileCount;

        [NativeTypeName("GUID *")]
        public Guid* pProfiles;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_DECODE_FORMAT_COUNT
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public D3D12_VIDEO_DECODE_CONFIGURATION Configuration;

        [NativeTypeName("UINT")]
        public uint FormatCount;
    }

    public unsafe partial struct D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public D3D12_VIDEO_DECODE_CONFIGURATION Configuration;

        [NativeTypeName("UINT")]
        public uint FormatCount;

        [NativeTypeName("DXGI_FORMAT *")]
        public DXGI_FORMAT* pOutputFormats;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_ARCHITECTURE
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int IOCoherent;
    }

    public enum D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT
    {
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y = 0,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U = 1,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V = 2,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R = 0,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G = 1,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B = 2,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A = 3,
    }

    public enum D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS
    {
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE = 0,
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y = (1 << D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y),
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U = (1 << D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U),
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V = (1 << D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V),
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R = (1 << D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R),
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G = (1 << D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G),
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B = (1 << D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B),
        D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A = (1 << D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A),
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("GUID")]
        public Guid DecodeProfile;

        [NativeTypeName("UINT")]
        public uint Width;

        [NativeTypeName("UINT")]
        public uint Height;

        public DXGI_FORMAT DecodeFormat;

        public D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS Components;

        [NativeTypeName("UINT")]
        public uint BinCount;

        [NativeTypeName("UINT")]
        public uint CounterBitDepth;
    }

    public enum D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS
    {
        D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE = 0,
        D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED = 0x1,
    }

    public enum D3D12_VIDEO_SCALE_SUPPORT_FLAGS
    {
        D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE = 0,
        D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY = 0x1,
        D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY = 0x2,
    }

    public partial struct D3D12_VIDEO_SCALE_SUPPORT
    {
        public D3D12_VIDEO_SIZE_RANGE OutputSizeRange;

        public D3D12_VIDEO_SCALE_SUPPORT_FLAGS Flags;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public D3D12_VIDEO_DECODE_CONFIGURATION Configuration;

        public D3D12_VIDEO_SAMPLE DecodeSample;

        public D3D12_VIDEO_FORMAT OutputFormat;

        public DXGI_RATIONAL FrameRate;

        [NativeTypeName("UINT")]
        public uint BitRate;

        public D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS SupportFlags;

        public D3D12_VIDEO_SCALE_SUPPORT ScaleSupport;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE
    {
        public D3D12_VIDEO_DECODER_HEAP_DESC VideoDecoderHeapDesc;

        [NativeTypeName("UINT64")]
        public ulong MemoryPoolL0Size;

        [NativeTypeName("UINT64")]
        public ulong MemoryPoolL1Size;
    }

    public unsafe partial struct D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE
    {
        [NativeTypeName("UINT")]
        public uint NodeMask;

        [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC *")]
        [Const]
        public D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc;

        [NativeTypeName("UINT")]
        public uint NumInputStreamDescs;

        [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")]
        [Const]
        public D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs;

        [NativeTypeName("UINT64")]
        public ulong MemoryPoolL0Size;

        [NativeTypeName("UINT64")]
        public ulong MemoryPoolL1Size;
    }

    public partial struct D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS
    {
        [NativeTypeName("UINT64")]
        public ulong Status;

        [NativeTypeName("UINT64")]
        public ulong NumMacroblocksAffected;

        public DXGI_RATIONAL FrameRate;

        [NativeTypeName("UINT")]
        public uint BitRate;
    }

    public unsafe partial struct D3D12_VIDEO_DECODE_FRAME_ARGUMENT
    {
        public D3D12_VIDEO_DECODE_ARGUMENT_TYPE Type;

        [NativeTypeName("UINT")]
        public uint Size;

        [NativeTypeName("void *")]
        public void* pData;
    }

    public unsafe partial struct D3D12_VIDEO_DECODE_REFERENCE_FRAMES
    {
        [NativeTypeName("UINT")]
        public uint NumTexture2Ds;

        [NativeTypeName("ID3D12Resource **")]
        public ID3D12Resource** ppTexture2Ds;

        [NativeTypeName("UINT *")]
        public uint* pSubresources;

        [NativeTypeName("ID3D12VideoDecoderHeap **")]
        public ID3D12VideoDecoderHeap** ppHeaps;
    }

    public unsafe partial struct D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pBuffer;

        [NativeTypeName("UINT64")]
        public ulong Offset;

        [NativeTypeName("UINT64")]
        public ulong Size;
    }

    public unsafe partial struct D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Enable;

        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pReferenceTexture2D;

        [NativeTypeName("UINT")]
        public uint ReferenceSubresource;

        public DXGI_COLOR_SPACE_TYPE OutputColorSpace;

        public DXGI_COLOR_SPACE_TYPE DecodeColorSpace;
    }

    public unsafe partial struct D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS
    {
        [NativeTypeName("UINT")]
        public uint NumFrameArguments;

        [NativeTypeName("D3D12_VIDEO_DECODE_FRAME_ARGUMENT [10]")]
        public _FrameArguments_e__FixedBuffer FrameArguments;

        public D3D12_VIDEO_DECODE_REFERENCE_FRAMES ReferenceFrames;

        public D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM CompressedBitstream;

        [NativeTypeName("ID3D12VideoDecoderHeap *")]
        public ID3D12VideoDecoderHeap* pHeap;

        public partial struct _FrameArguments_e__FixedBuffer
        {
            public D3D12_VIDEO_DECODE_FRAME_ARGUMENT e0;
            public D3D12_VIDEO_DECODE_FRAME_ARGUMENT e1;
            public D3D12_VIDEO_DECODE_FRAME_ARGUMENT e2;
            public D3D12_VIDEO_DECODE_FRAME_ARGUMENT e3;
            public D3D12_VIDEO_DECODE_FRAME_ARGUMENT e4;
            public D3D12_VIDEO_DECODE_FRAME_ARGUMENT e5;
            public D3D12_VIDEO_DECODE_FRAME_ARGUMENT e6;
            public D3D12_VIDEO_DECODE_FRAME_ARGUMENT e7;
            public D3D12_VIDEO_DECODE_FRAME_ARGUMENT e8;
            public D3D12_VIDEO_DECODE_FRAME_ARGUMENT e9;

            public unsafe ref D3D12_VIDEO_DECODE_FRAME_ARGUMENT this[int index]
            {
                get
                {
                    fixed (D3D12_VIDEO_DECODE_FRAME_ARGUMENT* pThis = &e0)
                    {
                        return ref pThis[index];
                    }
                }
            }
        }
    }

    public unsafe partial struct D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pOutputTexture2D;

        [NativeTypeName("UINT")]
        public uint OutputSubresource;

        public D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS ConversionArguments;
    }

    [Guid("304FDB32-BEDE-410A-8545-943AC6A46138")]
    [NativeTypeName("struct ID3D12VideoProcessor : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12VideoProcessor
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoProcessor* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoProcessor* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoProcessor* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoProcessor* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoProcessor* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoProcessor* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoProcessor* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoProcessor* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNodeMask(ID3D12VideoProcessor* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNumInputStreamDescs(ID3D12VideoProcessor* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetInputStreamDescs(ID3D12VideoProcessor* pThis, [NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* _GetOutputStreamDesc(ID3D12VideoProcessor* pThis, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* _result);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNodeMask()
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNodeMask>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNumInputStreamDescs()
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNumInputStreamDescs>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetInputStreamDescs([NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs)
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetInputStreamDescs>((IntPtr)(lpVtbl[10]))(pThis, NumInputStreamDescs, pInputStreamDescs);
            }
        }

        public D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC GetOutputStreamDesc()
        {
            fixed (ID3D12VideoProcessor* pThis = &this)
            {
                D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetOutputStreamDesc>((IntPtr)(lpVtbl[11]))(pThis, &result);
            }
        }
    }

    public enum D3D12_VIDEO_PROCESS_FEATURE_FLAGS
    {
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE = 0,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL = 0x1,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY = 0x2,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO = 0x4,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION = 0x8,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP = 0x10,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING = 0x20,
        D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO = 0x40,
    }

    public enum D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS
    {
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE = 0,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE = 0x1,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING = 0x2,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT = 0x4,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION = 0x8,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING = 0x10,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION = 0x20,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION = 0x40,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING = 0x80,
        D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM = unchecked((int)(0x80000000)),
    }

    public enum D3D12_VIDEO_PROCESS_ORIENTATION
    {
        D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT = 0,
        D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL = 1,
        D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90 = 2,
        D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL = 3,
        D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180 = 4,
        D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL = 5,
        D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270 = 6,
        D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL = 7,
    }

    public enum D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS
    {
        D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE = 0,
        D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY = 0x1,
        D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT = 0x2,
    }

    public partial struct D3D12_VIDEO_PROCESS_FILTER_RANGE
    {
        [NativeTypeName("INT")]
        public int Minimum;

        [NativeTypeName("INT")]
        public int Maximum;

        [NativeTypeName("INT")]
        public int Default;

        [NativeTypeName("FLOAT")]
        public float Multiplier;
    }

    public enum D3D12_VIDEO_PROCESS_SUPPORT_FLAGS
    {
        D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE = 0,
        D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED = 0x1,
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public D3D12_VIDEO_SAMPLE InputSample;

        public D3D12_VIDEO_FIELD_TYPE InputFieldType;

        public D3D12_VIDEO_FRAME_STEREO_FORMAT InputStereoFormat;

        public DXGI_RATIONAL InputFrameRate;

        public D3D12_VIDEO_FORMAT OutputFormat;

        public D3D12_VIDEO_FRAME_STEREO_FORMAT OutputStereoFormat;

        public DXGI_RATIONAL OutputFrameRate;

        public D3D12_VIDEO_PROCESS_SUPPORT_FLAGS SupportFlags;

        public D3D12_VIDEO_SCALE_SUPPORT ScaleSupport;

        public D3D12_VIDEO_PROCESS_FEATURE_FLAGS FeatureSupport;

        public D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS DeinterlaceSupport;

        public D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS AutoProcessingSupport;

        public D3D12_VIDEO_PROCESS_FILTER_FLAGS FilterSupport;

        [NativeTypeName("D3D12_VIDEO_PROCESS_FILTER_RANGE [32]")]
        public _FilterRangeSupport_e__FixedBuffer FilterRangeSupport;

        public partial struct _FilterRangeSupport_e__FixedBuffer
        {
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e0;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e1;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e2;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e3;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e4;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e5;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e6;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e7;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e8;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e9;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e10;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e11;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e12;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e13;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e14;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e15;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e16;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e17;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e18;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e19;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e20;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e21;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e22;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e23;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e24;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e25;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e26;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e27;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e28;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e29;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e30;
            public D3D12_VIDEO_PROCESS_FILTER_RANGE e31;

            public unsafe ref D3D12_VIDEO_PROCESS_FILTER_RANGE this[int index]
            {
                get
                {
                    fixed (D3D12_VIDEO_PROCESS_FILTER_RANGE* pThis = &e0)
                    {
                        return ref pThis[index];
                    }
                }
            }
        }
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("UINT")]
        public uint MaxInputStreams;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS DeinterlaceMode;

        public D3D12_VIDEO_PROCESS_FILTER_FLAGS Filters;

        public D3D12_VIDEO_PROCESS_FEATURE_FLAGS FeatureSupport;

        public DXGI_RATIONAL InputFrameRate;

        public DXGI_RATIONAL OutputFrameRate;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int EnableAutoProcessing;

        [NativeTypeName("UINT")]
        public uint PastFrames;

        [NativeTypeName("UINT")]
        public uint FutureFrames;
    }

    public unsafe partial struct D3D12_VIDEO_PROCESS_REFERENCE_SET
    {
        [NativeTypeName("UINT")]
        public uint NumPastFrames;

        [NativeTypeName("ID3D12Resource **")]
        public ID3D12Resource** ppPastFrames;

        [NativeTypeName("UINT *")]
        public uint* pPastSubresources;

        [NativeTypeName("UINT")]
        public uint NumFutureFrames;

        [NativeTypeName("ID3D12Resource **")]
        public ID3D12Resource** ppFutureFrames;

        [NativeTypeName("UINT *")]
        public uint* pFutureSubresources;
    }

    public partial struct D3D12_VIDEO_PROCESS_TRANSFORM
    {
        [NativeTypeName("D3D12_RECT")]
        public RECT SourceRectangle;

        [NativeTypeName("D3D12_RECT")]
        public RECT DestinationRectangle;

        public D3D12_VIDEO_PROCESS_ORIENTATION Orientation;
    }

    public partial struct D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE
    {
        [NativeTypeName("UINT")]
        public uint OutputIndex;

        [NativeTypeName("UINT")]
        public uint InputFrameOrField;
    }

    public unsafe partial struct D3D12_VIDEO_PROCESS_INPUT_STREAM
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pTexture2D;

        [NativeTypeName("UINT")]
        public uint Subresource;

        public D3D12_VIDEO_PROCESS_REFERENCE_SET ReferenceSet;
    }

    public unsafe partial struct D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS
    {
        [NativeTypeName("D3D12_VIDEO_PROCESS_INPUT_STREAM [2]")]
        public _InputStream_e__FixedBuffer InputStream;

        public D3D12_VIDEO_PROCESS_TRANSFORM Transform;

        public D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS Flags;

        public D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE RateInfo;

        [NativeTypeName("INT [32]")]
        public fixed int FilterLevels[32];

        public D3D12_VIDEO_PROCESS_ALPHA_BLENDING AlphaBlending;

        public partial struct _InputStream_e__FixedBuffer
        {
            public D3D12_VIDEO_PROCESS_INPUT_STREAM e0;
            public D3D12_VIDEO_PROCESS_INPUT_STREAM e1;

            public unsafe ref D3D12_VIDEO_PROCESS_INPUT_STREAM this[int index]
            {
                get
                {
                    fixed (D3D12_VIDEO_PROCESS_INPUT_STREAM* pThis = &e0)
                    {
                        return ref pThis[index];
                    }
                }
            }
        }
    }

    public unsafe partial struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pTexture2D;

        [NativeTypeName("UINT")]
        public uint Subresource;
    }

    public partial struct D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS
    {
        [NativeTypeName("D3D12_VIDEO_PROCESS_OUTPUT_STREAM [2]")]
        public _OutputStream_e__FixedBuffer OutputStream;

        [NativeTypeName("D3D12_RECT")]
        public RECT TargetRectangle;

        public partial struct _OutputStream_e__FixedBuffer
        {
            public D3D12_VIDEO_PROCESS_OUTPUT_STREAM e0;
            public D3D12_VIDEO_PROCESS_OUTPUT_STREAM e1;

            public unsafe ref D3D12_VIDEO_PROCESS_OUTPUT_STREAM this[int index]
            {
                get
                {
                    fixed (D3D12_VIDEO_PROCESS_OUTPUT_STREAM* pThis = &e0)
                    {
                        return ref pThis[index];
                    }
                }
            }
        }
    }

    [Guid("3B60536E-AD29-4E64-A269-F853837E5E53")]
    [NativeTypeName("struct ID3D12VideoDecodeCommandList : ID3D12CommandList")]
    [NativeInheritance("ID3D12CommandList")]
    public unsafe partial struct ID3D12VideoDecodeCommandList
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoDecodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoDecodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12VideoDecodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12VideoDecodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12VideoDecodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12VideoDecodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DecodeFrame(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("ID3D12VideoDecoder *")] [In] ID3D12VideoDecoder* pDecoder, [NativeTypeName("const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12VideoDecodeCommandList* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator);
            }
        }

        public void ClearState()
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[12]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[13]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[14]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[15]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[16]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[17]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[18]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[19]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[20]))(pThis);
            }
        }

        public void DecodeFrame([NativeTypeName("ID3D12VideoDecoder *")] [In] ID3D12VideoDecoder* pDecoder, [NativeTypeName("const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS* pInputArguments)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DecodeFrame>((IntPtr)(lpVtbl[21]))(pThis, pDecoder, pOutputArguments, pInputArguments);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12VideoDecodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[22]))(pThis, Count, pParams, pModes);
            }
        }
    }

    [Guid("AEB2543A-167F-4682-ACC8-D159ED4A6209")]
    [NativeTypeName("struct ID3D12VideoProcessCommandList : ID3D12CommandList")]
    [NativeInheritance("ID3D12CommandList")]
    public unsafe partial struct ID3D12VideoProcessCommandList
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoProcessCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoProcessCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12VideoProcessCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12VideoProcessCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12VideoProcessCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12VideoProcessCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ProcessFrames(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("ID3D12VideoProcessor *")] [In] ID3D12VideoProcessor* pVideoProcessor, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("UINT")] uint NumInputStreams, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12VideoProcessCommandList* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator);
            }
        }

        public void ClearState()
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[12]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[13]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[14]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[15]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[16]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[17]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[18]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[19]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[20]))(pThis);
            }
        }

        public void ProcessFrames([NativeTypeName("ID3D12VideoProcessor *")] [In] ID3D12VideoProcessor* pVideoProcessor, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("UINT")] uint NumInputStreams, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS* pInputArguments)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ProcessFrames>((IntPtr)(lpVtbl[21]))(pThis, pVideoProcessor, pOutputArguments, NumInputStreams, pInputArguments);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12VideoProcessCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[22]))(pThis, Count, pParams, pModes);
            }
        }
    }

    public unsafe partial struct D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM
    {
        [NativeTypeName("UINT64")]
        public ulong Offset;

        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pBuffer;
    }

    public unsafe partial struct D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1
    {
        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Enable;

        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pReferenceTexture2D;

        [NativeTypeName("UINT")]
        public uint ReferenceSubresource;

        public DXGI_COLOR_SPACE_TYPE OutputColorSpace;

        public DXGI_COLOR_SPACE_TYPE DecodeColorSpace;

        [NativeTypeName("UINT")]
        public uint OutputWidth;

        [NativeTypeName("UINT")]
        public uint OutputHeight;
    }

    public unsafe partial struct D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pOutputTexture2D;

        [NativeTypeName("UINT")]
        public uint OutputSubresource;

        public D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1 ConversionArguments;

        [NativeTypeName("D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM [4]")]
        public _Histograms_e__FixedBuffer Histograms;

        public partial struct _Histograms_e__FixedBuffer
        {
            public D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM e0;
            public D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM e1;
            public D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM e2;
            public D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM e3;

            public unsafe ref D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM this[int index]
            {
                get
                {
                    fixed (D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM* pThis = &e0)
                    {
                        return ref pThis[index];
                    }
                }
            }
        }
    }

    [Guid("D52F011B-B56E-453C-A05A-A7F311C8F472")]
    [NativeTypeName("struct ID3D12VideoDecodeCommandList1 : ID3D12VideoDecodeCommandList")]
    [NativeInheritance("ID3D12VideoDecodeCommandList")]
    public unsafe partial struct ID3D12VideoDecodeCommandList1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoDecodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoDecodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12VideoDecodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12VideoDecodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12VideoDecodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12VideoDecodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DecodeFrame(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("ID3D12VideoDecoder *")] [In] ID3D12VideoDecoder* pDecoder, [NativeTypeName("const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DecodeFrame1(ID3D12VideoDecodeCommandList1* pThis, [NativeTypeName("ID3D12VideoDecoder *")] [In] ID3D12VideoDecoder* pDecoder, [NativeTypeName("const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 *")] [Const] [In] D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS* pInputArguments);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator);
            }
        }

        public void ClearState()
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[12]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[13]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[14]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[15]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[16]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[17]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[18]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[19]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[20]))(pThis);
            }
        }

        public void DecodeFrame([NativeTypeName("ID3D12VideoDecoder *")] [In] ID3D12VideoDecoder* pDecoder, [NativeTypeName("const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS* pInputArguments)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DecodeFrame>((IntPtr)(lpVtbl[21]))(pThis, pDecoder, pOutputArguments, pInputArguments);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[22]))(pThis, Count, pParams, pModes);
            }
        }

        public void DecodeFrame1([NativeTypeName("ID3D12VideoDecoder *")] [In] ID3D12VideoDecoder* pDecoder, [NativeTypeName("const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 *")] [Const] [In] D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS* pInputArguments)
        {
            fixed (ID3D12VideoDecodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DecodeFrame1>((IntPtr)(lpVtbl[23]))(pThis, pDecoder, pOutputArguments, pInputArguments);
            }
        }
    }

    public unsafe partial struct D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1
    {
        [NativeTypeName("D3D12_VIDEO_PROCESS_INPUT_STREAM [2]")]
        public _InputStream_e__FixedBuffer InputStream;

        public D3D12_VIDEO_PROCESS_TRANSFORM Transform;

        public D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS Flags;

        public D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE RateInfo;

        [NativeTypeName("INT [32]")]
        public fixed int FilterLevels[32];

        public D3D12_VIDEO_PROCESS_ALPHA_BLENDING AlphaBlending;

        public D3D12_VIDEO_FIELD_TYPE FieldType;

        public partial struct _InputStream_e__FixedBuffer
        {
            public D3D12_VIDEO_PROCESS_INPUT_STREAM e0;
            public D3D12_VIDEO_PROCESS_INPUT_STREAM e1;

            public unsafe ref D3D12_VIDEO_PROCESS_INPUT_STREAM this[int index]
            {
                get
                {
                    fixed (D3D12_VIDEO_PROCESS_INPUT_STREAM* pThis = &e0)
                    {
                        return ref pThis[index];
                    }
                }
            }
        }
    }

    [Guid("542C5C4D-7596-434F-8C93-4EFA6766F267")]
    [NativeTypeName("struct ID3D12VideoProcessCommandList1 : ID3D12VideoProcessCommandList")]
    [NativeInheritance("ID3D12VideoProcessCommandList")]
    public unsafe partial struct ID3D12VideoProcessCommandList1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoProcessCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoProcessCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12VideoProcessCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12VideoProcessCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12VideoProcessCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12VideoProcessCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ProcessFrames(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("ID3D12VideoProcessor *")] [In] ID3D12VideoProcessor* pVideoProcessor, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("UINT")] uint NumInputStreams, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ProcessFrames1(ID3D12VideoProcessCommandList1* pThis, [NativeTypeName("ID3D12VideoProcessor *")] [In] ID3D12VideoProcessor* pVideoProcessor, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("UINT")] uint NumInputStreams, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1* pInputArguments);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator);
            }
        }

        public void ClearState()
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[12]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[13]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[14]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[15]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[16]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[17]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[18]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[19]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[20]))(pThis);
            }
        }

        public void ProcessFrames([NativeTypeName("ID3D12VideoProcessor *")] [In] ID3D12VideoProcessor* pVideoProcessor, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("UINT")] uint NumInputStreams, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS* pInputArguments)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ProcessFrames>((IntPtr)(lpVtbl[21]))(pThis, pVideoProcessor, pOutputArguments, NumInputStreams, pInputArguments);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[22]))(pThis, Count, pParams, pModes);
            }
        }

        public void ProcessFrames1([NativeTypeName("ID3D12VideoProcessor *")] [In] ID3D12VideoProcessor* pVideoProcessor, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("UINT")] uint NumInputStreams, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1* pInputArguments)
        {
            fixed (ID3D12VideoProcessCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ProcessFrames1>((IntPtr)(lpVtbl[23]))(pThis, pVideoProcessor, pOutputArguments, NumInputStreams, pInputArguments);
            }
        }
    }

    public enum D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE
    {
        D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8 = 0,
        D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16 = 1,
    }

    public enum D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS
    {
        D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE = 0,
        D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8 = (1 << D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8),
        D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16 = (1 << D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16),
    }

    public enum D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION
    {
        D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL = 0,
    }

    public enum D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS
    {
        D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE = 0,
        D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL = (1 << D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL),
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_FEATURE_AREA_SUPPORT
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int VideoDecodeSupport;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int VideoProcessSupport;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int VideoEncodeSupport;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public DXGI_FORMAT InputFormat;

        public D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS BlockSizeFlags;

        public D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS PrecisionFlags;

        public D3D12_VIDEO_SIZE_RANGE SizeRange;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public DXGI_FORMAT InputFormat;

        public D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE BlockSize;

        public D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION Precision;

        public D3D12_VIDEO_SIZE_RANGE SizeRange;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Protected;

        [NativeTypeName("UINT64")]
        public ulong MotionVectorHeapMemoryPoolL0Size;

        [NativeTypeName("UINT64")]
        public ulong MotionVectorHeapMemoryPoolL1Size;

        [NativeTypeName("UINT64")]
        public ulong MotionEstimatorMemoryPoolL0Size;

        [NativeTypeName("UINT64")]
        public ulong MotionEstimatorMemoryPoolL1Size;
    }

    public partial struct D3D12_VIDEO_MOTION_ESTIMATOR_DESC
    {
        [NativeTypeName("UINT")]
        public uint NodeMask;

        public DXGI_FORMAT InputFormat;

        public D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE BlockSize;

        public D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION Precision;

        public D3D12_VIDEO_SIZE_RANGE SizeRange;
    }

    [Guid("33FDAE0E-098B-428F-87BB-34B695DE08F8")]
    [NativeTypeName("struct ID3D12VideoMotionEstimator : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12VideoMotionEstimator
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoMotionEstimator* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoMotionEstimator* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoMotionEstimator* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoMotionEstimator* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoMotionEstimator* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoMotionEstimator* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoMotionEstimator* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoMotionEstimator* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_VIDEO_MOTION_ESTIMATOR_DESC* _GetDesc(ID3D12VideoMotionEstimator* pThis, D3D12_VIDEO_MOTION_ESTIMATOR_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetProtectedResourceSession(ID3D12VideoMotionEstimator* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoMotionEstimator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoMotionEstimator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoMotionEstimator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoMotionEstimator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoMotionEstimator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoMotionEstimator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoMotionEstimator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoMotionEstimator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public D3D12_VIDEO_MOTION_ESTIMATOR_DESC GetDesc()
        {
            fixed (ID3D12VideoMotionEstimator* pThis = &this)
            {
                D3D12_VIDEO_MOTION_ESTIMATOR_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[8]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetProtectedResourceSession([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession)
        {
            fixed (ID3D12VideoMotionEstimator* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetProtectedResourceSession>((IntPtr)(lpVtbl[9]))(pThis, riid, ppProtectedSession);
            }
        }
    }

    public partial struct D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC
    {
        [NativeTypeName("UINT")]
        public uint NodeMask;

        public DXGI_FORMAT InputFormat;

        public D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE BlockSize;

        public D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION Precision;

        public D3D12_VIDEO_SIZE_RANGE SizeRange;
    }

    [Guid("5BE17987-743A-4061-834B-23D22DAEA505")]
    [NativeTypeName("struct ID3D12VideoMotionVectorHeap : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12VideoMotionVectorHeap
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoMotionVectorHeap* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoMotionVectorHeap* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoMotionVectorHeap* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoMotionVectorHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoMotionVectorHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoMotionVectorHeap* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoMotionVectorHeap* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoMotionVectorHeap* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC* _GetDesc(ID3D12VideoMotionVectorHeap* pThis, D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetProtectedResourceSession(ID3D12VideoMotionVectorHeap* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoMotionVectorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoMotionVectorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoMotionVectorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoMotionVectorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoMotionVectorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoMotionVectorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoMotionVectorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoMotionVectorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC GetDesc()
        {
            fixed (ID3D12VideoMotionVectorHeap* pThis = &this)
            {
                D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[8]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetProtectedResourceSession([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession)
        {
            fixed (ID3D12VideoMotionVectorHeap* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetProtectedResourceSession>((IntPtr)(lpVtbl[9]))(pThis, riid, ppProtectedSession);
            }
        }
    }

    [Guid("981611AD-A144-4C83-9890-F30E26D658AB")]
    [NativeTypeName("struct ID3D12VideoDevice1 : ID3D12VideoDevice")]
    [NativeInheritance("ID3D12VideoDevice")]
    public unsafe partial struct ID3D12VideoDevice1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoDevice1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoDevice1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoDevice1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12VideoDevice1* pThis, D3D12_FEATURE_VIDEO FeatureVideo, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoDecoder(ID3D12VideoDevice1* pThis, [NativeTypeName("const D3D12_VIDEO_DECODER_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoder);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoDecoderHeap(ID3D12VideoDevice1* pThis, [NativeTypeName("const D3D12_VIDEO_DECODER_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_HEAP_DESC* pVideoDecoderHeapDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoderHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoProcessor(ID3D12VideoDevice1* pThis, [NativeTypeName("UINT")] uint NodeMask, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc, [NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoProcessor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoMotionEstimator(ID3D12VideoDevice1* pThis, [NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_DESC *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoMotionEstimator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoMotionVectorHeap(ID3D12VideoDevice1* pThis, [NativeTypeName("const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoMotionVectorHeap);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE_VIDEO FeatureVideo, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12VideoDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[3]))(pThis, FeatureVideo, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoDecoder([NativeTypeName("const D3D12_VIDEO_DECODER_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoder)
        {
            fixed (ID3D12VideoDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoDecoder>((IntPtr)(lpVtbl[4]))(pThis, pDesc, riid, ppVideoDecoder);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoDecoderHeap([NativeTypeName("const D3D12_VIDEO_DECODER_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_HEAP_DESC* pVideoDecoderHeapDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoderHeap)
        {
            fixed (ID3D12VideoDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoDecoderHeap>((IntPtr)(lpVtbl[5]))(pThis, pVideoDecoderHeapDesc, riid, ppVideoDecoderHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoProcessor([NativeTypeName("UINT")] uint NodeMask, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc, [NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoProcessor)
        {
            fixed (ID3D12VideoDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoProcessor>((IntPtr)(lpVtbl[6]))(pThis, NodeMask, pOutputStreamDesc, NumInputStreamDescs, pInputStreamDescs, riid, ppVideoProcessor);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoMotionEstimator([NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_DESC *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoMotionEstimator)
        {
            fixed (ID3D12VideoDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoMotionEstimator>((IntPtr)(lpVtbl[7]))(pThis, pDesc, pProtectedResourceSession, riid, ppVideoMotionEstimator);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoMotionVectorHeap([NativeTypeName("const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoMotionVectorHeap)
        {
            fixed (ID3D12VideoDevice1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoMotionVectorHeap>((IntPtr)(lpVtbl[8]))(pThis, pDesc, pProtectedResourceSession, riid, ppVideoMotionVectorHeap);
            }
        }
    }

    public partial struct D3D12_RESOURCE_COORDINATE
    {
        [NativeTypeName("UINT64")]
        public ulong X;

        [NativeTypeName("UINT")]
        public uint Y;

        [NativeTypeName("UINT")]
        public uint Z;

        [NativeTypeName("UINT")]
        public uint SubresourceIndex;
    }

    public unsafe partial struct D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT
    {
        [NativeTypeName("ID3D12VideoMotionVectorHeap *")]
        public ID3D12VideoMotionVectorHeap* pMotionVectorHeap;
    }

    public unsafe partial struct D3D12_VIDEO_MOTION_ESTIMATOR_INPUT
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pInputTexture2D;

        [NativeTypeName("UINT")]
        public uint InputSubresourceIndex;

        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pReferenceTexture2D;

        [NativeTypeName("UINT")]
        public uint ReferenceSubresourceIndex;

        [NativeTypeName("ID3D12VideoMotionVectorHeap *")]
        public ID3D12VideoMotionVectorHeap* pHintMotionVectorHeap;
    }

    public unsafe partial struct D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT
    {
        [NativeTypeName("ID3D12Resource *")]
        public ID3D12Resource* pMotionVectorTexture2D;

        public D3D12_RESOURCE_COORDINATE MotionVectorCoordinate;
    }

    public unsafe partial struct D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT
    {
        [NativeTypeName("ID3D12VideoMotionVectorHeap *")]
        public ID3D12VideoMotionVectorHeap* pMotionVectorHeap;

        [NativeTypeName("UINT")]
        public uint PixelWidth;

        [NativeTypeName("UINT")]
        public uint PixelHeight;
    }

    [Guid("8455293A-0CBD-4831-9B39-FBDBAB724723")]
    [NativeTypeName("struct ID3D12VideoEncodeCommandList : ID3D12CommandList")]
    [NativeInheritance("ID3D12CommandList")]
    public unsafe partial struct ID3D12VideoEncodeCommandList
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoEncodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoEncodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12VideoEncodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12VideoEncodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12VideoEncodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12VideoEncodeCommandList* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EstimateMotion(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("ID3D12VideoMotionEstimator *")] [In] ID3D12VideoMotionEstimator* pMotionEstimator, [NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_INPUT* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveMotionVectorHeap(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT *")] [Const] D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT* pOutputArguments, [NativeTypeName("const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT *")] [Const] D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetProtectedResourceSession(ID3D12VideoEncodeCommandList* pThis, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator);
            }
        }

        public void ClearState()
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[12]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[13]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[14]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[15]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[16]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[17]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[18]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[19]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[20]))(pThis);
            }
        }

        public void EstimateMotion([NativeTypeName("ID3D12VideoMotionEstimator *")] [In] ID3D12VideoMotionEstimator* pMotionEstimator, [NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_INPUT* pInputArguments)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EstimateMotion>((IntPtr)(lpVtbl[21]))(pThis, pMotionEstimator, pOutputArguments, pInputArguments);
            }
        }

        public void ResolveMotionVectorHeap([NativeTypeName("const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT *")] [Const] D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT* pOutputArguments, [NativeTypeName("const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT *")] [Const] D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT* pInputArguments)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveMotionVectorHeap>((IntPtr)(lpVtbl[22]))(pThis, pOutputArguments, pInputArguments);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[23]))(pThis, Count, pParams, pModes);
            }
        }

        public void SetProtectedResourceSession([NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession)
        {
            fixed (ID3D12VideoEncodeCommandList* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetProtectedResourceSession>((IntPtr)(lpVtbl[24]))(pThis, pProtectedResourceSession);
            }
        }
    }

    public enum D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS
    {
        D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE = 0,
        D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED = 0x1,
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_DECODE_PROTECTED_RESOURCES
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public D3D12_VIDEO_DECODE_CONFIGURATION Configuration;

        public D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS SupportFlags;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_PROCESS_PROTECTED_RESOURCES
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS SupportFlags;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        public D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS SupportFlags;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE1
    {
        public D3D12_VIDEO_DECODER_HEAP_DESC VideoDecoderHeapDesc;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Protected;

        [NativeTypeName("UINT64")]
        public ulong MemoryPoolL0Size;

        [NativeTypeName("UINT64")]
        public ulong MemoryPoolL1Size;
    }

    public unsafe partial struct D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE1
    {
        [NativeTypeName("UINT")]
        public uint NodeMask;

        [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC *")]
        [Const]
        public D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc;

        [NativeTypeName("UINT")]
        public uint NumInputStreamDescs;

        [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")]
        [Const]
        public D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs;

        [NativeTypeName("BOOL")]
        [NativeTypeInfo(UnmanagedType.Bool)]
        public int Protected;

        [NativeTypeName("UINT64")]
        public ulong MemoryPoolL0Size;

        [NativeTypeName("UINT64")]
        public ulong MemoryPoolL1Size;
    }

    public enum D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE
    {
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION = 0,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION = 1,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION = 2,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT = 3,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT = 4,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT = 5,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT = 6,
    }

    public enum D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE
    {
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8 = 0,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16 = 1,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32 = 2,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64 = 3,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8 = 4,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16 = 5,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32 = 6,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64 = 7,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT = 8,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE = 9,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE = 10,
    }

    public enum D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS
    {
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE = 0,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ = 0x1,
        D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE = 0x2,
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("UINT")]
        public uint CommandCount;
    }

    public unsafe partial struct D3D12_VIDEO_EXTENSION_COMMAND_INFO
    {
        [NativeTypeName("GUID")]
        public Guid CommandId;

        [NativeTypeName("LPCWSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)]
        public ushort* Name;

        public D3D12_COMMAND_LIST_SUPPORT_FLAGS CommandListSupportFlags;
    }

    public unsafe partial struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("UINT")]
        public uint CommandCount;

        [NativeTypeName("D3D12_VIDEO_EXTENSION_COMMAND_INFO *")]
        public D3D12_VIDEO_EXTENSION_COMMAND_INFO* pCommandInfos;
    }

    public partial struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT
    {
        [NativeTypeName("GUID")]
        public Guid CommandId;

        public D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE Stage;

        [NativeTypeName("UINT")]
        public uint ParameterCount;

        [NativeTypeName("UINT")]
        public uint ParameterPacking;
    }

    public unsafe partial struct D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO
    {
        [NativeTypeName("LPCWSTR")]
        [Const]
        [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)]
        public ushort* Name;

        public D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE Type;

        public D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS Flags;
    }

    public unsafe partial struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS
    {
        [NativeTypeName("GUID")]
        public Guid CommandId;

        public D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE Stage;

        [NativeTypeName("UINT")]
        public uint ParameterCount;

        [NativeTypeName("D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO *")]
        public D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO* pParameterInfos;
    }

    public unsafe partial struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("GUID")]
        public Guid CommandId;

        [NativeTypeName("const void *")]
        [Const]
        public void* pInputData;

        [NativeTypeName("SIZE_T")]
        public UIntPtr InputDataSizeInBytes;

        [NativeTypeName("void *")]
        public void* pOutputData;

        [NativeTypeName("SIZE_T")]
        public UIntPtr OutputDataSizeInBytes;
    }

    public unsafe partial struct D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE
    {
        [NativeTypeName("UINT")]
        public uint NodeIndex;

        [NativeTypeName("GUID")]
        public Guid CommandId;

        [NativeTypeName("const void *")]
        [Const]
        public void* pCreationParameters;

        [NativeTypeName("SIZE_T")]
        public UIntPtr CreationParametersSizeInBytes;

        [NativeTypeName("UINT64")]
        public ulong MemoryPoolL0Size;

        [NativeTypeName("UINT64")]
        public ulong MemoryPoolL1Size;
    }

    public partial struct D3D12_VIDEO_EXTENSION_COMMAND_DESC
    {
        [NativeTypeName("UINT")]
        public uint NodeMask;

        [NativeTypeName("GUID")]
        public Guid CommandId;
    }

    [Guid("79A2E5FB-CCD2-469A-9FDE-195D10951F7E")]
    [NativeTypeName("struct ID3D12VideoDecoder1 : ID3D12VideoDecoder")]
    [NativeInheritance("ID3D12VideoDecoder")]
    public unsafe partial struct ID3D12VideoDecoder1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoDecoder1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoDecoder1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoDecoder1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoDecoder1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoDecoder1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoDecoder1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoDecoder1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoDecoder1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_VIDEO_DECODER_DESC* _GetDesc(ID3D12VideoDecoder1* pThis, D3D12_VIDEO_DECODER_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetProtectedResourceSession(ID3D12VideoDecoder1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoDecoder1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoDecoder1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoDecoder1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoDecoder1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoDecoder1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoDecoder1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoDecoder1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoDecoder1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public D3D12_VIDEO_DECODER_DESC GetDesc()
        {
            fixed (ID3D12VideoDecoder1* pThis = &this)
            {
                D3D12_VIDEO_DECODER_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[8]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetProtectedResourceSession([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession)
        {
            fixed (ID3D12VideoDecoder1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetProtectedResourceSession>((IntPtr)(lpVtbl[9]))(pThis, riid, ppProtectedSession);
            }
        }
    }

    [Guid("DA1D98C5-539F-41B2-BF6B-1198A03B6D26")]
    [NativeTypeName("struct ID3D12VideoDecoderHeap1 : ID3D12VideoDecoderHeap")]
    [NativeInheritance("ID3D12VideoDecoderHeap")]
    public unsafe partial struct ID3D12VideoDecoderHeap1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoDecoderHeap1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoDecoderHeap1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoDecoderHeap1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoDecoderHeap1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoDecoderHeap1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoDecoderHeap1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoDecoderHeap1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoDecoderHeap1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_VIDEO_DECODER_HEAP_DESC* _GetDesc(ID3D12VideoDecoderHeap1* pThis, D3D12_VIDEO_DECODER_HEAP_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetProtectedResourceSession(ID3D12VideoDecoderHeap1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoDecoderHeap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoDecoderHeap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoDecoderHeap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoDecoderHeap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoDecoderHeap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoDecoderHeap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoDecoderHeap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoDecoderHeap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public D3D12_VIDEO_DECODER_HEAP_DESC GetDesc()
        {
            fixed (ID3D12VideoDecoderHeap1* pThis = &this)
            {
                D3D12_VIDEO_DECODER_HEAP_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[8]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetProtectedResourceSession([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession)
        {
            fixed (ID3D12VideoDecoderHeap1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetProtectedResourceSession>((IntPtr)(lpVtbl[9]))(pThis, riid, ppProtectedSession);
            }
        }
    }

    [Guid("F3CFE615-553F-425C-86D8-EE8C1B1FB01C")]
    [NativeTypeName("struct ID3D12VideoProcessor1 : ID3D12VideoProcessor")]
    [NativeInheritance("ID3D12VideoProcessor")]
    public unsafe partial struct ID3D12VideoProcessor1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoProcessor1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoProcessor1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoProcessor1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoProcessor1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoProcessor1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoProcessor1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoProcessor1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoProcessor1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNodeMask(ID3D12VideoProcessor1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("UINT")]
        public delegate uint _GetNumInputStreamDescs(ID3D12VideoProcessor1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetInputStreamDescs(ID3D12VideoProcessor1* pThis, [NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* _GetOutputStreamDesc(ID3D12VideoProcessor1* pThis, D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetProtectedResourceSession(ID3D12VideoProcessor1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNodeMask()
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNodeMask>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("UINT")]
        public uint GetNumInputStreamDescs()
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetNumInputStreamDescs>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetInputStreamDescs([NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][Out] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs)
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetInputStreamDescs>((IntPtr)(lpVtbl[10]))(pThis, NumInputStreamDescs, pInputStreamDescs);
            }
        }

        public D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC GetOutputStreamDesc()
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetOutputStreamDesc>((IntPtr)(lpVtbl[11]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetProtectedResourceSession([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession)
        {
            fixed (ID3D12VideoProcessor1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetProtectedResourceSession>((IntPtr)(lpVtbl[12]))(pThis, riid, ppProtectedSession);
            }
        }
    }

    [Guid("554E41E8-AE8E-4A8C-B7D2-5B4F274A30E4")]
    [NativeTypeName("struct ID3D12VideoExtensionCommand : ID3D12Pageable")]
    [NativeInheritance("ID3D12Pageable")]
    public unsafe partial struct ID3D12VideoExtensionCommand
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoExtensionCommand* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoExtensionCommand* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoExtensionCommand* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoExtensionCommand* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoExtensionCommand* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoExtensionCommand* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoExtensionCommand* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoExtensionCommand* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_VIDEO_EXTENSION_COMMAND_DESC* _GetDesc(ID3D12VideoExtensionCommand* pThis, D3D12_VIDEO_EXTENSION_COMMAND_DESC* _result);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetProtectedResourceSession(ID3D12VideoExtensionCommand* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoExtensionCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoExtensionCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoExtensionCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoExtensionCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoExtensionCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoExtensionCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoExtensionCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoExtensionCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public D3D12_VIDEO_EXTENSION_COMMAND_DESC GetDesc()
        {
            fixed (ID3D12VideoExtensionCommand* pThis = &this)
            {
                D3D12_VIDEO_EXTENSION_COMMAND_DESC result;
                return *Marshal.GetDelegateForFunctionPointer<_GetDesc>((IntPtr)(lpVtbl[8]))(pThis, &result);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetProtectedResourceSession([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppProtectedSession)
        {
            fixed (ID3D12VideoExtensionCommand* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetProtectedResourceSession>((IntPtr)(lpVtbl[9]))(pThis, riid, ppProtectedSession);
            }
        }
    }

    [Guid("F019AC49-F838-4A95-9B17-579437C8F513")]
    [NativeTypeName("struct ID3D12VideoDevice2 : ID3D12VideoDevice1")]
    [NativeInheritance("ID3D12VideoDevice1")]
    public unsafe partial struct ID3D12VideoDevice2
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoDevice2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoDevice2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoDevice2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CheckFeatureSupport(ID3D12VideoDevice2* pThis, D3D12_FEATURE_VIDEO FeatureVideo, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoDecoder(ID3D12VideoDevice2* pThis, [NativeTypeName("const D3D12_VIDEO_DECODER_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoder);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoDecoderHeap(ID3D12VideoDevice2* pThis, [NativeTypeName("const D3D12_VIDEO_DECODER_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_HEAP_DESC* pVideoDecoderHeapDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoderHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoProcessor(ID3D12VideoDevice2* pThis, [NativeTypeName("UINT")] uint NodeMask, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc, [NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoProcessor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoMotionEstimator(ID3D12VideoDevice2* pThis, [NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_DESC *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoMotionEstimator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoMotionVectorHeap(ID3D12VideoDevice2* pThis, [NativeTypeName("const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoMotionVectorHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoDecoder1(ID3D12VideoDevice2* pThis, [NativeTypeName("const D3D12_VIDEO_DECODER_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoder);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoDecoderHeap1(ID3D12VideoDevice2* pThis, [NativeTypeName("const D3D12_VIDEO_DECODER_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_HEAP_DESC* pVideoDecoderHeapDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoderHeap);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoProcessor1(ID3D12VideoDevice2* pThis, [NativeTypeName("UINT")] uint NodeMask, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc, [NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoProcessor);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateVideoExtensionCommand(ID3D12VideoDevice2* pThis, [NativeTypeName("const D3D12_VIDEO_EXTENSION_COMMAND_DESC *")] [Const] [In] D3D12_VIDEO_EXTENSION_COMMAND_DESC* pDesc, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pCreationParameters, [NativeTypeName("SIZE_T")] UIntPtr CreationParametersDataSizeInBytes, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoExtensionCommand);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _ExecuteExtensionCommand(ID3D12VideoDevice2* pThis, [NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pExecutionParameters, [NativeTypeName("SIZE_T")] UIntPtr ExecutionParametersSizeInBytes, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] void* pOutputData, [NativeTypeName("SIZE_T")] UIntPtr OutputDataSizeInBytes);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CheckFeatureSupport(D3D12_FEATURE_VIDEO FeatureVideo, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Out] void* pFeatureSupportData, [NativeTypeName("UINT")] uint FeatureSupportDataSize)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CheckFeatureSupport>((IntPtr)(lpVtbl[3]))(pThis, FeatureVideo, pFeatureSupportData, FeatureSupportDataSize);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoDecoder([NativeTypeName("const D3D12_VIDEO_DECODER_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_DESC* pDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoder)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoDecoder>((IntPtr)(lpVtbl[4]))(pThis, pDesc, riid, ppVideoDecoder);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoDecoderHeap([NativeTypeName("const D3D12_VIDEO_DECODER_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_HEAP_DESC* pVideoDecoderHeapDesc, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoderHeap)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoDecoderHeap>((IntPtr)(lpVtbl[5]))(pThis, pVideoDecoderHeapDesc, riid, ppVideoDecoderHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoProcessor([NativeTypeName("UINT")] uint NodeMask, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc, [NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoProcessor)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoProcessor>((IntPtr)(lpVtbl[6]))(pThis, NodeMask, pOutputStreamDesc, NumInputStreamDescs, pInputStreamDescs, riid, ppVideoProcessor);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoMotionEstimator([NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_DESC *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoMotionEstimator)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoMotionEstimator>((IntPtr)(lpVtbl[7]))(pThis, pDesc, pProtectedResourceSession, riid, ppVideoMotionEstimator);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoMotionVectorHeap([NativeTypeName("const D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoMotionVectorHeap)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoMotionVectorHeap>((IntPtr)(lpVtbl[8]))(pThis, pDesc, pProtectedResourceSession, riid, ppVideoMotionVectorHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoDecoder1([NativeTypeName("const D3D12_VIDEO_DECODER_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_DESC* pDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoder)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoDecoder1>((IntPtr)(lpVtbl[9]))(pThis, pDesc, pProtectedResourceSession, riid, ppVideoDecoder);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoDecoderHeap1([NativeTypeName("const D3D12_VIDEO_DECODER_HEAP_DESC *")] [Const] [In] D3D12_VIDEO_DECODER_HEAP_DESC* pVideoDecoderHeapDesc, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoDecoderHeap)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoDecoderHeap1>((IntPtr)(lpVtbl[10]))(pThis, pVideoDecoderHeapDesc, pProtectedResourceSession, riid, ppVideoDecoderHeap);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoProcessor1([NativeTypeName("UINT")] uint NodeMask, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC* pOutputStreamDesc, [NativeTypeName("UINT")] uint NumInputStreamDescs, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC* pInputStreamDescs, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoProcessor)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoProcessor1>((IntPtr)(lpVtbl[11]))(pThis, NodeMask, pOutputStreamDesc, NumInputStreamDescs, pInputStreamDescs, pProtectedResourceSession, riid, ppVideoProcessor);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateVideoExtensionCommand([NativeTypeName("const D3D12_VIDEO_EXTENSION_COMMAND_DESC *")] [Const] [In] D3D12_VIDEO_EXTENSION_COMMAND_DESC* pDesc, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pCreationParameters, [NativeTypeName("SIZE_T")] UIntPtr CreationParametersDataSizeInBytes, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppVideoExtensionCommand)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateVideoExtensionCommand>((IntPtr)(lpVtbl[12]))(pThis, pDesc, pCreationParameters, CreationParametersDataSizeInBytes, pProtectedResourceSession, riid, ppVideoExtensionCommand);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int ExecuteExtensionCommand([NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pExecutionParameters, [NativeTypeName("SIZE_T")] UIntPtr ExecutionParametersSizeInBytes, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 4)][Out] void* pOutputData, [NativeTypeName("SIZE_T")] UIntPtr OutputDataSizeInBytes)
        {
            fixed (ID3D12VideoDevice2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_ExecuteExtensionCommand>((IntPtr)(lpVtbl[13]))(pThis, pExtensionCommand, pExecutionParameters, ExecutionParametersSizeInBytes, pOutputData, OutputDataSizeInBytes);
            }
        }
    }

    [Guid("6E120880-C114-4153-8036-D247051E1729")]
    [NativeTypeName("struct ID3D12VideoDecodeCommandList2 : ID3D12VideoDecodeCommandList1")]
    [NativeInheritance("ID3D12VideoDecodeCommandList1")]
    public unsafe partial struct ID3D12VideoDecodeCommandList2
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoDecodeCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoDecodeCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12VideoDecodeCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12VideoDecodeCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12VideoDecodeCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12VideoDecodeCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DecodeFrame(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("ID3D12VideoDecoder *")] [In] ID3D12VideoDecoder* pDecoder, [NativeTypeName("const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DecodeFrame1(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("ID3D12VideoDecoder *")] [In] ID3D12VideoDecoder* pDecoder, [NativeTypeName("const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 *")] [Const] [In] D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetProtectedResourceSession(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _InitializeExtensionCommand(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pInitializationParameters, [NativeTypeName("SIZE_T")] UIntPtr InitializationParametersSizeInBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteExtensionCommand(ID3D12VideoDecodeCommandList2* pThis, [NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pExecutionParameters, [NativeTypeName("SIZE_T")] UIntPtr ExecutionParametersSizeInBytes);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator);
            }
        }

        public void ClearState()
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[12]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[13]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[14]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[15]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[16]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[17]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[18]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[19]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[20]))(pThis);
            }
        }

        public void DecodeFrame([NativeTypeName("ID3D12VideoDecoder *")] [In] ID3D12VideoDecoder* pDecoder, [NativeTypeName("const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS* pInputArguments)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DecodeFrame>((IntPtr)(lpVtbl[21]))(pThis, pDecoder, pOutputArguments, pInputArguments);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[22]))(pThis, Count, pParams, pModes);
            }
        }

        public void DecodeFrame1([NativeTypeName("ID3D12VideoDecoder *")] [In] ID3D12VideoDecoder* pDecoder, [NativeTypeName("const D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1 *")] [Const] [In] D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS* pInputArguments)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DecodeFrame1>((IntPtr)(lpVtbl[23]))(pThis, pDecoder, pOutputArguments, pInputArguments);
            }
        }

        public void SetProtectedResourceSession([NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetProtectedResourceSession>((IntPtr)(lpVtbl[24]))(pThis, pProtectedResourceSession);
            }
        }

        public void InitializeExtensionCommand([NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pInitializationParameters, [NativeTypeName("SIZE_T")] UIntPtr InitializationParametersSizeInBytes)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_InitializeExtensionCommand>((IntPtr)(lpVtbl[25]))(pThis, pExtensionCommand, pInitializationParameters, InitializationParametersSizeInBytes);
            }
        }

        public void ExecuteExtensionCommand([NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pExecutionParameters, [NativeTypeName("SIZE_T")] UIntPtr ExecutionParametersSizeInBytes)
        {
            fixed (ID3D12VideoDecodeCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteExtensionCommand>((IntPtr)(lpVtbl[26]))(pThis, pExtensionCommand, pExecutionParameters, ExecutionParametersSizeInBytes);
            }
        }
    }

    [Guid("DB525AE4-6AD6-473C-BAA7-59B2E37082E4")]
    [NativeTypeName("struct ID3D12VideoProcessCommandList2 : ID3D12VideoProcessCommandList1")]
    [NativeInheritance("ID3D12VideoProcessCommandList1")]
    public unsafe partial struct ID3D12VideoProcessCommandList2
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoProcessCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoProcessCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12VideoProcessCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12VideoProcessCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12VideoProcessCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12VideoProcessCommandList2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ProcessFrames(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("ID3D12VideoProcessor *")] [In] ID3D12VideoProcessor* pVideoProcessor, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("UINT")] uint NumInputStreams, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ProcessFrames1(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("ID3D12VideoProcessor *")] [In] ID3D12VideoProcessor* pVideoProcessor, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("UINT")] uint NumInputStreams, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetProtectedResourceSession(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _InitializeExtensionCommand(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pInitializationParameters, [NativeTypeName("SIZE_T")] UIntPtr InitializationParametersSizeInBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteExtensionCommand(ID3D12VideoProcessCommandList2* pThis, [NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pExecutionParameters, [NativeTypeName("SIZE_T")] UIntPtr ExecutionParametersSizeInBytes);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator);
            }
        }

        public void ClearState()
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[12]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[13]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[14]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[15]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[16]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[17]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[18]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[19]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[20]))(pThis);
            }
        }

        public void ProcessFrames([NativeTypeName("ID3D12VideoProcessor *")] [In] ID3D12VideoProcessor* pVideoProcessor, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("UINT")] uint NumInputStreams, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS* pInputArguments)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ProcessFrames>((IntPtr)(lpVtbl[21]))(pThis, pVideoProcessor, pOutputArguments, NumInputStreams, pInputArguments);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[22]))(pThis, Count, pParams, pModes);
            }
        }

        public void ProcessFrames1([NativeTypeName("ID3D12VideoProcessor *")] [In] ID3D12VideoProcessor* pVideoProcessor, [NativeTypeName("const D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS *")] [Const] [In] D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS* pOutputArguments, [NativeTypeName("UINT")] uint NumInputStreams, [NativeTypeName("const D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1 *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1* pInputArguments)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ProcessFrames1>((IntPtr)(lpVtbl[23]))(pThis, pVideoProcessor, pOutputArguments, NumInputStreams, pInputArguments);
            }
        }

        public void SetProtectedResourceSession([NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetProtectedResourceSession>((IntPtr)(lpVtbl[24]))(pThis, pProtectedResourceSession);
            }
        }

        public void InitializeExtensionCommand([NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pInitializationParameters, [NativeTypeName("SIZE_T")] UIntPtr InitializationParametersSizeInBytes)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_InitializeExtensionCommand>((IntPtr)(lpVtbl[25]))(pThis, pExtensionCommand, pInitializationParameters, InitializationParametersSizeInBytes);
            }
        }

        public void ExecuteExtensionCommand([NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pExecutionParameters, [NativeTypeName("SIZE_T")] UIntPtr ExecutionParametersSizeInBytes)
        {
            fixed (ID3D12VideoProcessCommandList2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteExtensionCommand>((IntPtr)(lpVtbl[26]))(pThis, pExtensionCommand, pExecutionParameters, ExecutionParametersSizeInBytes);
            }
        }
    }

    [Guid("94971ECA-2BDB-4769-88CF-3675EA757EBC")]
    [NativeTypeName("struct ID3D12VideoEncodeCommandList1 : ID3D12VideoEncodeCommandList")]
    [NativeInheritance("ID3D12VideoEncodeCommandList")]
    public unsafe partial struct ID3D12VideoEncodeCommandList1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D12VideoEncodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D12VideoEncodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetPrivateData(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateData(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetPrivateDataInterface(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _SetName(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetDevice(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate D3D12_COMMAND_LIST_TYPE _GetType(ID3D12VideoEncodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Close(ID3D12VideoEncodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _Reset(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ClearState(ID3D12VideoEncodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResourceBarrier(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _DiscardResource(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginQuery(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndQuery(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveQueryData(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetPredication(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetMarker(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _BeginEvent(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EndEvent(ID3D12VideoEncodeCommandList1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _EstimateMotion(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("ID3D12VideoMotionEstimator *")] [In] ID3D12VideoMotionEstimator* pMotionEstimator, [NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_INPUT* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ResolveMotionVectorHeap(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT *")] [Const] D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT* pOutputArguments, [NativeTypeName("const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT *")] [Const] D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT* pInputArguments);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _WriteBufferImmediate(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _SetProtectedResourceSession(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _InitializeExtensionCommand(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pInitializationParameters, [NativeTypeName("SIZE_T")] UIntPtr InitializationParametersSizeInBytes);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ExecuteExtensionCommand(ID3D12VideoEncodeCommandList1* pThis, [NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pExecutionParameters, [NativeTypeName("SIZE_T")] UIntPtr ExecutionParametersSizeInBytes);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT *")] [In][Out] uint* pDataSize, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][Out][Optional] void* pData)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetPrivateData>((IntPtr)(lpVtbl[3]))(pThis, guid, pDataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateData([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("UINT")] [In] uint DataSize, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In][Optional] void* pData)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateData>((IntPtr)(lpVtbl[4]))(pThis, guid, DataSize, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetPrivateDataInterface([NativeTypeName("const GUID &")] [Const] [In] Guid* guid, [NativeTypeName("const IUnknown *")] [Const] [In][Optional] IUnknown* pData)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetPrivateDataInterface>((IntPtr)(lpVtbl[5]))(pThis, guid, pData);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int SetName([NativeTypeName("LPCWSTR")] [Const] [NativeTypeInfo(UnmanagedType.LPWStr, IsNullTerminated = true)] [In] ushort* Name)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_SetName>((IntPtr)(lpVtbl[6]))(pThis, Name);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetDevice([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDevice)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetDevice>((IntPtr)(lpVtbl[7]))(pThis, riid, ppvDevice);
            }
        }

        public new D3D12_COMMAND_LIST_TYPE GetType()
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetType>((IntPtr)(lpVtbl[8]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Close()
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Close>((IntPtr)(lpVtbl[9]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int Reset([NativeTypeName("ID3D12CommandAllocator *")] [In] ID3D12CommandAllocator* pAllocator)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Reset>((IntPtr)(lpVtbl[10]))(pThis, pAllocator);
            }
        }

        public void ClearState()
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ClearState>((IntPtr)(lpVtbl[11]))(pThis);
            }
        }

        public void ResourceBarrier([NativeTypeName("UINT")] [In] uint NumBarriers, [NativeTypeName("const D3D12_RESOURCE_BARRIER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_RESOURCE_BARRIER* pBarriers)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResourceBarrier>((IntPtr)(lpVtbl[12]))(pThis, NumBarriers, pBarriers);
            }
        }

        public void DiscardResource([NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pResource, [NativeTypeName("const D3D12_DISCARD_REGION *")] [Const] [In][Optional] D3D12_DISCARD_REGION* pRegion)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_DiscardResource>((IntPtr)(lpVtbl[13]))(pThis, pResource, pRegion);
            }
        }

        public void BeginQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginQuery>((IntPtr)(lpVtbl[14]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void EndQuery([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint Index)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndQuery>((IntPtr)(lpVtbl[15]))(pThis, pQueryHeap, Type, Index);
            }
        }

        public void ResolveQueryData([NativeTypeName("ID3D12QueryHeap *")] [In] ID3D12QueryHeap* pQueryHeap, [In] D3D12_QUERY_TYPE Type, [NativeTypeName("UINT")] [In] uint StartIndex, [NativeTypeName("UINT")] [In] uint NumQueries, [NativeTypeName("ID3D12Resource *")] [In] ID3D12Resource* pDestinationBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedDestinationBufferOffset)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveQueryData>((IntPtr)(lpVtbl[16]))(pThis, pQueryHeap, Type, StartIndex, NumQueries, pDestinationBuffer, AlignedDestinationBufferOffset);
            }
        }

        public void SetPredication([NativeTypeName("ID3D12Resource *")] [In][Optional] ID3D12Resource* pBuffer, [NativeTypeName("UINT64")] [In] ulong AlignedBufferOffset, [In] D3D12_PREDICATION_OP Operation)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetPredication>((IntPtr)(lpVtbl[17]))(pThis, pBuffer, AlignedBufferOffset, Operation);
            }
        }

        public void SetMarker([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetMarker>((IntPtr)(lpVtbl[18]))(pThis, Metadata, pData, Size);
            }
        }

        public void BeginEvent([NativeTypeName("UINT")] uint Metadata, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In][Optional] void* pData, [NativeTypeName("UINT")] uint Size)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_BeginEvent>((IntPtr)(lpVtbl[19]))(pThis, Metadata, pData, Size);
            }
        }

        public void EndEvent()
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EndEvent>((IntPtr)(lpVtbl[20]))(pThis);
            }
        }

        public void EstimateMotion([NativeTypeName("ID3D12VideoMotionEstimator *")] [In] ID3D12VideoMotionEstimator* pMotionEstimator, [NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT* pOutputArguments, [NativeTypeName("const D3D12_VIDEO_MOTION_ESTIMATOR_INPUT *")] [Const] [In] D3D12_VIDEO_MOTION_ESTIMATOR_INPUT* pInputArguments)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_EstimateMotion>((IntPtr)(lpVtbl[21]))(pThis, pMotionEstimator, pOutputArguments, pInputArguments);
            }
        }

        public void ResolveMotionVectorHeap([NativeTypeName("const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT *")] [Const] D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT* pOutputArguments, [NativeTypeName("const D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT *")] [Const] D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT* pInputArguments)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ResolveMotionVectorHeap>((IntPtr)(lpVtbl[22]))(pThis, pOutputArguments, pInputArguments);
            }
        }

        public void WriteBufferImmediate([NativeTypeName("UINT")] uint Count, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_PARAMETER *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] D3D12_WRITEBUFFERIMMEDIATE_PARAMETER* pParams, [NativeTypeName("const D3D12_WRITEBUFFERIMMEDIATE_MODE *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] D3D12_WRITEBUFFERIMMEDIATE_MODE* pModes)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_WriteBufferImmediate>((IntPtr)(lpVtbl[23]))(pThis, Count, pParams, pModes);
            }
        }

        public void SetProtectedResourceSession([NativeTypeName("ID3D12ProtectedResourceSession *")] [In][Optional] ID3D12ProtectedResourceSession* pProtectedResourceSession)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_SetProtectedResourceSession>((IntPtr)(lpVtbl[24]))(pThis, pProtectedResourceSession);
            }
        }

        public void InitializeExtensionCommand([NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pInitializationParameters, [NativeTypeName("SIZE_T")] UIntPtr InitializationParametersSizeInBytes)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_InitializeExtensionCommand>((IntPtr)(lpVtbl[25]))(pThis, pExtensionCommand, pInitializationParameters, InitializationParametersSizeInBytes);
            }
        }

        public void ExecuteExtensionCommand([NativeTypeName("ID3D12VideoExtensionCommand *")] [In] ID3D12VideoExtensionCommand* pExtensionCommand, [NativeTypeName("const void *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 2)][In] void* pExecutionParameters, [NativeTypeName("SIZE_T")] UIntPtr ExecutionParametersSizeInBytes)
        {
            fixed (ID3D12VideoEncodeCommandList1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ExecuteExtensionCommand>((IntPtr)(lpVtbl[26]))(pThis, pExtensionCommand, pExecutionParameters, ExecutionParametersSizeInBytes);
            }
        }
    }

    [UnmanagedFunctionPointer(CallingConvention.Winapi)]
    [return: NativeTypeName("HRESULT")]
    public unsafe delegate int PFN_D3D11ON12_CREATE_DEVICE([NativeTypeName("IUnknown *")] [In] IUnknown* param0, [NativeTypeName("UINT")] uint param1, [NativeTypeName("const D3D_FEATURE_LEVEL *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 3)][In][Optional] D3D_FEATURE_LEVEL* param2, [NativeTypeName("UINT")] uint FeatureLevels, [NativeTypeName("IUnknown *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 5)][In][Optional] IUnknown** param4, [NativeTypeName("UINT")] uint NumQueues, [NativeTypeName("UINT")] uint param6, [NativeTypeName("ID3D11Device **")] [ComOutPtr][Optional] ID3D11Device** param7, [NativeTypeName("ID3D11DeviceContext **")] [ComOutPtr][Optional] ID3D11DeviceContext** param8, [NativeTypeName("D3D_FEATURE_LEVEL *")] [Out][Optional] D3D_FEATURE_LEVEL* param9);

    public partial struct D3D11_RESOURCE_FLAGS
    {
        [NativeTypeName("UINT")]
        public uint BindFlags;

        [NativeTypeName("UINT")]
        public uint MiscFlags;

        [NativeTypeName("UINT")]
        public uint CPUAccessFlags;

        [NativeTypeName("UINT")]
        public uint StructureByteStride;
    }

    [Guid("85611E73-70A9-490E-9614-A9E302777904")]
    [NativeTypeName("struct ID3D11On12Device : IUnknown")]
    [NativeInheritance("IUnknown")]
    public unsafe partial struct ID3D11On12Device
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D11On12Device* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D11On12Device* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D11On12Device* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateWrappedResource(ID3D11On12Device* pThis, [NativeTypeName("IUnknown *")] [In] IUnknown* pResource12, [NativeTypeName("const D3D11_RESOURCE_FLAGS *")] [Const] [In] D3D11_RESOURCE_FLAGS* pFlags11, D3D12_RESOURCE_STATES InState, D3D12_RESOURCE_STATES OutState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppResource11);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ReleaseWrappedResources(ID3D11On12Device* pThis, [NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AcquireWrappedResources(ID3D11On12Device* pThis, [NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D11On12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D11On12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D11On12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateWrappedResource([NativeTypeName("IUnknown *")] [In] IUnknown* pResource12, [NativeTypeName("const D3D11_RESOURCE_FLAGS *")] [Const] [In] D3D11_RESOURCE_FLAGS* pFlags11, D3D12_RESOURCE_STATES InState, D3D12_RESOURCE_STATES OutState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppResource11)
        {
            fixed (ID3D11On12Device* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateWrappedResource>((IntPtr)(lpVtbl[3]))(pThis, pResource12, pFlags11, InState, OutState, riid, ppResource11);
            }
        }

        public void ReleaseWrappedResources([NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources)
        {
            fixed (ID3D11On12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ReleaseWrappedResources>((IntPtr)(lpVtbl[4]))(pThis, ppResources, NumResources);
            }
        }

        public void AcquireWrappedResources([NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources)
        {
            fixed (ID3D11On12Device* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AcquireWrappedResources>((IntPtr)(lpVtbl[5]))(pThis, ppResources, NumResources);
            }
        }
    }

    [Guid("BDB64DF4-EA2F-4C70-B861-AAAB1258BB5D")]
    [NativeTypeName("struct ID3D11On12Device1 : ID3D11On12Device")]
    [NativeInheritance("ID3D11On12Device")]
    public unsafe partial struct ID3D11On12Device1
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D11On12Device1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D11On12Device1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D11On12Device1* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateWrappedResource(ID3D11On12Device1* pThis, [NativeTypeName("IUnknown *")] [In] IUnknown* pResource12, [NativeTypeName("const D3D11_RESOURCE_FLAGS *")] [Const] [In] D3D11_RESOURCE_FLAGS* pFlags11, D3D12_RESOURCE_STATES InState, D3D12_RESOURCE_STATES OutState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppResource11);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ReleaseWrappedResources(ID3D11On12Device1* pThis, [NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AcquireWrappedResources(ID3D11On12Device1* pThis, [NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetD3D12Device(ID3D11On12Device1* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvDevice);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D11On12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D11On12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D11On12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateWrappedResource([NativeTypeName("IUnknown *")] [In] IUnknown* pResource12, [NativeTypeName("const D3D11_RESOURCE_FLAGS *")] [Const] [In] D3D11_RESOURCE_FLAGS* pFlags11, D3D12_RESOURCE_STATES InState, D3D12_RESOURCE_STATES OutState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppResource11)
        {
            fixed (ID3D11On12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateWrappedResource>((IntPtr)(lpVtbl[3]))(pThis, pResource12, pFlags11, InState, OutState, riid, ppResource11);
            }
        }

        public void ReleaseWrappedResources([NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources)
        {
            fixed (ID3D11On12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ReleaseWrappedResources>((IntPtr)(lpVtbl[4]))(pThis, ppResources, NumResources);
            }
        }

        public void AcquireWrappedResources([NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources)
        {
            fixed (ID3D11On12Device1* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AcquireWrappedResources>((IntPtr)(lpVtbl[5]))(pThis, ppResources, NumResources);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetD3D12Device([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvDevice)
        {
            fixed (ID3D11On12Device1* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetD3D12Device>((IntPtr)(lpVtbl[6]))(pThis, riid, ppvDevice);
            }
        }
    }

    [Guid("DC90F331-4740-43FA-866E-67F12CB58223")]
    [NativeTypeName("struct ID3D11On12Device2 : ID3D11On12Device1")]
    [NativeInheritance("ID3D11On12Device1")]
    public unsafe partial struct ID3D11On12Device2
    {
        public void** lpVtbl;

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _QueryInterface(ID3D11On12Device2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _AddRef(ID3D11On12Device2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("ULONG")]
        public delegate uint _Release(ID3D11On12Device2* pThis);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _CreateWrappedResource(ID3D11On12Device2* pThis, [NativeTypeName("IUnknown *")] [In] IUnknown* pResource12, [NativeTypeName("const D3D11_RESOURCE_FLAGS *")] [Const] [In] D3D11_RESOURCE_FLAGS* pFlags11, D3D12_RESOURCE_STATES InState, D3D12_RESOURCE_STATES OutState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppResource11);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _ReleaseWrappedResources(ID3D11On12Device2* pThis, [NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        public delegate void _AcquireWrappedResources(ID3D11On12Device2* pThis, [NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _GetD3D12Device(ID3D11On12Device2* pThis, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvDevice);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _UnwrapUnderlyingResource(ID3D11On12Device2* pThis, [NativeTypeName("ID3D11Resource *")] [In] ID3D11Resource* pResource11, [NativeTypeName("ID3D12CommandQueue *")] [In] ID3D12CommandQueue* pCommandQueue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvResource12);

        [UnmanagedFunctionPointer(CallingConvention.Winapi)]
        [return: NativeTypeName("HRESULT")]
        public delegate int _ReturnUnderlyingResource(ID3D11On12Device2* pThis, [NativeTypeName("ID3D11Resource *")] [In] ID3D11Resource* pResource11, [NativeTypeName("UINT")] uint NumSync, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ulong* pSignalValues, [NativeTypeName("ID3D12Fence **")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Fence** ppFences);

        [return: NativeTypeName("HRESULT")]
        public int QueryInterface([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvObject)
        {
            fixed (ID3D11On12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_QueryInterface>((IntPtr)(lpVtbl[0]))(pThis, riid, ppvObject);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint AddRef()
        {
            fixed (ID3D11On12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_AddRef>((IntPtr)(lpVtbl[1]))(pThis);
            }
        }

        [return: NativeTypeName("ULONG")]
        public uint Release()
        {
            fixed (ID3D11On12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_Release>((IntPtr)(lpVtbl[2]))(pThis);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int CreateWrappedResource([NativeTypeName("IUnknown *")] [In] IUnknown* pResource12, [NativeTypeName("const D3D11_RESOURCE_FLAGS *")] [Const] [In] D3D11_RESOURCE_FLAGS* pFlags11, D3D12_RESOURCE_STATES InState, D3D12_RESOURCE_STATES OutState, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppResource11)
        {
            fixed (ID3D11On12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_CreateWrappedResource>((IntPtr)(lpVtbl[3]))(pThis, pResource12, pFlags11, InState, OutState, riid, ppResource11);
            }
        }

        public void ReleaseWrappedResources([NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources)
        {
            fixed (ID3D11On12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_ReleaseWrappedResources>((IntPtr)(lpVtbl[4]))(pThis, ppResources, NumResources);
            }
        }

        public void AcquireWrappedResources([NativeTypeName("ID3D11Resource *const *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D11Resource** ppResources, [NativeTypeName("UINT")] uint NumResources)
        {
            fixed (ID3D11On12Device2* pThis = &this)
            {
                Marshal.GetDelegateForFunctionPointer<_AcquireWrappedResources>((IntPtr)(lpVtbl[5]))(pThis, ppResources, NumResources);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int GetD3D12Device([NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvDevice)
        {
            fixed (ID3D11On12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_GetD3D12Device>((IntPtr)(lpVtbl[6]))(pThis, riid, ppvDevice);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int UnwrapUnderlyingResource([NativeTypeName("ID3D11Resource *")] [In] ID3D11Resource* pResource11, [NativeTypeName("ID3D12CommandQueue *")] [In] ID3D12CommandQueue* pCommandQueue, [NativeTypeName("const IID &")] [Const] Guid* riid, [NativeTypeName("void **")] [ComOutPtr] void** ppvResource12)
        {
            fixed (ID3D11On12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_UnwrapUnderlyingResource>((IntPtr)(lpVtbl[7]))(pThis, pResource11, pCommandQueue, riid, ppvResource12);
            }
        }

        [return: NativeTypeName("HRESULT")]
        public int ReturnUnderlyingResource([NativeTypeName("ID3D11Resource *")] [In] ID3D11Resource* pResource11, [NativeTypeName("UINT")] uint NumSync, [NativeTypeName("UINT64 *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ulong* pSignalValues, [NativeTypeName("ID3D12Fence **")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] ID3D12Fence** ppFences)
        {
            fixed (ID3D11On12Device2* pThis = &this)
            {
                return Marshal.GetDelegateForFunctionPointer<_ReturnUnderlyingResource>((IntPtr)(lpVtbl[8]))(pThis, pResource11, NumSync, pSignalValues, ppFences);
            }
        }
    }

    public static unsafe partial class Apis
    {
        [DllImport("d3d12", ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int D3D12SerializeRootSignature([NativeTypeName("const D3D12_ROOT_SIGNATURE_DESC *")] [Const] [In] D3D12_ROOT_SIGNATURE_DESC* pRootSignature, [In] D3D_ROOT_SIGNATURE_VERSION Version, [NativeTypeName("ID3DBlob **")] [Out] ID3DBlob** ppBlob, [NativeTypeName("ID3DBlob **")] [Out][Optional] ID3DBlob** ppErrorBlob);

        [DllImport("d3d12", ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int D3D12CreateRootSignatureDeserializer([NativeTypeName("LPCVOID")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pSrcData, [NativeTypeName("SIZE_T")] [In] UIntPtr SrcDataSizeInBytes, [NativeTypeName("const IID &")] [Const] [In] Guid* pRootSignatureDeserializerInterface, [NativeTypeName("void **")] [Out] void** ppRootSignatureDeserializer);

        [DllImport("d3d12", ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int D3D12SerializeVersionedRootSignature([NativeTypeName("const D3D12_VERSIONED_ROOT_SIGNATURE_DESC *")] [Const] [In] D3D12_VERSIONED_ROOT_SIGNATURE_DESC* pRootSignature, [NativeTypeName("ID3DBlob **")] [Out] ID3DBlob** ppBlob, [NativeTypeName("ID3DBlob **")] [Out][Optional] ID3DBlob** ppErrorBlob);

        [DllImport("d3d12", ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int D3D12CreateVersionedRootSignatureDeserializer([NativeTypeName("LPCVOID")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 1)][In] void* pSrcData, [NativeTypeName("SIZE_T")] [In] UIntPtr SrcDataSizeInBytes, [NativeTypeName("const IID &")] [Const] [In] Guid* pRootSignatureDeserializerInterface, [NativeTypeName("void **")] [Out] void** ppRootSignatureDeserializer);

        [DllImport("d3d12", ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int D3D12CreateDevice([NativeTypeName("IUnknown *")] [In][Optional] IUnknown* pAdapter, D3D_FEATURE_LEVEL MinimumFeatureLevel, [NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppDevice);

        [DllImport("d3d12", ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int D3D12GetDebugInterface([NativeTypeName("const IID &")] [Const] [In] Guid* riid, [NativeTypeName("void **")] [ComOutPtr][Optional] void** ppvDebug);

        [DllImport("d3d12", ExactSpelling = true)]
        [return: NativeTypeName("HRESULT")]
        public static extern int D3D12EnableExperimentalFeatures([NativeTypeName("UINT")] uint NumFeatures, [NativeTypeName("const IID *")] [Const] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In] Guid* pIIDs, [NativeTypeName("void *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] void* pConfigurationStructs, [NativeTypeName("UINT *")] [NativeTypeInfo(UnmanagedType.LPArray, SizeParamIndex = 0)][In][Optional] uint* pConfigurationStructSizes);

        [NativeTypeName("const UUID")]
        public static readonly Guid D3D12ExperimentalShaderModels = new Guid(0x76f5573e, 0xf13a, 0x40f5, 0xb2, 0x97, 0x81, 0xce, 0x9e, 0x18, 0x93, 0x3f);

        [NativeTypeName("const UUID")]
        public static readonly Guid D3D12TiledResourceTier4 = new Guid(0xc9c4725f, 0xa81a, 0x4f56, 0x8c, 0x5b, 0xc5, 0x10, 0x39, 0xd6, 0x94, 0xfb);

        [NativeTypeName("const UUID")]
        public static readonly Guid D3D12MetaCommand = new Guid(0xc734c97e, 0x8077, 0x48c8, 0x9f, 0xdc, 0xd9, 0xd1, 0xdd, 0x31, 0xdd, 0x77);

        public static readonly Guid IID_ID3D12Object = new Guid(0xC4FEC28F, 0x7966, 0x4E95, 0x9F, 0x94, 0xF4, 0x31, 0xCB, 0x56, 0xC3, 0xB8);

        public static readonly Guid IID_ID3D12DeviceChild = new Guid(0x905DB94B, 0xA00C, 0x4140, 0x9D, 0xF5, 0x2B, 0x64, 0xCA, 0x9E, 0xA3, 0x57);

        public static readonly Guid IID_ID3D12RootSignature = new Guid(0xC54A6B66, 0x72DF, 0x4EE8, 0x8B, 0xE5, 0xA9, 0x46, 0xA1, 0x42, 0x92, 0x14);

        public static readonly Guid IID_ID3D12RootSignatureDeserializer = new Guid(0x34AB647B, 0x3CC8, 0x46AC, 0x84, 0x1B, 0xC0, 0x96, 0x56, 0x45, 0xC0, 0x46);

        public static readonly Guid IID_ID3D12VersionedRootSignatureDeserializer = new Guid(0x7F91CE67, 0x090C, 0x4BB7, 0xB7, 0x8E, 0xED, 0x8F, 0xF2, 0xE3, 0x1D, 0xA0);

        public static readonly Guid IID_ID3D12Pageable = new Guid(0x63EE58FB, 0x1268, 0x4835, 0x86, 0xDA, 0xF0, 0x08, 0xCE, 0x62, 0xF0, 0xD6);

        public static readonly Guid IID_ID3D12Heap = new Guid(0x6B3B2502, 0x6E51, 0x45B3, 0x90, 0xEE, 0x98, 0x84, 0x26, 0x5E, 0x8D, 0xF3);

        public static readonly Guid IID_ID3D12Resource = new Guid(0x696442BE, 0xA72E, 0x4059, 0xBC, 0x79, 0x5B, 0x5C, 0x98, 0x04, 0x0F, 0xAD);

        public static readonly Guid IID_ID3D12CommandAllocator = new Guid(0x6102DEE4, 0xAF59, 0x4B09, 0xB9, 0x99, 0xB4, 0x4D, 0x73, 0xF0, 0x9B, 0x24);

        public static readonly Guid IID_ID3D12Fence = new Guid(0x0A753DCF, 0xC4D8, 0x4B91, 0xAD, 0xF6, 0xBE, 0x5A, 0x60, 0xD9, 0x5A, 0x76);

        public static readonly Guid IID_ID3D12Fence1 = new Guid(0x433685FE, 0xE22B, 0x4CA0, 0xA8, 0xDB, 0xB5, 0xB4, 0xF4, 0xDD, 0x0E, 0x4A);

        public static readonly Guid IID_ID3D12PipelineState = new Guid(0x765A30F3, 0xF624, 0x4C6F, 0xA8, 0x28, 0xAC, 0xE9, 0x48, 0x62, 0x24, 0x45);

        public static readonly Guid IID_ID3D12DescriptorHeap = new Guid(0x8EFB471D, 0x616C, 0x4F49, 0x90, 0xF7, 0x12, 0x7B, 0xB7, 0x63, 0xFA, 0x51);

        public static readonly Guid IID_ID3D12QueryHeap = new Guid(0x0D9658AE, 0xED45, 0x469E, 0xA6, 0x1D, 0x97, 0x0E, 0xC5, 0x83, 0xCA, 0xB4);

        public static readonly Guid IID_ID3D12CommandSignature = new Guid(0xC36A797C, 0xEC80, 0x4F0A, 0x89, 0x85, 0xA7, 0xB2, 0x47, 0x50, 0x82, 0xD1);

        public static readonly Guid IID_ID3D12CommandList = new Guid(0x7116D91C, 0xE7E4, 0x47CE, 0xB8, 0xC6, 0xEC, 0x81, 0x68, 0xF4, 0x37, 0xE5);

        public static readonly Guid IID_ID3D12GraphicsCommandList = new Guid(0x5B160D0F, 0xAC1B, 0x4185, 0x8B, 0xA8, 0xB3, 0xAE, 0x42, 0xA5, 0xA4, 0x55);

        public static readonly Guid IID_ID3D12GraphicsCommandList1 = new Guid(0x553103FB, 0x1FE7, 0x4557, 0xBB, 0x38, 0x94, 0x6D, 0x7D, 0x0E, 0x7C, 0xA7);

        public static readonly Guid IID_ID3D12GraphicsCommandList2 = new Guid(0x38C3E585, 0xFF17, 0x412C, 0x91, 0x50, 0x4F, 0xC6, 0xF9, 0xD7, 0x2A, 0x28);

        public static readonly Guid IID_ID3D12CommandQueue = new Guid(0x0EC870A6, 0x5D7E, 0x4C22, 0x8C, 0xFC, 0x5B, 0xAA, 0xE0, 0x76, 0x16, 0xED);

        public static readonly Guid IID_ID3D12Device = new Guid(0x189819F1, 0x1DB6, 0x4B57, 0xBE, 0x54, 0x18, 0x21, 0x33, 0x9B, 0x85, 0xF7);

        public static readonly Guid IID_ID3D12PipelineLibrary = new Guid(0xC64226A8, 0x9201, 0x46AF, 0xB4, 0xCC, 0x53, 0xFB, 0x9F, 0xF7, 0x41, 0x4F);

        public static readonly Guid IID_ID3D12PipelineLibrary1 = new Guid(0x80EABF42, 0x2568, 0x4E5E, 0xBD, 0x82, 0xC3, 0x7F, 0x86, 0x96, 0x1D, 0xC3);

        public static readonly Guid IID_ID3D12Device1 = new Guid(0x77ACCE80, 0x638E, 0x4E65, 0x88, 0x95, 0xC1, 0xF2, 0x33, 0x86, 0x86, 0x3E);

        public static readonly Guid IID_ID3D12Device2 = new Guid(0x30BAA41E, 0xB15B, 0x475C, 0xA0, 0xBB, 0x1A, 0xF5, 0xC5, 0xB6, 0x43, 0x28);

        public static readonly Guid IID_ID3D12Device3 = new Guid(0x81DADC15, 0x2BAD, 0x4392, 0x93, 0xC5, 0x10, 0x13, 0x45, 0xC4, 0xAA, 0x98);

        public static readonly Guid IID_ID3D12ProtectedSession = new Guid(0xA1533D18, 0x0AC1, 0x4084, 0x85, 0xB9, 0x89, 0xA9, 0x61, 0x16, 0x80, 0x6B);

        public static readonly Guid IID_ID3D12ProtectedResourceSession = new Guid(0x6CD696F4, 0xF289, 0x40CC, 0x80, 0x91, 0x5A, 0x6C, 0x0A, 0x09, 0x9C, 0x3D);

        public static readonly Guid IID_ID3D12Device4 = new Guid(0xE865DF17, 0xA9EE, 0x46F9, 0xA4, 0x63, 0x30, 0x98, 0x31, 0x5A, 0xA2, 0xE5);

        public static readonly Guid IID_ID3D12LifetimeOwner = new Guid(0xE667AF9F, 0xCD56, 0x4F46, 0x83, 0xCE, 0x03, 0x2E, 0x59, 0x5D, 0x70, 0xA8);

        public static readonly Guid IID_ID3D12SwapChainAssistant = new Guid(0xF1DF64B6, 0x57FD, 0x49CD, 0x88, 0x07, 0xC0, 0xEB, 0x88, 0xB4, 0x5C, 0x8F);

        public static readonly Guid IID_ID3D12LifetimeTracker = new Guid(0x3FD03D36, 0x4EB1, 0x424A, 0xA5, 0x82, 0x49, 0x4E, 0xCB, 0x8B, 0xA8, 0x13);

        public static readonly Guid IID_ID3D12StateObject = new Guid(0x47016943, 0xFCA8, 0x4594, 0x93, 0xEA, 0xAF, 0x25, 0x8B, 0x55, 0x34, 0x6D);

        public static readonly Guid IID_ID3D12StateObjectProperties = new Guid(0xDE5FA827, 0x9BF9, 0x4F26, 0x89, 0xFF, 0xD7, 0xF5, 0x6F, 0xDE, 0x38, 0x60);

        public static readonly Guid IID_ID3D12Device5 = new Guid(0x8B4F173B, 0x2FEA, 0x4B80, 0x8F, 0x58, 0x43, 0x07, 0x19, 0x1A, 0xB9, 0x5D);

        public static readonly Guid IID_ID3D12DeviceRemovedExtendedDataSettings = new Guid(0x82BC481C, 0x6B9B, 0x4030, 0xAE, 0xDB, 0x7E, 0xE3, 0xD1, 0xDF, 0x1E, 0x63);

        public static readonly Guid IID_ID3D12DeviceRemovedExtendedDataSettings1 = new Guid(0xDBD5AE51, 0x3317, 0x4F0A, 0xAD, 0xF9, 0x1D, 0x7C, 0xED, 0xCA, 0xAE, 0x0B);

        public static readonly Guid IID_ID3D12DeviceRemovedExtendedData = new Guid(0x98931D33, 0x5AE8, 0x4791, 0xAA, 0x3C, 0x1A, 0x73, 0xA2, 0x93, 0x4E, 0x71);

        public static readonly Guid IID_ID3D12DeviceRemovedExtendedData1 = new Guid(0x9727A022, 0xCF1D, 0x4DDA, 0x9E, 0xBA, 0xEF, 0xFA, 0x65, 0x3F, 0xC5, 0x06);

        public static readonly Guid IID_ID3D12Device6 = new Guid(0xC70B221B, 0x40E4, 0x4A17, 0x89, 0xAF, 0x02, 0x5A, 0x07, 0x27, 0xA6, 0xDC);

        public static readonly Guid IID_ID3D12ProtectedResourceSession1 = new Guid(0xD6F12DD6, 0x76FB, 0x406E, 0x89, 0x61, 0x42, 0x96, 0xEE, 0xFC, 0x04, 0x09);

        public static readonly Guid IID_ID3D12Device7 = new Guid(0x5C014B53, 0x68A1, 0x4B9B, 0x8B, 0xD1, 0xDD, 0x60, 0x46, 0xB9, 0x35, 0x8B);

        public static readonly Guid IID_ID3D12Device8 = new Guid(0x9218E6BB, 0xF944, 0x4F7E, 0xA7, 0x5C, 0xB1, 0xB2, 0xC7, 0xB7, 0x01, 0xF3);

        public static readonly Guid IID_ID3D12Resource1 = new Guid(0x9D5E227A, 0x4430, 0x4161, 0x88, 0xB3, 0x3E, 0xCA, 0x6B, 0xB1, 0x6E, 0x19);

        public static readonly Guid IID_ID3D12Resource2 = new Guid(0xBE36EC3B, 0xEA85, 0x4AEB, 0xA4, 0x5A, 0xE9, 0xD7, 0x64, 0x04, 0xA4, 0x95);

        public static readonly Guid IID_ID3D12Heap1 = new Guid(0x572F7389, 0x2168, 0x49E3, 0x96, 0x93, 0xD6, 0xDF, 0x58, 0x71, 0xBF, 0x6D);

        public static readonly Guid IID_ID3D12GraphicsCommandList3 = new Guid(0x6FDA83A7, 0xB84C, 0x4E38, 0x9A, 0xC8, 0xC7, 0xBD, 0x22, 0x01, 0x6B, 0x3D);

        public static readonly Guid IID_ID3D12MetaCommand = new Guid(0xDBB84C27, 0x36CE, 0x4FC9, 0xB8, 0x01, 0xF0, 0x48, 0xC4, 0x6A, 0xC5, 0x70);

        public static readonly Guid IID_ID3D12GraphicsCommandList4 = new Guid(0x8754318E, 0xD3A9, 0x4541, 0x98, 0xCF, 0x64, 0x5B, 0x50, 0xDC, 0x48, 0x74);

        public static readonly Guid IID_ID3D12Tools = new Guid(0x7071E1F0, 0xE84B, 0x4B33, 0x97, 0x4F, 0x12, 0xFA, 0x49, 0xDE, 0x65, 0xC5);

        public static readonly Guid IID_ID3D12Debug = new Guid(0x344488B7, 0x6846, 0x474B, 0xB9, 0x89, 0xF0, 0x27, 0x44, 0x82, 0x45, 0xE0);

        public static readonly Guid IID_ID3D12Debug1 = new Guid(0xAFFAA4CA, 0x63FE, 0x4D8E, 0xB8, 0xAD, 0x15, 0x90, 0x00, 0xAF, 0x43, 0x04);

        public static readonly Guid IID_ID3D12Debug2 = new Guid(0x93A665C4, 0xA3B2, 0x4E5D, 0xB6, 0x92, 0xA2, 0x6A, 0xE1, 0x4E, 0x33, 0x74);

        public static readonly Guid IID_ID3D12Debug3 = new Guid(0x5CF4E58F, 0xF671, 0x4FF1, 0xA5, 0x42, 0x36, 0x86, 0xE3, 0xD1, 0x53, 0xD1);

        public static readonly Guid IID_ID3D12DebugDevice1 = new Guid(0xA9B71770, 0xD099, 0x4A65, 0xA6, 0x98, 0x3D, 0xEE, 0x10, 0x02, 0x0F, 0x88);

        public static readonly Guid IID_ID3D12DebugDevice = new Guid(0x3FEBD6DD, 0x4973, 0x4787, 0x81, 0x94, 0xE4, 0x5F, 0x9E, 0x28, 0x92, 0x3E);

        public static readonly Guid IID_ID3D12DebugDevice2 = new Guid(0x60ECCBC1, 0x378D, 0x4DF1, 0x89, 0x4C, 0xF8, 0xAC, 0x5C, 0xE4, 0xD7, 0xDD);

        public static readonly Guid IID_ID3D12DebugCommandQueue = new Guid(0x09E0BF36, 0x54AC, 0x484F, 0x88, 0x47, 0x4B, 0xAE, 0xEA, 0xB6, 0x05, 0x3A);

        public static readonly Guid IID_ID3D12DebugCommandList1 = new Guid(0x102CA951, 0x311B, 0x4B01, 0xB1, 0x1F, 0xEC, 0xB8, 0x3E, 0x06, 0x1B, 0x37);

        public static readonly Guid IID_ID3D12DebugCommandList = new Guid(0x09E0BF36, 0x54AC, 0x484F, 0x88, 0x47, 0x4B, 0xAE, 0xEA, 0xB6, 0x05, 0x3F);

        public static readonly Guid IID_ID3D12DebugCommandList2 = new Guid(0xAEB575CF, 0x4E06, 0x48BE, 0xBA, 0x3B, 0xC4, 0x50, 0xFC, 0x96, 0x65, 0x2E);

        public static readonly Guid IID_ID3D12SharingContract = new Guid(0x0ADF7D52, 0x929C, 0x4E61, 0xAD, 0xDB, 0xFF, 0xED, 0x30, 0xDE, 0x66, 0xEF);

        public static readonly Guid IID_ID3D12InfoQueue = new Guid(0x0742A90B, 0xC387, 0x483F, 0xB9, 0x46, 0x30, 0xA7, 0xE4, 0xE6, 0x14, 0x58);

        public static readonly Guid IID_ID3D12GraphicsCommandList5 = new Guid(0x55050859, 0x4024, 0x474C, 0x87, 0xF5, 0x64, 0x72, 0xEA, 0xEE, 0x44, 0xEA);

        public static readonly Guid IID_ID3D12GraphicsCommandList6 = new Guid(0xC3827890, 0xE548, 0x4CFA, 0x96, 0xCF, 0x56, 0x89, 0xA9, 0x37, 0x0F, 0x80);

        public static readonly Guid IID_ID3D12ShaderReflectionType = new Guid(0xE913C351, 0x783D, 0x48CA, 0xA1, 0xD1, 0x4F, 0x30, 0x62, 0x84, 0xAD, 0x56);

        public static readonly Guid IID_ID3D12ShaderReflectionVariable = new Guid(0x8337A8A6, 0xA216, 0x444A, 0xB2, 0xF4, 0x31, 0x47, 0x33, 0xA7, 0x3A, 0xEA);

        public static readonly Guid IID_ID3D12ShaderReflectionConstantBuffer = new Guid(0xC59598B4, 0x48B3, 0x4869, 0xB9, 0xB1, 0xB1, 0x61, 0x8B, 0x14, 0xA8, 0xB7);

        public static readonly Guid IID_ID3D12ShaderReflection = new Guid(0x5A58797D, 0xA72C, 0x478D, 0x8B, 0xA2, 0xEF, 0xC6, 0xB0, 0xEF, 0xE8, 0x8E);

        public static readonly Guid IID_ID3D12LibraryReflection = new Guid(0x8E349D19, 0x54DB, 0x4A56, 0x9D, 0xC9, 0x11, 0x9D, 0x87, 0xBD, 0xB8, 0x04);

        public static readonly Guid IID_ID3D12FunctionReflection = new Guid(0x1108795C, 0x2772, 0x4BA9, 0xB2, 0xA8, 0xD4, 0x64, 0xDC, 0x7E, 0x27, 0x99);

        public static readonly Guid IID_ID3D12FunctionParameterReflection = new Guid(0xEC25F42D, 0x7006, 0x4F2B, 0xB3, 0x3E, 0x02, 0xCC, 0x33, 0x75, 0x73, 0x3F);

        public static readonly Guid IID_ID3D12VideoDecoderHeap = new Guid(0x0946B7C9, 0xEBF6, 0x4047, 0xBB, 0x73, 0x86, 0x83, 0xE2, 0x7D, 0xBB, 0x1F);

        public static readonly Guid IID_ID3D12VideoDevice = new Guid(0x1F052807, 0x0B46, 0x4ACC, 0x8A, 0x89, 0x36, 0x4F, 0x79, 0x37, 0x18, 0xA4);

        public static readonly Guid IID_ID3D12VideoDecoder = new Guid(0xC59B6BDC, 0x7720, 0x4074, 0xA1, 0x36, 0x17, 0xA1, 0x56, 0x03, 0x74, 0x70);

        public static readonly Guid IID_ID3D12VideoProcessor = new Guid(0x304FDB32, 0xBEDE, 0x410A, 0x85, 0x45, 0x94, 0x3A, 0xC6, 0xA4, 0x61, 0x38);

        public static readonly Guid IID_ID3D12VideoDecodeCommandList = new Guid(0x3B60536E, 0xAD29, 0x4E64, 0xA2, 0x69, 0xF8, 0x53, 0x83, 0x7E, 0x5E, 0x53);

        public static readonly Guid IID_ID3D12VideoProcessCommandList = new Guid(0xAEB2543A, 0x167F, 0x4682, 0xAC, 0xC8, 0xD1, 0x59, 0xED, 0x4A, 0x62, 0x09);

        public static readonly Guid IID_ID3D12VideoDecodeCommandList1 = new Guid(0xD52F011B, 0xB56E, 0x453C, 0xA0, 0x5A, 0xA7, 0xF3, 0x11, 0xC8, 0xF4, 0x72);

        public static readonly Guid IID_ID3D12VideoProcessCommandList1 = new Guid(0x542C5C4D, 0x7596, 0x434F, 0x8C, 0x93, 0x4E, 0xFA, 0x67, 0x66, 0xF2, 0x67);

        public static readonly Guid IID_ID3D12VideoMotionEstimator = new Guid(0x33FDAE0E, 0x098B, 0x428F, 0x87, 0xBB, 0x34, 0xB6, 0x95, 0xDE, 0x08, 0xF8);

        public static readonly Guid IID_ID3D12VideoMotionVectorHeap = new Guid(0x5BE17987, 0x743A, 0x4061, 0x83, 0x4B, 0x23, 0xD2, 0x2D, 0xAE, 0xA5, 0x05);

        public static readonly Guid IID_ID3D12VideoDevice1 = new Guid(0x981611AD, 0xA144, 0x4C83, 0x98, 0x90, 0xF3, 0x0E, 0x26, 0xD6, 0x58, 0xAB);

        public static readonly Guid IID_ID3D12VideoEncodeCommandList = new Guid(0x8455293A, 0x0CBD, 0x4831, 0x9B, 0x39, 0xFB, 0xDB, 0xAB, 0x72, 0x47, 0x23);

        public static readonly Guid IID_ID3D12VideoDecoder1 = new Guid(0x79A2E5FB, 0xCCD2, 0x469A, 0x9F, 0xDE, 0x19, 0x5D, 0x10, 0x95, 0x1F, 0x7E);

        public static readonly Guid IID_ID3D12VideoDecoderHeap1 = new Guid(0xDA1D98C5, 0x539F, 0x41B2, 0xBF, 0x6B, 0x11, 0x98, 0xA0, 0x3B, 0x6D, 0x26);

        public static readonly Guid IID_ID3D12VideoProcessor1 = new Guid(0xF3CFE615, 0x553F, 0x425C, 0x86, 0xD8, 0xEE, 0x8C, 0x1B, 0x1F, 0xB0, 0x1C);

        public static readonly Guid IID_ID3D12VideoExtensionCommand = new Guid(0x554E41E8, 0xAE8E, 0x4A8C, 0xB7, 0xD2, 0x5B, 0x4F, 0x27, 0x4A, 0x30, 0xE4);

        public static readonly Guid IID_ID3D12VideoDevice2 = new Guid(0xF019AC49, 0xF838, 0x4A95, 0x9B, 0x17, 0x57, 0x94, 0x37, 0xC8, 0xF5, 0x13);

        public static readonly Guid IID_ID3D12VideoDecodeCommandList2 = new Guid(0x6E120880, 0xC114, 0x4153, 0x80, 0x36, 0xD2, 0x47, 0x05, 0x1E, 0x17, 0x29);

        public static readonly Guid IID_ID3D12VideoProcessCommandList2 = new Guid(0xDB525AE4, 0x6AD6, 0x473C, 0xBA, 0xA7, 0x59, 0xB2, 0xE3, 0x70, 0x82, 0xE4);

        public static readonly Guid IID_ID3D12VideoEncodeCommandList1 = new Guid(0x94971ECA, 0x2BDB, 0x4769, 0x88, 0xCF, 0x36, 0x75, 0xEA, 0x75, 0x7E, 0xBC);

        public static readonly Guid IID_ID3D11On12Device = new Guid(0x85611E73, 0x70A9, 0x490E, 0x96, 0x14, 0xA9, 0xE3, 0x02, 0x77, 0x79, 0x04);

        public static readonly Guid IID_ID3D11On12Device1 = new Guid(0xBDB64DF4, 0xEA2F, 0x4C70, 0xB8, 0x61, 0xAA, 0xAB, 0x12, 0x58, 0xBB, 0x5D);

        public static readonly Guid IID_ID3D11On12Device2 = new Guid(0xDC90F331, 0x4740, 0x43FA, 0x86, 0x6E, 0x67, 0xF1, 0x2C, 0xB5, 0x82, 0x23);
    }
}
